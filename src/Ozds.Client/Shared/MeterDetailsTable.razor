@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Ozds.Business.Time
@if (_dataStruct is not null)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
      <MudItem xs="12" Class="pa-1">
        <MeterGraph/>
      </MudItem>
      <MudItem xs="12" Class="pa-1">
        <MeterGage/>
      </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h4" Class="d-flex">
      @(T["Brojilo"] + ": " + Source)
    </MudText>
    @foreach (var dataStruct in _shownOMMs.Where(x => x.show).ToList())
    {
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Obračunsko razdoblje"]: @(dataStruct.data.month + "/" + dataStruct.data.year)
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.year, dataStruct.data.month)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="Color.Default"/>
            </MudItem>
          </MudGrid>
          <MudCollapse Class="py-1" Expanded="_shownOMMs.Where(x => x.data.year == dataStruct.data.year).Where(x => x.data.month == dataStruct.data.month).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Prvo očitanje"]:
                @if (dataStruct.data.monthEndTotal is not null)
                  @(FloatString(dataStruct.data.monthEndTotal / 1000, 0)) kWh

              </MudContainer>
              <MudContainer>
                @T["Zadnje očitanje"]:
                @if (dataStruct.data.monthStartTotal is not null)
                  @(FloatString(dataStruct.data.monthStartTotal / 1000, 0)) kWh

              </MudContainer>
              <MudContainer Style="font-size: large; font-weight:bold;">
                @T["Ukupna potrošnja"]:
                @if (dataStruct.data.monthStartTotal is not null && dataStruct.data.monthEndTotal is not null)
                  @(FloatString((dataStruct.data.monthStartTotal - dataStruct.data.monthEndTotal) / 1000, 0)) kWh

              </MudContainer>
              <MudContainer Style="font-weight:bold;">
                @T["Maksimalna snaga"]:
                @(FloatString(dataStruct.data.maxPower, 0) + " W")
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
      T="TabularData"
      MultiSelection="true"
      Items="@_dataStruct"
      SortMode="SortMode.Multiple">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@(T["Brojilo"] + ": " + Source)</MudText>
        <MudSpacer/>
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="@T["Pretraži"]"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.month"
          Title='@T["Obračunsko razdoblje"]'>
          <CellTemplate>
            @(context.Item.month + "/" + context.Item.year)
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.monthEndTotal"
          Title='@T["Prvo očitanje"]'>
          <CellTemplate>
            @if (context.Item.monthEndTotal is not null)
              @(FloatString(context.Item.monthEndTotal / 1000, 0) + " kWh")

          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.monthStartTotal"
          Title='@T["Zadnje očitanje"]'>
          <CellTemplate>
            @if (context.Item.monthStartTotal is not null)
              @(FloatString(context.Item.monthStartTotal / 1000, 0) + " kWh")

          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: xx-large;"
          Property="x => x.monthStartTotal - x.monthEndTotal"
          Title='@T["Ukupna potrošnja"]'>
          <CellTemplate>
            @if (context.Item.monthStartTotal is not null && context.Item.monthEndTotal is not null)
              @(FloatString((context.Item.monthStartTotal - context.Item.monthEndTotal) / 1000, 0) + " kWh")

          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.maxPower"
          Title='@T["Maksimalna snaga"]'>
          <CellTemplate>
            @(FloatString(context.Item.maxPower, 0) + " W")
          </CellTemplate>
        </PropertyColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="TabularData"/>
      </PagerContent>
    </MudDataGrid>

    <MudGrid Class="my-3">
      <MudItem xs="6">
        <MeterGage/>
      </MudItem>
      <MudItem xs="6">
        <MeterGraph/>
      </MudItem>
    </MudGrid>
  </MudHidden>
}

@code {

  [Parameter] public string Source { get; set; } = "abb";
  public string TextValue { get; set; } = "";
  private MeterModel? _meter;
  private string? _searchString;
  private List<TabularData> _dataStruct = new();
  private (float? First, float? Last, DateTimeOffset FirstDate) _startEnd;

  public record ChartData(float? L1, float? L2, float? L3, DateTimeOffset date);

  public record struct TabularData(string year, string month, float? monthStartTotal, float? monthEndTotal, float maxPower);

  private string _month = "-1";
  private string _year = "-1";
  private float thisMonthMaxPower = 0;
  private IReadOnlyList<SpanningMeasure<float>>? _spanningMeasurements;
  private DateTimeOffset startOfThisYear = DateTimeOffset.UtcNow.GetStartOfYear();
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset now = DateTime.UtcNow;

  private class ExpandThing
  {
    public TabularData data;
    public bool expand;
    public bool show;
  }

  List<ExpandThing> _shownOMMs = new();

  protected override async Task OnInitializedAsync()
  {
    var aggregateQueries = ScopedServices.GetRequiredService<OzdsAggregateQueries>();
    var test = await aggregateQueries.ReadAgnostic(new[] { "x => x.Interval == 2 || x.Interval == 0" }, startOfThisYear, now, 1, 9000);
    var measurePerMonth = test.OrderBy(x => x.Timestamp).Where(x => x.MeterId == Source).ToList();

    foreach (var month in startOfThisYear.GetThisYearMonthStarts().Reverse())
    {
      var measureThisMonthMonthly = measurePerMonth
        .Where(x => x.Timestamp.Month == month.Month)
        .Where(x => x.Interval == IntervalModel.Month)
        .FirstOrDefault();
      if (measureThisMonthMonthly is null)
        continue;
      var measureThisMonthQuarterHourlies = measurePerMonth
        .Where(x => x.Timestamp.Month == month.Month)
        .Where(x => x.Interval == IntervalModel.QuarterHour)
        .ToList();
      var a = measureThisMonthMonthly.ActiveEnergySpan_Wh.SpanMin.TariffUnary.DuplexImport.PhaseSum;
      var b = measureThisMonthMonthly.ActiveEnergySpan_Wh.SpanMax.TariffUnary.DuplexImport.PhaseSum;
      var c = 15;
      _dataStruct.Add(new TabularData
      {
        year = month.ToString("yy"),
        month = month.ToString("MM"),
        monthStartTotal = b,
        monthEndTotal = a,
        maxPower = c
      });
      thisMonthMaxPower = 0;
      _month = "00";
      _year = "00";
    }

    foreach (var data in _dataStruct)
    {
      _shownOMMs.Add(new ExpandThing { data = data, show = true, expand = false });
    }
  }

  private void OnExpandCollapseClick(string year, string month)
  {
    var a = _shownOMMs.Where(x => x.data.year == year).Where(x => x.data.month == month).FirstOrDefault();
    if (a is not null)
      a.expand = !a.expand;
  }

}
