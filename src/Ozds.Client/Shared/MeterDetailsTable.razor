@using Ozds.Business.Time
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@if (_dataStruct is not null && _meter is not null)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudGrid Class="my-3 pa-1">
      <MudItem xs="12" Class="pa-1">
        <MeterGraph Source="@Source"/>
      </MudItem>
      <MudItem xs="12" Class="pa-1">
        <MeterGauge Source="@Source"/>
      </MudItem>
    </MudGrid>

    <MudText Typo="Typo.h4" Class="d-flex">
      @(T["Device"] + ": " + Source)
    </MudText>
    <MudText Typo="Typo.h5">@(T["Name"] + ": " + _meter.Title)</MudText>
    <MudItem Class="d-flex flex-row">
      <MudText Typo="Typo.h5">@(T["Catalogue"] + ": ")</MudText>
      <MudButton OnClick="() => InspectCatalogue(catalogue)" Variant="Variant.Filled" Color="Color.Primary" Class="p-1 mx-2">@(catalogue)</MudButton>
    </MudItem>
    @foreach (var dataStruct in _shownOMMs.Where(x => x.show).ToList())
    {
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Billing period"]: @(dataStruct.data.month + "/" + dataStruct.data.year)
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.year, dataStruct.data.month)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="Color.Default"/>
            </MudItem>
          </MudGrid>
          <MudCollapse Class="py-1" Expanded="_shownOMMs.Where(x => x.data.year == dataStruct.data.year).Where(x => x.data.month == dataStruct.data.month).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["First reading"]:
                @if (dataStruct.data.monthStartTotal is not null)
                  @(NumericString(dataStruct.data.monthStartTotal / 1000, 0)) kWh
              </MudContainer>
              <MudContainer>
                @T["Last reading"]:
                @if (dataStruct.data.monthEndTotal is not null)
                  @(NumericString(dataStruct.data.monthEndTotal / 1000, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-size: large; font-weight:bold;">
                @T["Total consumption"]:
                @if (dataStruct.data.monthStartTotal is not null && dataStruct.data.monthEndTotal is not null)
                  @(NumericString((dataStruct.data.monthEndTotal - dataStruct.data.monthStartTotal) / 1000, 0)) kWh
              </MudContainer>
              <MudContainer Style="font-weight:bold;">
                @T["Max power"]:
                @(NumericString(dataStruct.data.maxPower / 1000, 0) + " kW")
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
      T="TabularData"
      MultiSelection="true"
      Items="@_dataStruct"
      SortMode="SortMode.Multiple">
      <ToolBarContent>
        <MudItem Class="d-flex flex-column">
          <MudText Typo="Typo.h4">@(T["Device"] + ": " + _meter.Title + " (" + Source + ")")</MudText>
          <MudItem Class="d-flex flex-row">
            <MudText Typo="Typo.h5">@(T["Catalogue"] + ": ")</MudText>
            <MudButton OnClick="() => InspectCatalogue(catalogue)" Variant="Variant.Filled" Color="Color.Primary" Class="p-1 mx-2">@(catalogue)</MudButton>
          </MudItem>
        </MudItem>
        <MudSpacer/>
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="@T["Search"]"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.month"
          Title='@T["Billing period"]'>
          <CellTemplate>
            @(context.Item.month + "/" + context.Item.year)
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.monthStartTotal"
          Title='@T["First reading"]'>
          <CellTemplate>
            @if (context.Item.monthStartTotal is not null)
              @(NumericString(context.Item.monthStartTotal / 1000, 0) + " kWh")
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.monthEndTotal"
          Title='@T["Last reading"]'>
          <CellTemplate>
            @if (context.Item.monthEndTotal is not null)
              @(NumericString(context.Item.monthEndTotal / 1000, 0) + " kWh")
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: xx-large;"
          Property="x => x.monthEndTotal - x.monthStartTotal"
          Title='@T["Total consumption"]'>
          <CellTemplate>
            @if (context.Item.monthStartTotal is not null && context.Item.monthEndTotal is not null)
              @(NumericString((context.Item.monthEndTotal - context.Item.monthStartTotal) / 1000, 0) + " kWh")
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.maxPower"
          Title='@T["Max power"]'>
          <CellTemplate>
            @(NumericString(context.Item.maxPower / 1000, 0) + " kW")
          </CellTemplate>
        </PropertyColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="TabularData"/>
      </PagerContent>
    </MudDataGrid>

    <MudGrid Class="my-3">
      <MudItem xs="6">
        <MeterGauge Source="@Source"/>
      </MudItem>
      <MudItem xs="6">
        <MeterGraph Source="@Source"/>
      </MudItem>
      <MudItem xs="12">
        <BrushGraph Source="@Source"/>
      </MudItem>
    </MudGrid>
  </MudHidden>
}

@code {

  [Parameter]
  public string Source { get; set; } = "abb";

  private string? _searchString;
  private List<TabularData> _dataStruct = new();

  public record ChartData(decimal? L1, decimal? L2, decimal? L3, DateTimeOffset date);

  public string catalogue = "";

  public record struct TabularData(string year, string month, decimal? monthStartTotal, decimal? monthEndTotal, decimal maxPower);

  private DateTimeOffset startOfThisYear = DateTimeOffset.UtcNow.GetStartOfYear();
  private DateTimeOffset startOfThisYearNoOffset = DateTimeApplyOffset(DateTimeOffset.UtcNow.GetStartOfYear());
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset now = DateTime.UtcNow;
  private IMeter? _meter;

  @* MOBILE *@
  private class ExpandThing
  {
    public TabularData data;
    public bool expand;
    public bool show;
  }

  List<ExpandThing> _shownOMMs = new();

  protected override async Task OnInitializedAsync()
  {
    var aggregateQueries = ScopedServices.GetRequiredService<OzdsAggregateQueries>();
    var auditableQueries = ScopedServices.GetRequiredService<OzdsAuditableQueries>();
    var catalogueQueries = ScopedServices.GetRequiredService<OzdsNetworkUserCatalogueQueries>();
    var aggragets = await aggregateQueries.ReadAgnostic(new[] { $"x => (x.Interval == 2 || x.Interval == 0) && x.MeterId == \"{Source}\"" }, startOfThisYear, now, 1, 900000);
    var measurementLocation = await auditableQueries.Read<NetworkUserMeasurementLocationModel>(new[] { $"x => x.MeterId == \"{Source}\"" }, Enumerable.Empty<string>(), Enumerable.Empty<string>(), 1, 1);
    var measures = aggragets.OrderBy(x => x.Timestamp).Where(x => x.MeterId == Source).ToList();
    var measurePerMonth = measures.Where(x => x.Interval == IntervalModel.Month).ToList();
    var measurePerQuarterHour = measures.Where(x => x.Interval == IntervalModel.QuarterHour).ToList();
    _meter = await ScopedServices
      .GetRequiredService<OzdsMeterTableQueries>()
      .GetMeterById(Source);

    if (measurementLocation is not null && measurementLocation.Items.FirstOrDefault() is not null)
    {
      var netUserCatalogue = await catalogueQueries.NetworkUserCatalogueById(measurementLocation.Items.FirstOrDefault().NetworkUserCatalogueId);
      if (netUserCatalogue is not null)
        catalogue = netUserCatalogue.Title;
    }
                                           
    foreach (var month in startOfThisYearNoOffset.GetThisYearMonthStarts().Reverse())
    {
      var monthNoOffset = DateTimeApplyOffset(month);
      var measureNextMonthMonthly = measurePerMonth
        .Where(x => x.Timestamp == monthNoOffset.GetStartOfNextMonth())
        .Where(x => x.Interval == IntervalModel.Month)
        .FirstOrDefault();
      var measureThisMonthMonthly = measurePerMonth
        .Where(x => x.Timestamp == monthNoOffset.GetStartOfMonth())
        .Where(x => x.Interval == IntervalModel.Month)
        .FirstOrDefault();
      if (measureThisMonthMonthly is null)
        continue;
      var ThisMonthQuarterHourly = measurePerQuarterHour
        .Where(x => x.Timestamp.GetStartOfMonth() == monthNoOffset.GetStartOfMonth())
        .Where(x => x.Interval == IntervalModel.QuarterHour)
        .ToList();

      var _monthStartTotal = measureThisMonthMonthly.ActiveEnergySpan_Wh.SpanMin().TariffUnary().DuplexImport().PhaseSum();

      var _monthEndTotal = measureThisMonthMonthly.ActiveEnergySpan_Wh.SpanMax().TariffUnary().DuplexImport().PhaseSum();
      if (measureNextMonthMonthly is not null)
      {
        var _nextMonthStartTotal = measureNextMonthMonthly.ActiveEnergySpan_Wh.SpanMin().TariffUnary().DuplexImport().PhaseSum();
        if (_nextMonthStartTotal > 0)
          _monthEndTotal = _nextMonthStartTotal;
      }

      var _maxPower = ThisMonthQuarterHourly.Select(measure => measure.ActivePower_W.TariffUnary().DuplexImport().PhaseSum()).DefaultIfEmpty(0).Max();
      _dataStruct.Add(
        new TabularData
        {
          year = monthNoOffset.ToString("yy"),
          month = monthNoOffset.ToString("MM"),
          monthStartTotal = _monthStartTotal,
          monthEndTotal = _monthEndTotal,
          maxPower = _maxPower
        });
    }

    foreach (var data in _dataStruct)
    {
      _shownOMMs.Add(new ExpandThing { data = data, show = true, expand = false });
    }
  }

  private void OnExpandCollapseClick(string year, string month)
  {
    var a = _shownOMMs.Where(x => x.data.year == year).Where(x => x.data.month == month).FirstOrDefault();
    if (a is not null)
      a.expand = !a.expand;
  }

  private void InspectCatalogue(string item)
  {
    // TODO - This is hardcoded because there will be a new inspector for this stuff
    NavigationManager.NavigateTo("data/red-low-catalogue/1");
  }

}

<style>
  .mud-table-toolbar{ flex-wrap: wrap; height: inherit; }
</style>
