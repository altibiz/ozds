@using Ozds.Business.Time
@inherits OzdsOwningComponentBase
<MudText Typo="Typo.h4">@T["Network user"]</MudText>
@* MOBILE *@
<MudHidden Breakpoint="Breakpoint.MdAndUp">

  <MudGrid Class="my-3 pa-1">
    <MudItem xs="12" Class="pa-1">
      <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
        <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h6">
            @T["Current months consumption"]:
          </MudText>
        </MudItem>
        <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
          <MudText Typo="Typo.h4">
            @(NumericString(_thisMonthTotal / 1000, 0) + " kWh")
          </MudText>
        </MudContainer>
      </MudPaper>
    </MudItem>

    <MudItem xs="12" Class="pa-1">
      <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
        <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h6">
            @T["Last months consumption"]:
          </MudText>
        </MudItem>
        <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
          <MudText Typo="Typo.h4">
            @(NumericString(_lastMonthTotal / 1000, 0) + " kWh")
          </MudText>
        </MudContainer>
        <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h6">
            @T["Last months invoice total"]:
          </MudText>
        </MudItem>
        <MudContainer Class="d-flex justify-center" MaxWidth="MaxWidth.Small">
          <MudText Typo="Typo.h6">
            @(lastMonthInvoicesTotal == 0 ? T["Invoice pending..."] : NumericString(lastMonthInvoicesTotal) + " EUR")
          </MudText>
        </MudContainer>
      </MudPaper>
    </MudItem>
    <MudItem xs="12" Class="pa-1">
      <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
        <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h6">
            @(T["This years consumption"] + " (kW):")
          </MudText>
        </MudItem>
        <NetUserRepGraph/>
      </MudPaper>
    </MudItem>
  </MudGrid>
</MudHidden>


@* DESKTOP *@
<MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudGrid Class="my-3">
    <MudItem xs="4">
      <MudPaper Class="mud-width-full d-flex flex-column justify-space-between pa-4" Height="320px">
        <MudItem Class="" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h5">
            @(T["Current months consumption"] + ": ")
          </MudText>
        </MudItem>
        <MudContainer Class="d-flex align-end justify-center" MaxWidth="MaxWidth.Small">
          <MudText Typo="Typo.h1">
            @(NumericString(_thisMonthTotal / 1000, 0))
          </MudText>
          <MudText Typo="Typo.h4" Class="mb-3 ml-1">kWh</MudText>
        </MudContainer>
        <MudItem Class="" Style="font-size: large; font-weight: bold;color: white;">
          <MudText Typo="Typo.h6">
            _____ ______ _ __________ _______:
          </MudText>
        </MudItem>
        <MudItem Class="" Style="font-size: large; font-weight: bold;color: white;">
          <MudText Typo="Typo.h6">
            ____
          </MudText>
        </MudItem>
      </MudPaper>
    </MudItem>
    <MudItem xs="4">
      <MudPaper Class="mud-width-full d-flex flex-column justify-space-between pa-4" Height="320px">
        <MudItem Class="" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h5">
            @(T["Last months consumption"] + ": ")
          </MudText>
        </MudItem>
        <MudContainer Class="d-flex align-end justify-center" MaxWidth="MaxWidth.Small">
          <MudText Typo="Typo.h1">
            @(NumericString(_lastMonthTotal / 1000, 0))
          </MudText>
          <MudText Typo="Typo.h4" Class="mb-3 ml-1">kWh</MudText>
        </MudContainer>
        <MudItem Class="" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h6">
            @(T["Last months invoice total"] + ": ")
          </MudText>
        </MudItem>
        <MudItem Class="" Style="font-size: large; font-weight: bold; align-self: center;">
          <MudText Typo="Typo.h5">
            @(lastMonthInvoicesTotal == 0 ? T["Invoice pending..."] : NumericString(lastMonthInvoicesTotal) + " EUR")
          </MudText>
        </MudItem>
      </MudPaper>
    </MudItem>
    <MudItem xs="4">
      <MudPaper Class="mud-width-full pa-4" Height="320px">
        <MudItem Class="" Style="font-size: large; font-weight: bold;">
          <MudText Typo="Typo.h5">
            @(T["This years consumption"] + " (kW):")
          </MudText>
        </MudItem>
        <NetUserRepGraph/>
      </MudPaper>
    </MudItem>
  </MudGrid>
</MudHidden>

@code {

  [CascadingParameter]
  public RepresentativeState representative { get; set; } = default!;

  private DateTimeOffset now = DateTimeOffset.UtcNow;
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset startOfNextMonth = DateTimeOffset.UtcNow.GetStartOfNextMonth();
  private DateTimeOffset startOfLastMonth = DateTimeOffset.UtcNow.GetStartOfLastMonth();
  private decimal _lastMonthTotal = 0;
  private decimal _thisMonthTotal = 0;
  decimal lastMonthInvoicesTotal = 0m;
  private List<NetworkUserModel>? _netUsers;
  private IEnumerable<NetworkUserInvoiceModel>? _invoices;

  protected override async Task OnInitializedAsync()
  {
    var query = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();

    _invoices = await query.GetNetworkUserInvoicesByRepresentative(representative.Representative, startOfLastMonth, startOfThisMonth);
    lastMonthInvoicesTotal = _invoices.Select(x => x.TotalWithTax_EUR).DefaultIfEmpty(0).Sum();

    _netUsers = await query.GetNetworkUsersByRepresentative(representative.Representative);
    List<string> _netUserIds = new();
    if (_netUsers is not null)
      _netUserIds = _netUsers.Select(x => x.Id).ToList();
    var meters = await query.ViewModelByNetworkUser(_netUserIds, startOfLastMonth, now);
    foreach (var meter in meters)
    {
      var _thisMonthAggregate = meter.Aggregates.Where(x => x.Timestamp == startOfThisMonth).Where(x => x is not null).ToList();
      var _lastMonthAggregate = meter.Aggregates.Where(x => x.Timestamp == startOfLastMonth).Where(x => x is not null).ToList();
      decimal _thisMonthUsage = 0;
      decimal _lastMonthUsage = 0;
      if (_thisMonthAggregate is not null && _thisMonthAggregate.Count > 0)
        _thisMonthUsage = _thisMonthAggregate
          .Select(x => x.ActiveEnergySpan_Wh.SpanDiff().TariffUnary().DuplexImport().PhaseSum())
          .DefaultIfEmpty(0)
          .Sum();
      if (_lastMonthAggregate is not null && _lastMonthAggregate.Count > 0)
        _lastMonthUsage = _lastMonthAggregate
          .Select(x => x.ActiveEnergySpan_Wh.SpanDiff().TariffUnary().DuplexImport().PhaseSum())
          .DefaultIfEmpty(0)
          .Sum();

      _thisMonthTotal += _thisMonthUsage;
      _lastMonthTotal += _lastMonthUsage;
    }
  }

}
