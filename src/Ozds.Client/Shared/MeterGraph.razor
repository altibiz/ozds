@using Color = MudBlazor.Color
@using System.Timers
@implements IDisposable

@if (_graphValues is not null)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudPaper Class="d-flex align-center justify-stat mud-width-full pa-1 pb-3 flex-column">
      <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
        @(_dataTitle + T[" za"] + ": " + Source)
      </MudItem>
      <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Small">
        @if (_graphValues is not null)
        {
          <ApexChart TItem="ChartData"
                     XAxisType="XAxisType.Datetime"
                     Options="graphOptionsMob"
                     @ref="chart">
            @for (var i = 0; i < lineCount; i++)
            {
              var j = i;
              <ApexPointSeries TItem="ChartData"
                               Items="@_graphValues"
                               Name="@_graphValues.Select(x => x.names[j]).FirstOrDefault()"
                               SeriesType="SeriesType.Line"
                               XValue='x => DateTimeGraph(x.date)'
                               YValue="x => (decimal)x.values[j]"
                               Stroke="@(ColorGraph(j))"/>
            }
            @if (lineCount == 0)
            {
              <ApexPointSeries TItem="ChartData"
                               Items="@_graphValues"
                               Name="n/a"
                               SeriesType="SeriesType.Line"
                               XValue='x => DateTimeGraph(x.date)'
                               YValue="x => 0"
                               Stroke="@(ColorGraph(0))"/>
            }
          </ApexChart>
          <MudItem Class="d-flex flex-column justify-center gap-2">
            <MudMenu Dense="true" Variant="Variant.Filled" Color="Color.Primary">
              <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                  @_dataTitle
                  <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown"/>
                </MudButton>
              </ActivatorContent>
              <ChildContent>
                @foreach (var type in _displayType)
                {
                  <MudMenuItem OnClick="@(() => DataMenuItemClicked(type))">@type</MudMenuItem>
                }
              </ChildContent>
            </MudMenu>
            <MudMenu Dense="true" Variant="Variant.Filled" Color="Color.Primary">
              <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                  @_timeTitle
                  <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown"/>
                </MudButton>
              </ActivatorContent>
              <ChildContent>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale1"))">15 min</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale2"))">1 h</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale3"))">6 h</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale4"))">24 h</MudMenuItem>
              </ChildContent>
            </MudMenu>
          </MudItem>
        }
      </MudContainer>
    </MudPaper>
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8 flex-column" Height="450px">
      <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
        @(_dataTitle + " za: " + Source)
      </MudItem>
      <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Medium">
        @if (_graphValues is not null)
        {
          <ApexChart TItem="ChartData"
                     Options="graphOptions"
                     @ref="chart">
            @for (var i = 0; i < lineCount; i++)
            {
              var j = i;
              <ApexPointSeries TItem="ChartData"
                               Items="@_graphValues"
                               Name="@_graphValues.Select(x => x.names[j]).FirstOrDefault()"
                               SeriesType="SeriesType.Line"
                               XValue='x => DateTimeGraph(x.date)'
                               YValue="x => (decimal)x.values[j]"
                               Stroke="@(ColorGraph(j))"/>
            }
            @if (lineCount == 0)
            {
              <ApexPointSeries TItem="ChartData"
                               Items="@_graphValues"
                               Name="n/a"
                               SeriesType="SeriesType.Line"
                               XValue='x => DateTimeGraph(x.date)'
                               YValue="x => 0"
                               Stroke="@(ColorGraph(0))"/>
            }
          </ApexChart>
          <MudItem Class="d-flex flex-row justify-center gap-2">
            <MudMenu Dense="true" Variant="Variant.Filled" Color="Color.Primary">
              <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                  @_dataTitle
                  <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown"/>
                </MudButton>
              </ActivatorContent>
              <ChildContent>
                @foreach (var type in _displayType)
                {
                  <MudMenuItem OnClick="@(() => DataMenuItemClicked(type))">@type</MudMenuItem>
                }
              </ChildContent>
            </MudMenu>
            <MudMenu Dense="true" Variant="Variant.Filled" Color="Color.Primary">
              <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">
                  @_timeTitle
                  <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown"/>
                </MudButton>
              </ActivatorContent>
              <ChildContent>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale1"))">15 min</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale2"))">1 h</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale3"))">6 h</MudMenuItem>
                <MudMenuItem OnClick="@(() => TimeMenuItemClicked("Scale4"))">24 h</MudMenuItem>
              </ChildContent>
            </MudMenu>
          </MudItem>
        }
      </MudContainer>
    </MudPaper>
  </MudHidden>
}


@code {
  [Parameter] public string Source { get; set; } = "abb";
  private MeterModel? _meter;
  AnnotationsYAxis? _annotation;
  private ApexChartOptions<ChartData> graphOptions = NewApexChartOptions<ChartData>();
  private ApexChartOptions<ChartData> graphOptionsMob = NewApexChartOptions<ChartData>();
  OzdsAggregateQueries aggregateQueries;
  OzdsMeasurementQueries measureQueries;
  private List<string> _displayType = new()
  {
    "Napon", "Struja", "Radna snaga", "Jalova snaga", "Prividna snaga"
  };

  public int timeSpanMins = 15;
  public int lineCount = 0;
  private float connectionMaxPower = 1000000f;
  public IEnumerable<ChartData>? _graphValues;
  private string _dataTitle = "";
  private string _timeTitle = "15 min";

  public record ChartData(float[] values, string[] names, DateTimeOffset date, string source);

  private ApexChart<ChartData> chart = default!;

  @* TIME STUFF *@
  private bool timerInitialized;
  private Timer timer;
  private int updateMilisec = 10000;
  private DateTimeOffset maxDate;
  private int counter;
  private DateTimeOffset now = DateTimeOffset.UtcNow.LocalDateTime;

  protected override async Task OnInitializedAsync()
  {
    aggregateQueries = ScopedServices.GetRequiredService<OzdsAggregateQueries>();
    measureQueries = ScopedServices.GetRequiredService<OzdsMeasurementQueries>();
    _meter = await ScopedServices
      .GetRequiredService<OzdsMeterTableQueries>()
      .GetMeterById(Source);

    SetGraphOptionsStart();

    await DataMenuItemClicked(_dataTitle);

    SetAnnotationStart();

    await SetAnnotationGraphOptions();
  }

  private async Task DataMenuItemClicked(string type)
  {
    await GetValues(type, now.AddMinutes(-timeSpanMins), now);
  }

  private async Task TimeMenuItemClicked(string item)
  {
    switch (item)
    {
      case "Scale1":
        timeSpanMins = 15;
        _timeTitle = "15 min";
        break;
      case "Scale2":
        timeSpanMins = 60;
        _timeTitle = "1 h";
        break;
      case "Scale3":
        timeSpanMins = 60 * 6;
        _timeTitle = "6 h";
        break;
      case "Scale4":
        timeSpanMins = 60 * 24;
        _timeTitle = "24 h";
        break;
    }

    SetGraphTimeRange();
    await GetValues(_dataTitle, now.AddMinutes(-timeSpanMins), now);
  }

  private async Task GetValues(string type, DateTimeOffset fromDate, DateTimeOffset toDate, bool reRenderChart = true)
  {
    var quorterHourlyMeasures = await aggregateQueries.ReadAgnostic(new[] { "x => x.Interval == 0" }, fromDate, toDate, 1, 9000);
    var measures = await measureQueries.ReadAgnostic(new[] { $"x => x.MeterId == \"{Source}\"" }, fromDate, toDate, 1, 3000);
    switch (type)
    {
      case "Struja":
        _dataTitle = "Struja";
        _graphValues = measures.Select(x =>
          new ChartData(
            values: new float[]{
              x.Current_A.TariffUnary.DuplexAny.PhaseSplit.ValueL1,
              x.Current_A.TariffUnary.DuplexAny.PhaseSplit.ValueL2,
              x.Current_A.TariffUnary.DuplexAny.PhaseSplit.ValueL3
            },
            names: new string[]{"L1 Struja", "L2 Struja","L3 Struja"},
            date: x.Timestamp,
            source: x.MeterId
          )).ToList();
        lineCount = 3;
        break;
      case "":
      case "Radna snaga":
        _dataTitle = "Radna snaga";
        _graphValues = measures.Select(x =>
          new ChartData(
            values: new float[]{
              x.ActivePower_W.TariffUnary.DuplexNet.PhaseSplit.ValueL1,
              x.ActivePower_W.TariffUnary.DuplexNet.PhaseSplit.ValueL2,
              x.ActivePower_W.TariffUnary.DuplexNet.PhaseSplit.ValueL3,
              x.ActivePower_W.TariffUnary.DuplexNet.PhaseSum
            },
            names: new string[]{"L1 Radna snaga", "L2 Radna snaga","L3 Radna snaga","Ukupna snaga"},
            date: x.Timestamp,
            source: x.MeterId
          )).ToList();
        lineCount = 4;
        break;
      case "Napon":
        _dataTitle = "Napon";
        _graphValues = measures.Select(x =>
          new ChartData(
            values: new float[]{
              x.Voltage_V.TariffUnary.DuplexAny.PhaseSplit.ValueL1,
              x.Voltage_V.TariffUnary.DuplexAny.PhaseSplit.ValueL2,
              x.Voltage_V.TariffUnary.DuplexAny.PhaseSplit.ValueL3
            },
            names: new string[]{"L1 Napon", "L2 Napon","L3 Napon"},
            date: x.Timestamp,
            source: x.MeterId
          )).ToList();
        lineCount = 3;
        break;
      case "Jalova Snaga":
        _dataTitle = "Jalova Snaga";
        _graphValues = measures.Select(x =>
          new ChartData(
            values: new float[]{
              x.ReactivePower_VAR.TariffUnary.DuplexNet.PhaseSplit.ValueL1,
              x.ReactivePower_VAR.TariffUnary.DuplexNet.PhaseSplit.ValueL2,
              x.ReactivePower_VAR.TariffUnary.DuplexNet.PhaseSplit.ValueL3
            },
            names: new string[]{"L1 Jalova snaga", "L2 Jalova snaga","L3 Jalova snaga"},
            date: x.Timestamp,
            source: x.MeterId
          )).ToList();
        lineCount = 3;
        break;
      case "Prividna snaga":
        _graphValues = measures.Select(x =>
          new ChartData(
            values: new float[]{
              x.ApparentPower_VA.TariffUnary.DuplexNet.PhaseSum,
            },
            names: new string[]{"Prividna snaga"},
            date: x.Timestamp,
            source: x.MeterId
          )).ToList();
        lineCount = 1;
        _dataTitle = "Prividna snaga";
        break;
      default:
        _dataTitle = "none";
        break;
    }

    if (chart is null)
    {
      return;
    }

    InvokeAsync(() => StateHasChanged());
    if (reRenderChart)
    {
      await chart.UpdateSeriesAsync();
      await SetAnnotationGraphOptions();
    }
  }


  private SeriesStroke ColorGraph(int index)
  {
    if (index == 0)
    {
      return new SeriesStroke { Color = "#673AB7", Width = 4 };
    }

    if (index == 1)
    {
      return new SeriesStroke { Color = "#FB8C00", Width = 4 };
    }

    if (index == 2)
    {
      return new SeriesStroke { Color = "#00897B", Width = 4 };
    }

    if (index == 3)
    {
      return new SeriesStroke { Color = "#D81B60", Width = 4 };
    }

    return new SeriesStroke { Color = "#FB8C00", Width = 4 };
  }

  private async Task SetAnnotationGraphOptions()
  {
    if (_dataTitle == "Radna snaga")
    {
      if (_graphValues is not null && _graphValues.Select(x => x.values[3]).ToList().Count > 0)
      {
        var graphMaxPower = _graphValues.MaxBy(x => x.values[3]).values[3];
        graphOptions.Yaxis.Clear();
        graphOptions.Yaxis.Add(new YAxis
        {
          Max = graphMaxPower * 1.5,
          Labels = new YAxisLabels
          {
            Formatter = "function(val, index) { return val.toFixed(0); }"
          }
        });
        graphOptions.Annotations = new Annotations
        {
          Yaxis = new List<AnnotationsYAxis> { _annotation }
        };

        graphOptionsMob.Yaxis.Clear();
        graphOptionsMob.Yaxis.Add(new YAxis
        {
          Max = graphMaxPower * 1.5,
          Labels = new YAxisLabels
          {
            Formatter = "function(val, index) { return val.toFixed(0); }"
          }
        });
        graphOptionsMob.Annotations = new Annotations
        {
          Yaxis = new List<AnnotationsYAxis> { _annotation }
        };
        if (chart is null)
        {
          return;
        }

        await chart.RenderAsync();
        await chart.AddYAxisAnnotationAsync(_annotation, true);
      }
    }
    else
    {
      graphOptions.Annotations = new Annotations();
      graphOptions.Yaxis.Clear();
      graphOptions.Yaxis.Add(new YAxis
        {
          Labels = new YAxisLabels
          {
            Formatter = "function(val, index) { return val.toFixed(0); }"
          }
        }
      );

      graphOptionsMob.Annotations = new Annotations();
      graphOptionsMob.Yaxis.Clear();
      graphOptionsMob.Yaxis.Add(new YAxis
        {
          Labels = new YAxisLabels
          {
            Formatter = "function(val, index) { return val.toFixed(0); }"
          }
        }
      );
      if (chart is null)
      {
        return;
      }

      await chart.ClearAnnotationsAsync();
      await chart.RenderAsync();
    }
  }

  private void SetGraphOptionsStart()
  {
    graphOptionsMob = NewApexChartOptions<ChartData>();
    graphOptionsMob.Grid = new Grid
    {
      BorderColor = "#e7e7e7",
      Row = new GridRow
      {
        Colors = new List<string> { "#f3f3f3", "transparent" },
        Opacity = 0.5d
      }
    };
    graphOptionsMob.Tooltip = new Tooltip { X = new TooltipX { Format = @"HH:mm:ss" } };
    graphOptionsMob.Yaxis = new List<YAxis>();
    graphOptionsMob.Xaxis = new XAxis();
    graphOptionsMob.Xaxis = new XAxis
    {
      Labels = new XAxisLabels { Show = false },
      Range = 60000 * timeSpanMins
    };
    graphOptionsMob.Chart = new Chart
    {
      Toolbar = new Toolbar
      {
        Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
      }
    };
    graphOptions = NewApexChartOptions<ChartData>();
    graphOptions.Grid = new Grid
    {
      BorderColor = "#e7e7e7",
      Row = new GridRow
      {
        Colors = new List<string> { "#f3f3f3", "transparent" },
        Opacity = 0.5d
      }
    };
    graphOptions.Chart = new Chart
    {
      Toolbar = new Toolbar
      {
        Tools = new Tools { Zoomin = false, Zoomout = false, Zoom = false, Download = false, Pan = true, Selection = false }
      }
    };
    graphOptions.Tooltip = new Tooltip { X = new TooltipX { Format = @"HH:mm:ss" } };
    graphOptions.Yaxis = new List<YAxis>();
    graphOptions.Xaxis = new XAxis();
    graphOptions.Xaxis = new XAxis
    {
      Type = XAxisType.Datetime,
      AxisTicks = new AxisTicks(),
      Range = 60000 * timeSpanMins
    };
  }

  private void SetGraphTimeRange()
  {
    graphOptions.Xaxis = new XAxis
    {
      Type = XAxisType.Datetime,
      AxisTicks = new AxisTicks(),
      Range = 60000 * timeSpanMins
    };

    graphOptionsMob.Xaxis = new XAxis
    {
      Labels = new XAxisLabels { Show = false },
      Range = 60000 * timeSpanMins
    };
  }

  private void SetAnnotationStart()
  {
    if (_meter is not null)
      connectionMaxPower = _meter.ConnectionPower_W * 3;

    _annotation = new AnnotationsYAxis
    {
      Label = new Label
      {
        Text = T["PRIKLJUČNA SNAGA"],
        Style = new Style { Background = "red", Color = "white", FontSize = "12px" }
      },
      Y = connectionMaxPower,
      BorderColor = "red",
      StrokeDashArray = 0
    };
  }

  @* TIME STUFF *@

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender && !timerInitialized)
    {
      timerInitialized = true;
      timer = new Timer(updateMilisec);
      timer.Elapsed += async delegate { await UpdateChartSeries(); };
      timer.Enabled = true;
    }
  }

  private async Task UpdateChartSeries()
  {
    if (_graphValues is not null)
    {
      var lastGraphValues = _graphValues.OrderByDescending(x => x.date).FirstOrDefault();
      if (lastGraphValues is not null)
      {
        await GetValues(_dataTitle, lastGraphValues.date, DateTimeOffset.UtcNow, false);
        await chart.AppendDataAsync(_graphValues);
      }
    }
  }

  public class ChartDataComparer : IEqualityComparer<ChartData>
  {
    public bool Equals(ChartData x, ChartData y)
    {
      return x.date == y.date;
    }

    public int GetHashCode(ChartData obj)
    {
      return obj.date.GetHashCode();
    }
  }

  void IDisposable.Dispose()
  {
    timer?.Dispose();
    timer = null;
  }

}
