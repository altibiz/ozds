@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@if (_shownInvoices is not null && _shownInvoices.Count() > 0)
{
  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.MdAndDown">
    <MudDataGrid
      T="DemoEventModel"
      Class="my-6"
      MultiSelection="true"
      Items="@_events"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@T["Changes"]</MudText>
        <MudSpacer/>
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="Search"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns >
        <PropertyColumn
          CellStyle="text-align: start !important;"
          Property="x => x.Title"
          Title='@T["Title"]' Sortable="false"/>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.Timestamp"
          Title='@T["Datum"]'>
          <CellTemplate>
            @(context.Item.Timestamp.ToString("HH:mm dd.MM.yyyy."))
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: large;"
          Property="x => x.Level"
          Title='@T["Level"]'>
          <CellTemplate>
            @if (context.Item.Level == LevelModel.Error || context.Item.Level == LevelModel.Critical)
            {
              <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error"/>
            }
            else if (context.Item.Level == LevelModel.Warning)
            {
              <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning"/>
            }
            else
            {
              <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success"/>
            }
          </CellTemplate>
        </PropertyColumn>
        <TemplateColumn CellClass="d-flex justify-end" Sortable="false" Filterable="false">
          <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectEvent(context.Item.Id)" Variant="Variant.Filled" Color="Color.Primary">
                @T["Overview"]
              </MudButton>
            </MudStack>
          </CellTemplate>
        </TemplateColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="DemoEventModel"/>
      </PagerContent>
    </MudDataGrid>
  </MudHidden>
}

@code {

  [CascadingParameter]
  public UserState user { get; set; } = default!;

  [CascadingParameter]
  public RepresentativeState representative { get; set; } = default!;

  public string SearchString { get; set; } = "";
  private List<DemoEventModel> _events = new();

  private class MobileData
  {
    public DemoEventModel auditEvent = default!;
    public bool expand;
    public bool show;
  }

  private class DemoEventModel
  {
    public string Id = new Random().Next(1, 10000).ToString();
    public string Title = string.Empty;
    public string Description = string.Empty;
    public LevelModel Level;
    public DateTimeOffset Timestamp = DateTimeOffset.UtcNow.AddMinutes(new Random().Next(60, 180));
  }

  List<MobileData> _shownInvoices = new();
  private string? _searchString;

  protected override void OnInitialized()
  {
    _events.Add(
      new DemoEventModel
      {
        Title = "AbbB2x NOT RESPONDING",
        Description = "At {Time} AbbB2x STOPPED RESPONDING",
        Level = LevelModel.Critical
      });
    _events.Add(
      new DemoEventModel
      {
        Title = "SchneideriEM3xxx CRITICAL VOLTAGE",
        Description = "At {Time} SchneideriEM3xxx had CRITICAL VOLTAGE",
        Level = LevelModel.Critical
      });
    _events.Add(
      new DemoEventModel
      {
        Title = "SchneideriEM3xxx SLOW",
        Description = "At {Time} SchneideriEM3xxx has SLOW response time",
        Level = LevelModel.Warning
      });
    _events.Add(
      new DemoEventModel
      {
        Title = "SchneideriEM3xxx LOW VOLTAGE",
        Description = "At {Time} SchneideriEM3xxx had LOW VOLTAGE",
        Level = LevelModel.Warning
      });
    _events = _events.OrderByDescending(x => x.Level).ToList();
    if (_events is not null)
    {
      foreach (var _auditEvent in _events)
      {
        _shownInvoices.Add(new MobileData { auditEvent = _auditEvent, expand = false, show = true });
      }
    }
  }

  private void OnExpandCollapseClick(string invoiceId)
  {
    var a = _shownInvoices.Where(x => x.auditEvent.Id == invoiceId).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Func<DemoEventModel, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private Task Filter(string value)
  {
    SearchString = value;
    foreach (var inv in _shownInvoices)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownInvoices.Where(x => x.auditEvent.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

  private void InspectEvent(string id)
  {
    NavigationManager.NavigateTo($"event/{id}");
  }

}
