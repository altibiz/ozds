@using System.Timers
@implements IDisposable

@if (gaugeValue is not null)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudPaper Class="d-flex align-center justify-space-between mud-width-full pa-1 flex-column">
      <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
        @(T["Active power"] + ": " + Source)
      </MudItem>
      <MudContainer MaxWidth="MaxWidth.Small">
        <ApexChart TItem="GaugeData"
                   Options="gaugeOptions"
                   @ref="gauge">
          <ApexPointSeries TItem="GaugeData"
                           Items="gaugeValue"
                           SeriesType=SeriesType.RadialBar
                           Name="@T["Search"]"
                           XValue="@(e => NumericString(e.value / 1000, 2) + " kW")"
                           YAggregate="@(e => (decimal?)Math.Round((double)e.First().percent, 2))"
                           OrderByDescending="e => e.X"/>
        </ApexChart>
      </MudContainer>
      <MudText Typo="Typo.body1" Style="font-weight: bold;margin-top: -30px;text-align: center; color: #adadad;" Class="m-0">
        @T["Relative to connected power"] (@(NumericString(connectionMaxPower / 1000) + " kW"))
      </MudText>
    </MudPaper>
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudPaper Class="d-flex align-center justify-space-between mud-width-full py-8 px-8 flex-column" Height="450px">
      <MudItem Class="d-flex" Style="font-size: large; font-weight: bold;">
        @(T["Active power"] + ": " + Source)
      </MudItem>
      <MudContainer MaxWidth="MaxWidth.Medium">
        <ApexChart TItem="GaugeData"
                   Options="gaugeOptions"
                   @ref="gauge">
          <ApexPointSeries TItem="GaugeData"
                           Items="gaugeValue"
                           SeriesType=SeriesType.RadialBar
                           Name="@T["Search"]"
                           XValue="@(e => NumericString(e.value / 1000, 2) + " kW")"
                           YAggregate="@(e => (decimal?)Math.Round((double)e.First().percent, 2))"
                           OrderByDescending="e => e.X"/>
        </ApexChart>
      </MudContainer>
      <MudText Typo="Typo.body1" Style="font-weight: bold;margin-top: -30px;text-align: center; color: #adadad;" Class="m-0">
        @T["Relative to connected power"] <br> (@(NumericString(connectionMaxPower / 1000) + " kW"))
      </MudText>
    </MudPaper>
  </MudHidden>
}

@code {

  [Parameter]
  public string Source { get; set; } = "abb";

  private IMeter? _meter;
  private ApexChart<GaugeData> gauge = default!;
  private decimal thisMonthCurrentPower = 0;
  private List<GaugeData> gaugeValue = new();
  private ApexChartOptions<GaugeData> gaugeOptions = NewApexChartOptions<GaugeData>();
  private decimal connectionMaxPower = 100000;
  OzdsMeasurementQueries measureQueries = default!;

  private class GaugeData
  {
    public decimal value = 10;
    public decimal valueMax = 100000;
    public decimal percent = 50;

    public GaugeData(decimal val, decimal max)
    {
      value = val;
      valueMax = max;
      if (valueMax <= 0)
      {
        valueMax = 100000;
      }

      percent = value / valueMax * 100;
    }
  }

  @* TIME STUFF *@
  private bool timerInitialized;
  private Timer timer = new();
  private int updateMillisecond = 20000;
  private DateTimeOffset now = DateTimeOffset.UtcNow.LocalDateTime;

  protected override async Task OnInitializedAsync()
  {
    measureQueries = ScopedServices.GetRequiredService<OzdsMeasurementQueries>();
    _meter = await ScopedServices
      .GetRequiredService<OzdsMeterTableQueries>()
      .GetMeterById(Source);
    if (_meter is not null)
      connectionMaxPower = _meter.ConnectionPower_W * 3;

    SetGaugeOptionsStart();

    await GetValue();

    SetGaugeValue();
  }

  private async Task GetValue()
  {
    now = DateTimeOffset.UtcNow.LocalDateTime;
    var measureLastQuarterHour = await measureQueries.ReadAgnostic(new[] { $"x => x.MeterId == \"{Source}\"" }, now.AddMinutes(-1), now, 1, 1000);
    if (measureLastQuarterHour.Count() > 0)
    {
      var a = measureLastQuarterHour.OrderBy(x => x.Timestamp).LastOrDefault();
      if (a is not null)
      {
        var b = a.ActivePower_W.TariffUnary().DuplexNet().PhaseSum();
        thisMonthCurrentPower = b;
      }
    }
  }

  private void SetGaugeValue()
  {
    gaugeValue.Add(new GaugeData(thisMonthCurrentPower, connectionMaxPower));

    if (thisMonthCurrentPower / connectionMaxPower > 1)
    {
      gaugeOptions.Colors = new List<string> { "#E53935" };
    }
    else
    {
      gaugeOptions.Colors = new List<string> { "#1E88E5" };
    }
  }

  private void SetGaugeOptionsStart()
  {
    gaugeOptions.PlotOptions = new PlotOptions { RadialBar = new PlotOptionsRadialBar { StartAngle = -90, EndAngle = 90 } };
  }

  @* TIME STUFF *@

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender && !timerInitialized)
    {
      timerInitialized = true;
      timer = new Timer(updateMillisecond);
      timer.Elapsed += async delegate { await UpdateChartSeries(); };
      timer.Enabled = true;
    }
  }

  private async Task UpdateChartSeries()
  {
    try
    {
      await GetValue();
      gaugeValue = new List<GaugeData> { new(thisMonthCurrentPower, connectionMaxPower) };
      if (gauge is null)
      {
        return;
      }

      await InvokeAsync(() => StateHasChanged());
      await gauge.UpdateOptionsAsync(false, true, false);
    }
    catch (TaskCanceledException ex)
    {
        Console.WriteLine("Gauge task was canceled: " + ex.Message);
    }
    catch (Exception ex)
    {
      Console.WriteLine("An error occurred: " + ex.Message);
    }
  }


  void IDisposable.Dispose()
  {
    timer?.Dispose();
  }

}
