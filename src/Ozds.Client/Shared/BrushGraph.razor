@using Ozds.Business.Time
@using ChartType = ApexCharts.ChartType

<MudPaper Class="d-flex align-center justify-center mud-width-full py-8 px-8 flex-column" Height="600px">
  <MudItem Class="d-flex justify-center align-center" Style="font-size: large; font-weight: bold;">
    @T["Active Power"] @T["for"]: @Source
  </MudItem>
  <MudContainer Class="d-flex flex-column">
    <ApexChart TItem="ChartData"
               Height="300"
               Options="graphLOptions"
               @ref="brushChart">
      @foreach (var series in ChartSeries)
      {
        <ApexPointSeries TItem="ChartData"
                         Items="@series.Data"
                         Name="@series.Name"
                         SeriesType="SeriesType.Line"
                         XValue="x => DateTimeGraph(x.Date)"
                         YValue="@(x => x.Value)"/>
      }
    </ApexChart>

    <ApexChart TItem="ChartData"
               Height="130"
               Options="optionsLine"
               @ref="brushChartLine">
      @foreach (var series in ChartSeries)
      {
        <ApexPointSeries TItem="ChartData"
                         Items="@series.Data"
                         Name="@series.Name"
                         SeriesType="SeriesType.Line"
                         XValue="x => DateTimeGraph(x.Date)"
                         YValue="@(x => x.Value)"/>
      }
    </ApexChart>
    <MudItem Class="d-flex">
      <MudDatePicker Label="@T["Pick month"]" DateChanged="e => MonthChange(e)" OpenTo="OpenTo.Month" FixYear="@DateTime.Today.Year" FixDay="@DateTime.Today.Day" DateFormat="MMM"/>
    </MudItem>
  </MudContainer>
</MudPaper>

@code {

  [Parameter]
  public string Source { get; set; } = "abb";

  private DateTime? _month;
  private DateTimeOffset startOfThisYear = DateTimeOffset.UtcNow.GetStartOfYear();
  private readonly DateTimeOffset now = DateTime.UtcNow;
  OzdsAggregateQueries aggregateQueries = default!;
  private List<ChartData> Data1 = new();
  private List<ChartData> Data2 = new();
  private List<ChartData> Data3 = new();
  private List<ChartData> Data4 = new();

  public class ChartData
  {
    public DateTimeOffset Date { get; set; }
    public decimal Value { get; set; }
  }

  public class Series<T>
  {
    public string Name { get; set; } = "";
    public List<T> Data { get; set; } = new();
  }

  private ApexChart<ChartData> brushChart = new();
  private ApexChart<ChartData> brushChartLine = new();

  private List<Series<ChartData>> ChartSeries
  {
    get
    {
      return new List<Series<ChartData>>
      {
        new()
        {
          Name = "L1 Active Power",
          Data = Data1
        },
        new()
        {
          Name = "L2 Active Power",
          Data = Data2
        },
        new()
        {
          Name = "L3 Active Power",
          Data = Data3
        },
        new()
        {
          Name = "Total power",
          Data = Data4
        }
      };
    }
  }


  private readonly ApexChartOptions<ChartData> graphLOptions = NewApexChartOptions<ChartData>();
  private readonly ApexChartOptions<ChartData> optionsLine = NewApexChartOptions<ChartData>();

  private async Task GetValues(DateTimeOffset startDate, DateTimeOffset endDate)
  {
    IEnumerable<IMeasurement> measures;
    measures = await aggregateQueries.ReadAgnostic(new[] { "x => x.Interval == 1", $"x => x.MeterId == \"{Source}\"" }, startDate, endDate, 1, 9000);

    Data1 =
      measures.Select(
        x => new ChartData
        {
          Date = x.Timestamp,
          Value = x.ActivePower_W.TariffUnary().DuplexNet().PhaseSplit().ValueL1
        }
      ).ToList();
    Data2 =
      measures.Select(
        x => new ChartData
        {
          Date = x.Timestamp,
          Value = x.ActivePower_W.TariffUnary().DuplexNet().PhaseSplit().ValueL2
        }
      ).ToList();
    Data3 =
      measures.Select(
        x => new ChartData
        {
          Date = x.Timestamp,
          Value = x.ActivePower_W.TariffUnary().DuplexNet().PhaseSplit().ValueL3
        }
      ).ToList();
    Data4 =
      measures.Select(
        x => new ChartData
        {
          Date = x.Timestamp,
          Value = x.ActivePower_W.TariffUnary().DuplexNet().PhaseSplit().PhaseSum()
        }
      ).ToList();
    StateHasChanged();
    await brushChart.UpdateSeriesAsync();
    await brushChartLine.UpdateSeriesAsync();
  }

  protected override async Task OnInitializedAsync()
  {
    aggregateQueries = ScopedServices.GetRequiredService<OzdsAggregateQueries>();
    SetGraphOptionsStart();

    await GetValues(startOfThisYear, now);
  }

  private void SetGraphOptionsStart()
  {
    graphLOptions.Chart = new Chart
    {
      Type = ChartType.Line,
      Height = 130,
      Id = "chart2",
      DropShadow = new DropShadow
      {
        Enabled = true,
        EnabledOnSeries = new List<double> { 1 }
      },
      Toolbar = new Toolbar
      {
        AutoSelected = AutoSelected.Pan,
        Show = false
      }
    };

    graphLOptions.Colors = new List<string> { "#673AB7", "#FB8C00", "#00897B", "#D81B60" };
    graphLOptions.Stroke = new Stroke
    {
      Width = new List<int> { 2, 2, 2, 6 }
    };
    graphLOptions.Xaxis = new XAxis
    {
      Type = XAxisType.Datetime,
      Labels = new XAxisLabels { Format = @"dd.MM." }
    };
    graphLOptions.Tooltip = new Tooltip { X = new TooltipX { Format = @"dd.MM." } };
    graphLOptions.Yaxis = new List<YAxis>();
    graphLOptions.Yaxis.Add(
      new YAxis
      {
        Labels = new YAxisLabels
        {
          Formatter = "function(val, index) { return (val ?? 0).toFixed(0); }"
        }
      });


    optionsLine.Chart = new Chart
    {
      Height = 130,
      Brush = new Brush
      {
        Target = "chart2",
        Enabled = true
      },
      Selection = new Selection
      {
        Enabled = true
      }
    };

    optionsLine.Colors = new List<string> { "#673AB7", "#FB8C00", "#00897B", "#D81B60" };
    optionsLine.Stroke = new Stroke
    {
      Width = new List<int> { 1, 1, 1, 3 }
    };
    optionsLine.Xaxis = new XAxis
    {
      Type = XAxisType.Datetime,
      Labels = new XAxisLabels { Format = @"dd.MM." },
      Tooltip = new XAxisTooltip
      {
        Enabled = false
      }
    };
    optionsLine.Yaxis = new List<YAxis>();
    optionsLine.Yaxis.Add(
      new YAxis
      {
        Labels = new YAxisLabels
        {
          Formatter = "function(val, index) { return (val ?? 0).toFixed(0); }"
        }
      });
  }

  private async Task MonthChange(DateTime? newDate)
  {
    _month = newDate;
    if (_month is not null)
    {
      DateTimeOffset month = DateTime.SpecifyKind(_month.Value, DateTimeKind.Utc);
      await GetValues(month.GetStartOfMonth(), month.GetStartOfNextMonth());
    }
  }

}
