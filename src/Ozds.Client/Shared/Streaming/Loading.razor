@typeparam TState

@if (State is null)
{
  return;
}

@if (State.IsLoading)
{
  if (Progress is not null)
  {
    @Progress
    return;
  }

  <MudProgressCircular/>
  return;
}

@if (State.Error is not null)
{
  if (Error is not null)
  {
    @Error(State.Error!)
    return;
  }

  <MudAlert Severity="Severity.Error">
    @State.Error
  </MudAlert>
  return;
}

@if (State.Value is null)
{
  if (NotFound is not null)
  {
    @NotFound
    return;
  }

  <NotFound/>
  return;
}

@if (Found is not null)
{
  @Found(State.Value!)
}

@code {

  [Parameter]
  public LoadingState<TState>? State { get; set; } = new();

  [Parameter]
  public Func<Task<TState?>>? Load { get; set; }

  [Parameter]
  public RenderFragment? Progress { get; set; }

  [Parameter]
  public RenderFragment<string>? Error { get; set; }

  [Parameter]
  public RenderFragment? NotFound { get; set; }

  [Parameter]
  public RenderFragment<TState>? Found { get; set; }

  protected override async Task OnInitializedAsync()
  {
    if (State is null)
    {
      return;
    }

    if (Load is not null)
    {
      try
      {
        State = State.WithValue(await Load());
      }
      catch (Exception e)
      {
        State = State.WithError(e.Message);
      }
    }
  }

}
