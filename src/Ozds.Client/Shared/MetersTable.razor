@using Ozds.Business.Time
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size


@* MOBILE *@
<MudHidden Breakpoint="Breakpoint.MdAndUp">
  <MudText Typo="Typo.h4" Class="d-flex">
    @(T["Measurement locations"])
  </MudText>
  <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="@T["Search"]" Variant="Variant.Text"></MudTextField>
  @foreach (var dataStruct in _shownOMMs.Where(x => x.show).ToList())
  {
    <MudPaper Elevation="2" Class="ma-1">
      <MudStack Spacing="0">
        <MudGrid Class="d-flex pa-2">
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
            @T["Device"]: <br> @dataStruct.data.meter.Title
          </MudItem>
          <MudItem xs="2" Class="d-flex align-center justify-end">
            <MudIconButton OnClick="() => InspectMeter(dataStruct.data.meter.Id)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary"/>
          </MudItem>
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
            @T["Current months consumption"]: <br>
            @FloatString(dataStruct.data.thisMonthUsage / 1000, 0) kWh
          </MudItem>
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
            @T["Last months consumption"]: <br>
            @FloatString(dataStruct.data.lastMonthUsage / 1000, 0) kWh
          </MudItem>
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
            @T["Last months invoice total"]: <br>
            @(dataStruct.data.lastMonthsPayment == 0 ? T["Invoice pending..."] : DecimalString(dataStruct.data.lastMonthsPayment) + " EUR")
          </MudItem>
          <MudItem xs="2" Class="d-flex align-center justify-end">
            <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.meter.Id)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="Color.Default"/>
          </MudItem>
        </MudGrid>

        <MudCollapse Class="py-2" Expanded="_shownOMMs.Where(x => x.data.meter.Id == dataStruct.data.meter.Id).First().expand">
          <MudStack>
            <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
            <MudContainer>
              @T["Location"]: @(dataStruct.data.location.Title)
            </MudContainer>
            <MudContainer>
              @T["Network user"]: @(dataStruct.data.networkUser.Title)
            </MudContainer>
          </MudStack>
        </MudCollapse>
      </MudStack>
    </MudPaper>
  }
</MudHidden>


@* DESKTOP *@
<MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
    T="TabularData"
    MultiSelection="true"
    Items="@_dataStruct"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@_quickFilter">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@T["Measurement locations"]</MudText>
      <MudSpacer/>
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@T["Search"]"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>

      <TemplateColumn Title="@T["Location"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectLocation(context.Item.location.Id)" Variant="Variant.Outlined" Color="Color.Primary">
              @context.Item.location.Title
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <TemplateColumn Title="@T["Network user"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectNetworkUser(context.Item.networkUser.Id)" Variant="Variant.Outlined" Color="Color.Primary">
              @context.Item.networkUser.Title
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <TemplateColumn Title="@T["Device"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectMeter(context.Item.meter.Id)" Variant="Variant.Filled" Color="Color.Primary">
              @context.Item.meter.Title
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.thisMonthUsage"
        Title='@T["Current months consumption"]'>
        <CellTemplate>
          @(FloatString(context.Item.thisMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthUsage"
        Title='@T["Last months consumption"]'>
        <CellTemplate>
          @(FloatString(context.Item.lastMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthsPayment"
        Title='@T["Last months invoice total"]'>
        <CellTemplate>
          @(context.Item.lastMonthsPayment == 0 ? T["Invoice pending..."] : DecimalString(context.Item.lastMonthsPayment) + " EUR")
        </CellTemplate>
      </PropertyColumn>
    </Columns>
    <PagerContent>
      <MudDataGridPager T="TabularData"/>
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {

  [CascadingParameter]
  public UserState user { get; set; } = default!;

  [CascadingParameter]
  public RepresentativeState representative { get; set; } = default!;

  private string? _searchString;
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset startOfLastMonth = DateTimeOffset.UtcNow.GetStartOfLastMonth();
  private DateTimeOffset now = DateTime.UtcNow;
  private List<TabularData> _dataStruct = new();
  private IEnumerable<INetworkUserCalculation>? _calculations;

  public record struct TabularData(LocationModel location, NetworkUserModel networkUser, IMeter meter, float thisMonthUsage = 0, float lastMonthUsage = 0, decimal lastMonthsPayment = 0m);

  @* MOBILE *@
  public string TextValue { get; set; } = "";

  private class ExpandThing
  {
    public TabularData data;
    public bool expand;
    public bool show;
  }

  List<ExpandThing> _shownOMMs = new();
  private List<NetworkUserModel>? _netUsers;

  protected override async Task OnInitializedAsync()
  {
    var queries = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();
    List<MeterTableViewModel> meters = new();

    _netUsers = await queries.GetNetworkUsersByRepresentative(representative.Representative);
    if (_netUsers is null || _netUsers.Count < 0)
      return;
    var _netUserIds = _netUsers.Select(x => x.Id).ToList();
    meters = await queries.ViewModelByNetworkUser(_netUserIds, startOfLastMonth, now);
    _calculations = await queries.GetCalculationByMeasurementLocation(
      meters.Select(x => x.MeasurementLocation).ToList(),
      startOfLastMonth,
      startOfThisMonth);
    var groupedCalcs = _calculations.GroupBy(x => x.NetworkUserMeasurementLocationId).ToList();
    foreach (var omm in meters)
    {
      var _thisMonthAggregate = omm.Aggregates.Where(x => x.Timestamp.Month == startOfThisMonth.Month).FirstOrDefault();
      var _lastMonthAggregate = omm.Aggregates.Where(x => x.Timestamp.Month == startOfLastMonth.Month).FirstOrDefault();
      var _lastMonthOmmCalcs = groupedCalcs
        .Where(x => x.Key == omm.MeasurementLocation.Id)
        .Where(x => x is not null)
        .Select(x => x.Select(y => y.Total_EUR))
        .FirstOrDefault();

      float _thisMonthUsage = 0;
      float _lastMonthUsage = 0;
      decimal _lastMonthTotal = 0;
      if (_thisMonthAggregate is not null)
        _thisMonthUsage = _thisMonthAggregate.ActiveEnergySpan_Wh.SpanDiff.TariffUnary.DuplexImport.PhaseSum;
      if (_lastMonthAggregate is not null)
        _lastMonthUsage = _lastMonthAggregate.ActiveEnergySpan_Wh.SpanDiff.TariffUnary.DuplexImport.PhaseSum;
      if (_lastMonthOmmCalcs is not null && _lastMonthOmmCalcs.Count() > 0)
        _lastMonthTotal = _lastMonthOmmCalcs
          .DefaultIfEmpty(0)
          .Sum();
      _dataStruct.Add(
        new TabularData
        {
          location = omm.Location,
          networkUser = omm.NetworkUser,
          meter = omm.Meter,
          thisMonthUsage = _thisMonthUsage,
          lastMonthUsage = _lastMonthUsage,
          lastMonthsPayment = _lastMonthTotal
        }
      );
    }


    foreach (var data in _dataStruct)
    {
      _shownOMMs.Add(new ExpandThing { data = data, show = true, expand = false });
    }
  }

  private Func<TabularData, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.networkUser.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private void InspectNetworkUser(string item)
  {
    NavigationManager.NavigateTo($"network-user/{item}");
  }

  private void InspectLocation(string item)
  {
    NavigationManager.NavigateTo($"location/{item}");
  }

  private void InspectMeter(string item)
  {
    NavigationManager.NavigateTo($"meter/{item}");
  }

  private void OnExpandCollapseClick(string id)
  {
    var a = _shownOMMs.Where(x => x.data.meter.Id == id).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Task Filter(string value)
  {
    TextValue = value;
    foreach (var inv in _shownOMMs)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownOMMs.Where(x => x.data.location.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

}
