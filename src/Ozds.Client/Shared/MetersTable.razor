@using Color = MudBlazor.Color
@using Ozds.Client.Base
@using Size = MudBlazor.Size
@using Ozds.Business.Time
@inject NavigationManager NavigationManager

@* MOBILE *@
<MudHidden Breakpoint="Breakpoint.MdAndUp">
  <MudText Typo="Typo.h4" Class="d-flex">
    @(T["Mjerna mjesta"])
  </MudText>
  <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži submreže" Variant="Variant.Text"></MudTextField>
  @foreach (var dataStruct in _shownOMMs.Where(x => x.show).ToList())
  {
    <MudPaper Elevation="2" Class="ma-1">
      <MudStack Spacing="0">
        <MudGrid Class="d-flex pa-2">
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
            @T["Mjerna mjesta"]: <br> @dataStruct.data.meter
          </MudItem>
          <MudItem xs="2" Class="d-flex align-center justify-end">
            <MudIconButton OnClick="() => InspectMeter(dataStruct.data.meter)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary"/>
          </MudItem>
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
            @T["Potrošnja u prethodnom mjesecu"]: <br>
            @DecimalString(dataStruct.data.lastMonthUsage / 1000, 0) kWh
          </MudItem>
          <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
            @T["Potrošnja u tekućem mjesecu"]: <br>
            @DecimalString(dataStruct.data.thisMonthUsage / 1000, 0) kWh
          </MudItem>
          @if (dataStruct.data.lastMonthsPayment is not null && true)
          {
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Zbroj obračuna u prethodnom mjesecu"]: <br>
              @(dataStruct.data.lastMonthsPayment == 0m ? T["Račun u izradi..."] : DecimalString(dataStruct.data.lastMonthsPayment) + " EUR")
            </MudItem>
          }
          <MudItem xs="2" Class="d-flex align-center justify-end">
            <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.data.meter)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="Color.Default"/>
          </MudItem>
        </MudGrid>

        <MudCollapse Class="py-2" Expanded="_shownOMMs.Where(x => x.data.meter == dataStruct.data.meter).First().expand">
          <MudStack>
            <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
            <MudContainer>
              @T["Lokacije"]: @(dataStruct.data.location)
            </MudContainer>
            <MudContainer>
              @T["Korisnk lokacije"]: @(dataStruct.data.networkUser)
            </MudContainer>
          </MudStack>
        </MudCollapse>
      </MudStack>
    </MudPaper>
  }
</MudHidden>


@* DESKTOP *@
<MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
    T="TabularData"
    MultiSelection="true"
    Items="@_dataStruct"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@_quickFilter">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@T["Mjerna mjesta"]</MudText>
      <MudSpacer/>
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@T["Pretraži"]"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>

      <TemplateColumn Title="@T["Lokacije"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectLocation(context.Item.location)" Variant="Variant.Outlined" Color="Color.Primary">
              @context.Item.location
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <TemplateColumn Title="@T["Korisnici mreže"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectNetworkUser(context.Item.networkUser)" Variant="Variant.Outlined" Color="Color.Primary">
              @context.Item.networkUser
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <TemplateColumn Title="@T["Mjerna mjesta"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectMeter(context.Item.meter)" Variant="Variant.Filled" Color="Color.Primary">
              @context.Item.meter
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>

      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthUsage"
        Title='@T["Potrošnja u prethodnom mjesecu"]'>
        <CellTemplate>
          @(DecimalString(context.Item.lastMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.thisMonthUsage"
        Title='@T["Potrošnja u tekućem mjesecu"]'>
        <CellTemplate>
          @(DecimalString(context.Item.thisMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      @if (true)
      {
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.lastMonthsPayment"
          Title='@T["Zbroj obračuna u prethodnom mjesecu"]'>
          <CellTemplate>
            @(context.Item.lastMonthsPayment == 0m ? T["Račun u izradi..."] : DecimalString(context.Item.lastMonthsPayment) + " EUR")
          </CellTemplate>
        </PropertyColumn>
      }
    </Columns>
    <PagerContent>
      <MudDataGridPager T="TabularData"/>
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
  [CascadingParameter] public UserState user { get; set; } = default!;
  [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
  private string? _searchString;
  private IReadOnlyList<SpanningMeasure<float>>? _spanningMeasurements;
  private IReadOnlyList<SpanningMeasure<float>>? _lastMonthSpanningMeasurements;
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset startOfLastMonth = DateTimeOffset.UtcNow.GetStartOfLastMonth();
  private DateTimeOffset now = DateTime.UtcNow;
  private List<TabularData> _partialDataStruct = new();
  private List<TabularData> _dataStruct = new();
  private IEnumerable<LocationModel>? _locations;
  private IEnumerable<NetworkUserModel>? _networkUsers;
  private IEnumerable<MeterModel>? _meters;
  private IEnumerable<NetworkUserInvoiceModel>? _invoices;
  private List<(string, decimal?)> _lastTotalPerOMM = new();
  private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _startEnd;
  private (decimal? First, decimal? Last, DateTimeOffset FirstDate) _lastMonthStartEnd = new(0, 0, DateTime.UtcNow);

  @* public record struct TabularData(LocationModel location, NetworkUserModel networkUser, MeterModel meter, decimal thisMonthUsage = 0m, decimal lastMonthUsage = 0m, decimal? lastMonthsPayment = null); *@
  public record struct TabularData(string location, string networkUser, string meter, decimal thisMonthUsage = 0m, decimal lastMonthUsage = 0m, decimal? lastMonthsPayment = null);


  protected override async Task OnInitializedAsync()
  {
    var aggregateQueries = ScopedServices.GetRequiredService<OzdsAggregateQueries>();
    var test = await aggregateQueries.ReadAgnostic(new string[] { "x => x.Interval == 2" }, startOfThisMonth, now, 1, 9000);
    var meters = test.OrderBy(x => x.Timestamp).GroupBy(x => x.MeterId).ToList();
    foreach(var meter in meters){
      var _thisMonthUsage = (decimal)meter.FirstOrDefault()!.ActiveEnergySpan_Wh.SpanDiff.TariffUnary.DuplexImport.PhaseSum * 1000;
      _dataStruct.Add(new(){location = "test",networkUser = "test", meter = meter.Key, thisMonthUsage = _thisMonthUsage, lastMonthUsage = 0m, lastMonthsPayment = 0m});
    }
    if (representative is null)
    {
      return;
    }
    else if (representative.Representative.Role is RoleModel.NetworkUserRepresentative)
    {
      // Find the location this user is tied to and add it to _locations
      // Add this user to _networkUsers
      // Find all _meters tied to this user
      // Find all _invoices tied to this user
    }
    else
    {
      // Find all _locations tied to this user
      // Find all _networkUsers tied to this user
      // Find all _meters tied to this user
    }

    if (_locations is not null && _networkUsers is not null && _meters is not null)
    {
      foreach (var location in _locations)
      {
        foreach (var networkUser in _networkUsers)
        {
          foreach (var meter in meters)
          {
            _partialDataStruct.Add(new TabularData("test", "test", meter.Key));
          }
        }
      }
    }

    if (_meters is not null)
    {
      foreach (var meter in _meters)
      {
        decimal _consumption = 0;
        decimal _lastMonthConsumption = 0;
        decimal? _lastMonthsPayment = null;
        @* var _partialData = _partialDataStruct.Where(x => x.meter == meter).FirstOrDefault(); *@
        // Get all _spanningMeasurements for _meters between the startOfLastMonth and startOfThisMonth, decending by timestamp
        // Calculate _consumption using _spanningMeasurements
        // Get all _lastMonthSpanningMeasure<float>ments for _meters between the startOfThisMonth and now, decending by timestamp
        // Calculate _lastMonthConsumption using _spanningMeasurements
        if (_invoices is not null)
        {
          // Calculate _lastMonthsPayment by adding up all payments that were done for this meter between the startOfLastMonth and startOfThisMonth
        }

        @* _dataStruct.Add(new TabularData(_partialData.location, _partialData.networkUser, _partialData.meter, _consumption, _lastMonthConsumption, _lastMonthsPayment)); *@
      }
    }

    foreach (var data in _dataStruct)
    {
      _shownOMMs.Add(new ExpandThing { data = data, show = true, expand = false });
    }
  }

  private Func<TabularData, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.networkUser.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private void InspectNetworkUser(string item)
  {
    NavigationManager.NavigateTo($"network-user/{item}");
  }

  private void InspectLocation(string item)
  {
    NavigationManager.NavigateTo($"location/{item}");
  }

  private void InspectMeter(string item)
  {
    NavigationManager.NavigateTo($"meter/{item}");
  }

  @* MOBILE *@
  public string TextValue { get; set; } = "";

  private class ExpandThing
  {
    public TabularData data;
    public bool expand;
    public bool show;
  }

  List<ExpandThing> _shownOMMs = new();

  private void OnExpandCollapseClick(string id)
  {
    var a = _shownOMMs.Where(x => x.data.meter == id).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Task Filter(string value)
  {
    TextValue = value;
    foreach (var inv in _shownOMMs)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownOMMs.Where(x => x.data.location.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

}
