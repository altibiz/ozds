@using Ozds.Business.Time
@using Ozds.Data.Entities.Enums
@if (_graphValues is not null)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudContainer Class="d-flex flex-column" MaxWidth="MaxWidth.Small">
      @if (_graphValues is not null)
      {
        <ApexChart TItem="ChartData"
                   XAxisType="XAxisType.Datetime"
                   Options="graphOptionsMob"
                   @ref="chart">
          <ApexPointSeries TItem="ChartData"
                           Items="@_graphValues"
                           Name="@T["Consumption"]"
                           SeriesType="SeriesType.Area"
                           XValue='x => DateTimeGraph(x.date)'
                           YValue="x => (decimal)x.value"/>
        </ApexChart>
      }
    </MudContainer>
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    @if (_graphValues is not null)
    {
      <ApexChart TItem="ChartData"
                 XAxisType="XAxisType.Datetime"
                 Options="graphOptions"
                 @ref="chart">
        <ApexPointSeries TItem="ChartData"
                         Items="@_graphValues"
                         Name="@T["Consumption"]"
                         SeriesType="SeriesType.Area"
                         XValue='x => DateTimeGraph(x.date)'
                         YValue="x => (decimal)x.value"/>
      </ApexChart>
    }
  </MudHidden>
}


@code {
  [CascadingParameter] public UserState user { get; set; } = default!;
  [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
  private ApexChartOptions<ChartData> graphOptions = new();
  private ApexChartOptions<ChartData> graphOptionsMob = new();
  public IEnumerable<ChartData> _graphValues = Enumerable.Empty<ChartData>();
  public List<ChartData> _totalConsumption = new();

  public record ChartData(float value, string name, DateTimeOffset date, string source);

  private ApexChart<ChartData> chart = default!;
  private readonly DateTimeOffset startOfThisYear = DateTimeOffset.UtcNow.GetStartOfYear();
  private readonly DateTimeOffset now = DateTime.UtcNow;
  private List<NetworkUserModel>? _netUsers;

  protected override async Task OnInitializedAsync()
  {
    var query = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();
    var measurementQueries = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();
    _netUsers = await query.GetNetworkUsersByRepresentative(representative.Representative);
    if (_netUsers is null || _netUsers.Count < 0)
      return;
    var _netUserIds = _netUsers.Select(x => x.Id).ToList();
    var meters = await measurementQueries.ViewModelByNetworkUser(_netUserIds, startOfThisYear, now, IntervalEntity.Day);
    foreach (var omm in meters)
    {
      var consumption = omm.Aggregates.OrderBy(x => x.Timestamp).Select(x => new ChartData(x.ActiveEnergySpan_Wh.SpanMax.TariffUnary.DuplexImport.PhaseSum / 1000, "Consumption", x.Timestamp, x.MeterId)).ToList();
      _totalConsumption.AddRange(consumption);
    }

    var aggregatedConsumption = _totalConsumption
      .GroupBy(x => x.date)
      .Select(group =>
      {
        var aggregatedValue = group.Select(g => g.value).DefaultIfEmpty(0).Sum();

        var firstItem = group.FirstOrDefault();

        if (firstItem is null)
        {
          return new ChartData(
            aggregatedValue,
            "none",
            group.Key,
            "none");
        }

        return new ChartData(
          aggregatedValue,
          firstItem.name,
          group.Key,
          firstItem.source);
      })
      .ToList();
    _totalConsumption.Clear(); // Clear existing items
    _totalConsumption.AddRange(aggregatedConsumption); // Add aggregated items
    var minValue = _totalConsumption.MinBy(consumption => consumption.value);
    if (minValue is not null)
      _graphValues = _totalConsumption.Select(x =>
      {
        return new ChartData(
          x.value - minValue.value,
          x.name,
          x.date,
          x.source);
      });


    graphOptionsMob = NewApexChartOptions<ChartData>();
    graphOptionsMob.Grid = new Grid
    {
      BorderColor = "#e7e7e7",
      Row = new GridRow
      {
        Colors = new List<string> { "#f3f3f3", "transparent" },
        Opacity = 0.5d
      }
    };
    graphOptions = NewApexChartOptions<ChartData>();
    graphOptions.Grid = new Grid
    {
      BorderColor = "#e7e7e7",
      Row = new GridRow
      {
        Colors = new List<string> { "#f3f3f3", "transparent" },
        Opacity = 0.5d
      }
    };
    graphOptions.Chart = new Chart
    {
      Toolbar = new Toolbar
      {
        Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
      }
    };
    graphOptions.Tooltip = new Tooltip { X = new TooltipX { Format = @"dd. MM. yyyy." } };
    graphOptionsMob.Tooltip = new Tooltip { X = new TooltipX { Format = @"dd. MM. yyyy." } };
    graphOptionsMob.Yaxis = new List<YAxis>();
    graphOptions.Yaxis = new List<YAxis>();
    graphOptionsMob.Xaxis = new XAxis();

    graphOptionsMob.Yaxis.Add(new YAxis
    {
      Show = false,
      Labels = new YAxisLabels
      {
        Formatter = "function(val, index) { return (val ?? 0).toFixed(0); }"
      }
    });
    graphOptions.Yaxis.Add(new YAxis
    {
      Labels = new YAxisLabels
      {
        Formatter = "function(val, index) { return (val ?? 0).toFixed(0); }"
      }
    });
    graphOptionsMob.Xaxis = new XAxis
    {
      Labels = new XAxisLabels
      {
        Format = @"dd. MM."
      }
    };
    graphOptionsMob.Chart = new Chart
    {
      Toolbar = new Toolbar
      {
        Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
      }
    };
    graphOptions.Xaxis = new XAxis
    {
      Labels = new XAxisLabels
      {
        Format = @"dd. MM."
      }
    };
    graphOptions.Chart = new Chart
    {
      Toolbar = new Toolbar
      {
        Tools = new Tools { Zoomin = false, Zoomout = false, Download = false, Pan = false, Selection = false }
      }
    };
  }

}
