@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@inject NavigationManager NavigationManager

@if (_shownInvoices is not null && _shownInvoices.Count() > 0)
{
  @* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.LgAndUp">
    <MudText Typo="Typo.h4" Class="d-flex">
      @T["Računi"]
    </MudText>
    <MudTextField Class="" ValueChanged="EventCallback.Factory.Create<string>(this, Filter)" Label="Pretraži" Variant="Variant.Text"></MudTextField>
    @foreach (var dataStruct in _shownInvoices.Where(x => x.show).ToList())
    {
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: medium;">
              @T["Broj Računa"]: @dataStruct.invoice.Id
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center  justify-end">
              <MudIconButton OnClick="() => InspectInvoice(dataStruct.invoice)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary"/>
            </MudItem>
            <MudItem xs="6" Class="d-flex align-center justify-start" Style="font-size: medium;">
              @T["Od"]: @(DateString(dataStruct.invoice.FromDate))
            </MudItem>
            <MudItem xs="6" Class="d-flex align-center justify-start" Style="font-size: medium;">
              @T["Do"]: @(DateString(dataStruct.invoice.ToDate))
            </MudItem>
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large; font-weight:bold;">
              @T["Iznos"]:@(DecimalString(dataStruct.invoice.TotalWithTax_EUR)) EUR
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => OnExpandCollapseClick(dataStruct.invoice.Id)" Icon="@(dataStruct.expand ? Icons.Material.Filled.KeyboardArrowUp : Icons.Material.Filled.KeyboardArrowDown)" Color="Color.Default"/>
            </MudItem>
          </MudGrid>

          <MudCollapse Class="py-2" Expanded="_shownInvoices.Where(x => x.invoice.Id == dataStruct.invoice.Id).First().expand">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer>
                @T["Korisnik (mreže)"]: @(dataStruct.invoice.ArchivedNetworkUser.LegalPerson.Name)
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
  </MudHidden>


  @* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.MdAndDown">
    <MudDataGrid
      T="NetworkUserInvoiceModel"
      MultiSelection="true"
      Items="@_invoices"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@T["Računi"]</MudText>
        <MudSpacer/>
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="Search"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns >
        <PropertyColumn
          CellStyle="font-size: large;"
          Property="x => x.ArchivedNetworkUser.LegalPerson.Name"
          Title='@T["Korisnik (mreže)"]' Sortable="false"/>
        <PropertyColumn
          CellStyle="font-size: x-large; text-align: end !important;"
          Property="x => x.TotalWithTax_EUR"
          Title='@T["Iznos"]'>
          <CellTemplate>
            @(DecimalString(context.Item.TotalWithTax_EUR) + " EUR")
          </CellTemplate>
        </PropertyColumn>
        <PropertyColumn
          CellStyle="font-size: large;"
          Property="x => DateString(x.FromDate)"
          Title='@T["Od"]'/>
        <PropertyColumn
          CellStyle="font-size: large;"
          Property="x => DateString(x.ToDate)"
          Title='@T["Do"]'/>
        <PropertyColumn
          CellStyle="font-size: large;"
          Property="x => x.Id"
          Sortable="false"
          Title='@T["Broj Računa"]'/>
        <TemplateColumn CellClass="d-flex justify-center" Sortable="false" Filterable="false">
          <CellTemplate>
            <MudStack Row>
              <MudButton OnClick="() => InspectInvoice(context.Item)" Variant="Variant.Filled" Color="Color.Primary">
                @T["Pregled"]
              </MudButton>
            </MudStack>
          </CellTemplate>
        </TemplateColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="NetworkUserInvoiceModel"/>
      </PagerContent>
    </MudDataGrid>
  </MudHidden>
}

@code {
  [CascadingParameter] public UserState user { get; set; } = default!;
  [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
  public string SearchString { get; set; } = "";

  private class MobileData
  {
    public NetworkUserInvoiceModel invoice = default!;
    public bool expand;
    public bool show;
  }

  List<MobileData> _shownInvoices = new();
  private string? _searchString;
  private List<NetworkUserInvoiceModel>? _invoices = new();

  protected override async Task OnInitializedAsync()
  {
    var invoiceQuery = ScopedServices.GetRequiredService<OzdsInvoiceQueries>();
    var query = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();
    _invoices = await query.GetNetworkUserInvoicesByRepresentative(representative.Representative, DateTimeOffset.MinValue, DateTimeOffset.MaxValue);

    if (_invoices is not null)
    {
      foreach (var invoice in _invoices)
      {
        _shownInvoices.Add(new MobileData { invoice = invoice, expand = false, show = true });
      }
    }
  }

  private void OnExpandCollapseClick(string invoiceId)
  {
    var a = _shownInvoices.Where(x => x.invoice.Id == invoiceId).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Func<NetworkUserInvoiceModel, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.NetworkUserId.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private void InspectInvoice(NetworkUserInvoiceModel item)
  {
    NavigationManager.NavigateTo($"network-user-invoice/{item.Id}");
  }

  private Task Filter(string value)
  {
    SearchString = value;
    foreach (var inv in _shownInvoices)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownInvoices.Where(x => x.invoice.NetworkUserId.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

}
