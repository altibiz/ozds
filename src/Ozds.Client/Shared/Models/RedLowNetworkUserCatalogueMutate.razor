@inject NavigationManager NavigationManager
@inherits OzdsOwningComponentBase

@if (LoadingState.Value is null)
{
  <MudProgressCircular/>
  return;
}

<MudText Typo="Typo.h5">Crveni Niski Katalog</MudText>
<MudPaper>
  <MudGrid>
    <MudItem xs="12" sm="6">
      <MudText Typo="Typo.body1">Id</MudText>
      <MudText Typo="Typo.body2">@LoadingState.Value.Id</MudText>
    </MudItem>
  </MudGrid>
</MudPaper>

@if (LoadingState.Value is null)
{
  return;
}

<EditForm
  Model="@LoadingState.Value"
  OnValidSubmit="Submit">
  <DataAnnotationsValidator/>
  <MudCard>
    <MudCardContent>
      <MudTextField
        Label="Naziv"
        @bind-Value="LoadingState.Value.Title"
        For="@(() => LoadingState.Value.Title)"/>
      <MudTextField
        Label="Cijena potrošnje aktivne energije u dnevnoj tarifi"
        @bind-Value="LoadingState.Value.ActiveEnergyTotalImportT1Price_EUR"
        For="@(() => LoadingState.Value.ActiveEnergyTotalImportT1Price_EUR)"/>
      <MudTextField
        Label="Cijena potrošnje aktivne energije u noćnoj tarifi"
        @bind-Value="LoadingState.Value.ActiveEnergyTotalImportT2Price_EUR"
        For="@(() => LoadingState.Value.ActiveEnergyTotalImportT2Price_EUR)"/>
      <MudTextField
        Label="Cijena aktivne snage u dnevnoj tarifi"
        @bind-Value="LoadingState.Value.ActivePowerTotalImportT1Price_EUR"
        For="@(() => LoadingState.Value.ActivePowerTotalImportT1Price_EUR)"/>
      <MudTextField
        Label="Cijena potrošnje reaktivne energije u jednoj tarifi"
        @bind-Value="LoadingState.Value.ReactiveEnergyTotalRampedT0Price_EUR"
        For="@(() => LoadingState.Value.ReactiveEnergyTotalRampedT0Price_EUR)"/>
      <MudTextField
        Label="Cijena naknade za brojilo"
        @bind-Value="LoadingState.Value.MeterFeePrice_EUR"
        For="@(() => LoadingState.Value.MeterFeePrice_EUR)"/>
    </MudCardContent>
    <ValidationSummary/>
    <MudCardActions>
      <MudButton
        ButtonType="ButtonType.Submit"
        Variant="Variant.Filled"
        Color="MudColor.Primary"
        Class="ml-auto">
        @if (_create)
        {
          <span>Create</span>
        }
        else
        {
          <span>Update</span>
        }
      </MudButton>
    </MudCardActions>
  </MudCard>
</EditForm>

@code {
  [Parameter] public string Id { get; set; } = default!;

  [Parameter] public RedLowNetworkUserCatalogueModel? Model { get; set; }

  private LoadingState<RedLowNetworkUserCatalogueModel> LoadingState { get; set; } = new();

  private bool _create;

  private void Submit()
  {
    var mutations = ScopedServices.GetRequiredService<OzdsAuditableMutations>();
    if (LoadingState.Value is null)
      return;
    if (_create)
    {
      mutations.Create(LoadingState.Value);
    }
    else
    {
      mutations.Update(LoadingState.Value);
    }
  }

  protected override void OnInitialized()
  {
    if (LoadingState.Value is not null)
    {
      LoadingState = LoadingState.WithValue(LoadingState.Value);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    if (LoadingState.Value is null && Id is not null)
    {
      LoadingState = LoadingState.WithValue(
        await ScopedServices
          .GetRequiredService<OzdsRedLowNetworkUserCatalogueModelQueries>()
          .BlueLowNetworkUserCatalogueById(Id));
    }

    if (LoadingState.Value is null)
    {
      LoadingState = LoadingState.WithValue(RedLowNetworkUserCatalogueModel.New());
      _create = true;
    }
  }

}
