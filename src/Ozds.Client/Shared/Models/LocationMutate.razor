@inject IDialogService DialogService
@inherits OzdsOwningComponentBase

@if (LoadingState.Value is null)
{
  <MudProgressCircular/>
  return;
}

<MudText Class="my-2" Typo="Typo.h4">@T["Location"]</MudText>
<EditForm
  Model="@LoadingState.Value"
  OnValidSubmit="Submit">
  <DataAnnotationsValidator/>
  <MudCard>
    <MudCardContent>
      <MudTextField
        Label="@T["Name"]"
        @bind-Value="LoadingState.Value.Title"
        For="@(() => LoadingState.Value.Title)"/>
      <MudTextField
        Label="@T["Person name"]"
        @bind-Value="LoadingState.Value.LegalPerson.Name"
        For="@(() => LoadingState.Value.LegalPerson.Name)"/>
      <MudTextField
        Label="@T["OIB"]"
        @bind-Value="LoadingState.Value.LegalPerson.SocialSecurityNumber"
        For="@(() => LoadingState.Value.LegalPerson.SocialSecurityNumber)"/>
      <MudTextField
        Label="@T["Address"]"
        @bind-Value="LoadingState.Value.LegalPerson.Address"
        For="@(() => LoadingState.Value.LegalPerson.Address)"/>
      <MudTextField
        Label="@T["Postal code"]"
        @bind-Value="LoadingState.Value.LegalPerson.PostalCode"
        For="@(() => LoadingState.Value.LegalPerson.PostalCode)"/>
      <MudTextField
        Label="@T["City"]"
        @bind-Value="LoadingState.Value.LegalPerson.City"
        For="@(() => LoadingState.Value.LegalPerson.City)"/>
      <MudTextField
        Label="@T["Email address"]"
        @bind-Value="LoadingState.Value.LegalPerson.Email"
        For="@(() => LoadingState.Value.LegalPerson.Email)"/>
      <MudTextField
        Label="@T["Phone number"]"
        @bind-Value="LoadingState.Value.LegalPerson.PhoneNumber"
        For="@(() => LoadingState.Value.LegalPerson.PhoneNumber)"/>
      <MudTextField
        Label="@T["AltiBiz subproject code"]"
        @bind-Value="LoadingState.Value.AltiBizSubProjectCode"
        For="@(() => LoadingState.Value.AltiBizSubProjectCode)"/>
      <MudSelect
        Label="@T["White Medium Network User Catalogues"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.WhiteMediumNetworkUserCatalogueId"
        For="@(() => LoadingState.Value.WhiteMediumNetworkUserCatalogueId)">
        @foreach (var catalog in _whiteMediumNetworkUserCatalogues)
        {
          <MudSelectItem Value="catalog.Id">
            @catalog.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        Label="@T["Blue Low Network User Catalogues"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.BlueLowNetworkUserCatalogueId"
        For="@(() => LoadingState.Value.BlueLowNetworkUserCatalogueId)">
        @foreach (var catalog in _blueLowNetworkUserCatalogues)
        {
          <MudSelectItem Value="catalog.Id">
            @catalog.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        Label="@T["White Low Network User Catalogues"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.WhiteLowNetworkUserCatalogueId"
        For="@(() => LoadingState.Value.WhiteLowNetworkUserCatalogueId)">
        @foreach (var catalog in _whiteLowNetworkUserCatalogues)
        {
          <MudSelectItem Value="catalog.Id">
            @catalog.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        Label="@T["Red Low Network User Catalogues"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.RedLowNetworkUserCatalogueId"
        For="@(() => LoadingState.Value.RedLowNetworkUserCatalogueId)">
        @foreach (var catalog in _redLowNetworkUserCatalogues)
        {
          <MudSelectItem Value="catalog.Id">
            @catalog.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        Label="@T["Regulatory Network User Catalogues"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.RegulatoryCatalogueId"
        For="@(() => LoadingState.Value.RegulatoryCatalogueId)">
        @foreach (var catalog in _regulatoryNetworkUserCatalogues)
        {
          <MudSelectItem Value="catalog.Id">
            @catalog.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        T="RepresentativeModel"
        Label="@T["Representatives"]"
        AnchorOrigin="Origin.BottomCenter"
        ToStringFunc="a => a?.PhysicalPerson.Name"
        MultiSelection="true"
        @bind-SelectedValues="_selectedRepsList">
        @foreach (var rep in _representatives)
        {
          <MudSelectItem Value="@rep">
            @rep.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudItem Class="py-5">
        <MudText Typo="Typo.subtitle2">@T["Allocated representatives"]</MudText>
        <MudText Typo="Typo.body2" Class="pl-4">@(string.Join(", ", _selectedRepsList.Select(x => $"\"{x.PhysicalPerson.Name}\"")))</MudText>
      </MudItem>
    </MudCardContent>
    <ValidationSummary/>
    <MudCardActions>
      <MudButton
        ButtonType="ButtonType.Submit"
        Variant="Variant.Filled"
        Color="MudColor.Primary"
        Class="ml-auto">
        @if (_create)
        {
          <span>Create</span>
        }
        else
        {
          <span>Update</span>
        }
      </MudButton>
      @if (!_create)
      {
        <MudButton
          ButtonType="ButtonType.Button"
          Variant="Variant.Filled"
          Color="MudColor.Error"
          OnClick="Delete">
          Delete
        </MudButton>
      }
    </MudCardActions>
  </MudCard>
</EditForm>

@code {

  [Parameter]
  public string Id { get; set; } = default!;

  [Parameter]
  public LocationModel? Model { get; set; }

  private LoadingState<LocationModel> LoadingState { get; set; } = new();
  private List<WhiteMediumNetworkUserCatalogueModel> _whiteMediumNetworkUserCatalogues = new();
  private List<BlueLowNetworkUserCatalogueModel> _blueLowNetworkUserCatalogues = new();
  private List<WhiteLowNetworkUserCatalogueModel> _whiteLowNetworkUserCatalogues = new();
  private List<RedLowNetworkUserCatalogueModel> _redLowNetworkUserCatalogues = new();
  private List<RegulatoryCatalogueModel> _regulatoryNetworkUserCatalogues = new();
  private List<RepresentativeModel> _representatives = new();
  private IEnumerable<RepresentativeModel> _selectedRepsList { get; set; } = new HashSet<RepresentativeModel>();

  private bool _create;

  private async Task Submit()
  {
    var mutations = ScopedServices.GetRequiredService<OzdsLocationMutations>();
    if (LoadingState.Value is null)
      return;
    if (_create)
    {
      mutations.CreateWithRepresentatives(LoadingState.Value, _selectedRepsList);
    }
    else
    {
      mutations.UpdateWithRepresentatives(LoadingState.Value, _selectedRepsList);
    }

    await mutations.SaveChangesAsync();
    DialogService.Show<MutateSuccess>("Changes Saved", new DialogOptions { CloseOnEscapeKey = true });
  }

  private async Task Delete()
  {
    if (LoadingState.Value is null)
    {
      return;
    }

    if (_create)
    {
      return;
    }

    var mutations = ScopedServices.GetRequiredService<OzdsLocationMutations>();
    mutations.Delete(LoadingState.Value);
    await mutations.SaveChangesAsync();
    DialogService.Show<MutateSuccess>("Changes Saved", new DialogOptions { CloseOnEscapeKey = true });
  }

  protected override void OnInitialized()
  {
    if (LoadingState.Value is not null)
    {
      LoadingState = LoadingState.WithValue(LoadingState.Value);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var queries = ScopedServices.GetRequiredService<OzdsLocationModelQueries>();
    _whiteMediumNetworkUserCatalogues = (await queries.GetWhiteMediumNetworkUserCatalogues("")).Items;
    _blueLowNetworkUserCatalogues = (await queries.GetBlueLowNetworkUserCatalogues("")).Items;
    _whiteLowNetworkUserCatalogues = (await queries.GetWhiteLowNetworkUserCatalogues("")).Items;
    _redLowNetworkUserCatalogues = (await queries.GetRedLowNetworkUserCatalogues("")).Items;
    _regulatoryNetworkUserCatalogues = (await queries.GetRegulatoryCatalogues("")).Items;
    _representatives = (await queries.GetEligibleRepresentatives("")).Items;

    if (LoadingState.Value is null && Id is not null)
    {
      var result = await queries.LocationWithRepresentativesById(Id);
      if (result != null)
      {
        var (location, representatives) = result;
        _selectedRepsList = representatives;
        _representatives = _representatives.Select(x => representatives.FirstOrDefault(y => x.Id == y.Id) is { } y ? y : x).ToList();
        LoadingState = LoadingState.WithValue(location);
      }
    }

    if (LoadingState.Value is null)
    {
      LoadingState = LoadingState.WithValue(LocationModel.New());
      _create = true;
    }
  }

}
