@inject IDialogService DialogService
@inherits OzdsOwningComponentBase

@if (LoadingState.Value is null)
{
  <MudProgressCircular/>
  return;
}

<MudText Class="my-2" Typo="Typo.h4">@T["Schneider iEM3xxx Device"]</MudText>
<EditForm
  Model="@LoadingState.Value"
  OnValidSubmit="Submit">
  <DataAnnotationsValidator/>
  <MudCard>
    <MudCardContent>
      <MudTextField
        Label="Id"
        @bind-Value="LoadingState.Value.Id"
        For="@(() => LoadingState.Value.Id)"/>
      <MudTextField
        Label="@T["Name"]"
        @bind-Value="LoadingState.Value.Title"
        For="@(() => LoadingState.Value.Title)"/>
      <MudTextField
        Label="@T["Connected power"]"
        @bind-Value="LoadingState.Value.ConnectionPower_W"
        For="@(() => LoadingState.Value.ConnectionPower_W)"/>
      <MudSelect
        Label="@T["Messenger"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.MessengerId"
        For="@(() => LoadingState.Value.MessengerId)">
        @foreach (var messenger in _messengers)
        {
          <MudSelectItem Value="messenger.Id">
            @messenger.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        Label="@T["Validator"]"
        AnchorOrigin="Origin.BottomCenter"
        @bind-Value="LoadingState.Value.MeasurementValidatorId"
        For="@(() => LoadingState.Value.MeasurementValidatorId)">
        @foreach (var validator in _validators)
        {
          <MudSelectItem Value="validator.Id">
            @validator.Title
          </MudSelectItem>
        }
      </MudSelect>
      <MudSelect
        T="PhaseModel"
        Label="@T["Phase"]"
        AnchorOrigin="Origin.BottomCenter"
        SelectedValuesChanged="@(e => LoadingState.Value.Phases = e.ToHashSet())"
        MultiSelection="true">
        <MudSelectItem Value="PhaseModel.L1">
          L1
        </MudSelectItem>
        <MudSelectItem Value="PhaseModel.L2">
          L2
        </MudSelectItem>
        <MudSelectItem Value="PhaseModel.L3">
          L3
        </MudSelectItem>
      </MudSelect>
    </MudCardContent>
    <ValidationSummary/>
    <MudCardActions>
      <MudButton
        ButtonType="ButtonType.Submit"
        Variant="Variant.Filled"
        Color="MudColor.Primary"
        Class="ml-auto">
        @if (_create)
        {
          <span>@T["Create"]</span>
        }
        else
        {
          <span>@T["Update"]</span>
        }
      </MudButton>
    </MudCardActions>
  </MudCard>
</EditForm>

@code {

  [Parameter]
  public string Id { get; set; } = default!;

  [Parameter]
  public SchneideriEM3xxxMeterModel? Model { get; set; }

  private LoadingState<SchneideriEM3xxxMeterModel> LoadingState { get; set; } = new();
  private List<MessengerModel> _messengers = new();
  private List<SchneideriEM3xxxMeasurementValidatorModel> _validators = new();

  private bool _create;

  private async Task Submit()
  {
    var mutations = ScopedServices.GetRequiredService<OzdsAuditableMutations>();
    if (LoadingState.Value is null)
      return;
    if (_create)
    {
      mutations.Create(LoadingState.Value);
    }
    else
    {
      mutations.Update(LoadingState.Value);
    }

    await mutations.SaveChangesAsync();
    DialogService.Show<MutateSuccess>("Changes Saved", new DialogOptions { CloseOnEscapeKey = true });
  }

  protected override void OnInitialized()
  {
    if (LoadingState.Value is not null)
    {
      LoadingState = LoadingState.WithValue(LoadingState.Value);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    var queries = ScopedServices.GetRequiredService<OzdsSchneideriEM3xxxMeterModelQueries>();
    _messengers = (await queries.GetMessengers("")).Items;
    _validators = (await queries.GetValidators("")).Items;

    if (LoadingState.Value is null && Id is not null)
    {
      LoadingState = LoadingState.WithValue(await queries.SchneideriEM3xxxMeterById(Id));
    }

    if (LoadingState.Value is null)
    {
      LoadingState = LoadingState.WithValue(SchneideriEM3xxxMeterModelActivator.New());
      _create = true;
    }
  }

}
