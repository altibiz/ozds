@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using Ozds.Business.Time
@inject NavigationManager NavigationManager;

@* MOBILE *@
<MudHidden Breakpoint="Breakpoint.MdAndUp">
  <MudItem Class="mb-5">
    <MudText Typo="Typo.h4" Class="d-flex">
      @(T["Lokacije"])
    </MudText>
    @foreach (var dataStruct in _shownLocations.Where(x => x.show).ToList())
    {
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
              @T["Lokacija"]: @dataStruct.data.location.Title
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton OnClick="() => InspectLocation(dataStruct.data.location)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="Color.Primary"/>
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja u tekućem mjesecu"]: @(FloatString(dataStruct.data.thisMonthUsage / 1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Potrošnja u prethodnom mjesecu"]: @(FloatString(dataStruct.data.lastMonthUsage / 1000, 0) + " kWh")
            </MudItem>
            <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
              @T["Zbroj računa prethodnog mjeseca"]: @(dataStruct.data.lastMonthsPayment == 0 ? T["Račun u izradi..."] : FloatString(dataStruct.data.lastMonthsPayment) + " EUR")
            </MudItem>
          </MudGrid>
        </MudStack>
      </MudPaper>
    }
  </MudItem>
</MudHidden>

@* DESKTOP *@
<MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
    T="TabularData"
    MultiSelection="true"
    Items="@_dataStruct"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@_quickFilter"
    Class="mb-6">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@T["Lokacije"]</MudText>
      <MudSpacer/>
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@T["Ukupna pretraži tekućeg mjeseca"]"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>
      <TemplateColumn Title="@T["Lokacije"]" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton OnClick="() => InspectLocation(context.Item.location)" Variant="Variant.Outlined" Color="Color.Primary">
              @context.Item.location.Title
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.thisMonthUsage"
        Title='@T["Potrošnja u tekućem mjesecu"]'>
        <CellTemplate>
          @(FloatString(context.Item.thisMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthUsage"
        Title='@T["Potrošnja u prethodnom mjesecu"]'>
        <CellTemplate>
          @(FloatString(context.Item.lastMonthUsage / 1000, 0) + " kWh")
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.lastMonthsPayment"
        Title='@T["Zbroj računa prethodnog mjeseca"]'>
        <CellTemplate>
          @(context.Item.lastMonthsPayment == 0 ? T["Račun u izradi..."] : FloatString(context.Item.lastMonthsPayment) + " EUR")
        </CellTemplate>
      </PropertyColumn>
    </Columns>
    <PagerContent>
      <MudDataGridPager T="TabularData"/>
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
  [CascadingParameter] public UserState user { get; set; } = default!;
  [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
  private (float? First, float? Last, DateTimeOffset FirstDate) _startEnd;
  private (float? First, float? Last, DateTimeOffset FirstDate) _startEndLastMonth;
  private string? _searchString;
  private IEnumerable<MeterModel>? _meters;
  private IEnumerable<LocationModel>? _locations;
  private IEnumerable<NetworkUserModel>? _networdUser;
  private IEnumerable<NetworkUserInvoiceModel>? _invoices;
  private float? _consumption = 0;
  private float? _lastMonthConsumption = 0;

  public record struct TabularData(LocationModel location, float thisMonthUsage, float lastMonthUsage, float lastMonthsPayment);

  private List<TabularData> _dataStruct = new();
  private IReadOnlyList<SpanningMeasure<float>>? _spanningMeasurements;
  private DateTimeOffset startOfThisMonth = DateTimeOffset.UtcNow.GetStartOfMonth();
  private DateTimeOffset startOfLastMonth = DateTimeOffset.UtcNow.GetStartOfLastMonth();
  private DateTimeOffset now = DateTimeOffset.UtcNow;
  private List<NetworkUserModel>? _netUsers;

  protected override async Task OnInitializedAsync()
  {
    var queries = ScopedServices.GetRequiredService<OzdsMeterTableQueries>();
    List<MeterTableViewModel> locations = new();

    if (representative is null)
    {
      return;
    }

    @* if (representative.Representative.Role is RoleModel.NetworkUserRepresentative) *@
    if (true)
    {
      _netUsers = await queries.GetNetworkUsersByRepresentative(representative.Representative);
      var _netUserIds = _netUsers.Select(x => x.Id).ToList();
      locations = await queries.ViewModelByNetworkUser(_netUserIds, startOfLastMonth, now);
      var groupedLocations = locations.GroupBy(x => x.Location.Id).ToList();
      foreach (var netUser in groupedLocations)
      {
        // !!! Remove .Month and .LocalDateTime in live
        var _thisMonthAggregate = netUser.Select(x => x.Aggregates.Where(x => x.Timestamp == startOfThisMonth).FirstOrDefault()).Where(x => x is not null).ToList();
        var _lastMonthAggregate = netUser.Select(x => x.Aggregates.Where(x => x.Timestamp == startOfLastMonth).FirstOrDefault()).Where(x => x is not null).ToList();
        float _thisMonthUsage = 0;
        float _lastMonthUsage = 0;
        if (_thisMonthAggregate is not null && _thisMonthAggregate.Count > 0)
          _thisMonthUsage = _thisMonthAggregate
            .Select(x => x.ActiveEnergySpan_Wh.SpanDiff.TariffUnary.DuplexImport.PhaseSum)
            .DefaultIfEmpty(0)
            .Sum();
        if (_lastMonthAggregate is not null && _lastMonthAggregate.Count > 0)
          _lastMonthUsage = _lastMonthAggregate
            .Select(x => x.ActiveEnergySpan_Wh.SpanDiff.TariffUnary.DuplexImport.PhaseSum)
            .DefaultIfEmpty(0)
            .Sum();
        _dataStruct.Add(
          new TabularData
          {
            location = netUser.FirstOrDefault().Location,
            thisMonthUsage = _thisMonthUsage,
            lastMonthUsage = _lastMonthUsage,
            lastMonthsPayment = 0 // !!! Add another query
          }
        );
      }
    }

    foreach (var data in _dataStruct)
    {
      _shownLocations.Add(new ExpandThing { data = data, show = true, expand = false });
    }
  }

  private Func<TabularData, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.location.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private void InspectLocation(LocationModel item)
  {
    NavigationManager.NavigateTo($"location/{item.Id}");
  }


  @* MOBILE *@
  public string TextValue { get; set; } = "";

  private class ExpandThing
  {
    public TabularData data = default!;
    public bool expand;
    public bool show;
  }

  List<ExpandThing> _shownLocations = new();

  private void OnExpandCollapseClick(string id)
  {
    var a = _shownLocations.Where(x => x.data.location.Id == id).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Task Filter(string value)
  {
    TextValue = value;
    foreach (var inv in _shownLocations)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownLocations.Where(x => x.data.location.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

}
