@inject NavigationManager NavigationManager;


@* MOBILE *@
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
      <MudText Typo="Typo.h4" Class="d-flex">
        @(T["Vlasnici"])
      </MudText>
      @foreach(ExpandThing dataStruct in _shownSubnets.Where(x => x.show == true).ToList()){
        <MudPaper Elevation="2" Class="ma-1">
          <MudStack Spacing="0">
            <MudGrid Class="d-flex pa-2">
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
                @T["Lokacija"]: @dataStruct.data.Representative.Name
              </MudItem>
              <MudItem xs="2" Class="d-flex align-center justify-end">
                <MudIconButton OnClick="() => InspectLocation(dataStruct.data)" Icon="@Icons.Material.Filled.RemoveRedEye" Color="MudBlazor.Color.Primary"/>
              </MudItem>
              <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large;">
                @T["Vlasnik Lokacije"]: @(dataStruct.data.Representative.Name)
              </MudItem>
            </MudGrid>
          </MudStack>
        </MudPaper>
      }
  </MudHidden>

@* DESKTOP *@
  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
    T="RepresentativeState"
    MultiSelection="true"
    Items="@_locationReps"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@_quickFilter">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@T["Vlasnici"]</MudText>
      <MudSpacer />
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@T["PretraÅ¾i"]"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="MudBlazor.Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>
      <TemplateColumn Name="@T["Lokacije"]" Sortable="false">
          <CellTemplate>
              <MudStack Row>
                <MudButton OnClick="() => InspectLocation(context.Item)" Variant="Variant.Outlined" Color="MudBlazor.Color.Primary">
                  @context.Item.Representative.Name
                </MudButton>
              </MudStack>
          </CellTemplate>
      </TemplateColumn>
      <PropertyColumn
        Property="x => x.Representative.Name"
        Name='@T["Vlasnik Lokacije"]' Sortable="false"

        />
    </Columns>
    <PagerContent>
      <MudDataGridPager T="RepresentativeState" />
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
    [CascadingParameter] public UserState user { get; set; } = default!;
    [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
    private string? _searchString;
    private IEnumerable<RepresentativeState>? _locationReps;
    protected override async Task OnInitializedAsync()
    {
    }

  private Func<RepresentativeState, bool> _quickFilter => x =>
  {
    if (string.IsNullOrWhiteSpace(_searchString))
      return true;

    if (x.Representative.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
      return true;

    return false;
  };

  private void InspectLocation(RepresentativeState item) {
      NavigationManager.NavigateTo($"location/{item.Representative.Id}");
  }

  @* MOBILE *@
  public string TextValue { get; set; } = "";
  private class ExpandThing {
    public RepresentativeState data = default!;
    public bool expand;
    public bool show;
  }
  List<ExpandThing> _shownSubnets = new();
  private void OnExpandCollapseClick(string id) {
    var a = _shownSubnets.Where(x => x.data.Representative.Id == id).FirstOrDefault();
    if (a != null)
    {
        a.expand = !a.expand;
    }
  }
  private Task Filter(string value) {
    TextValue = value;
    foreach (var inv in _shownSubnets)
    {
      if(value.Trim() != ""){
        inv.show = false;
      }
    };
    var a = _shownSubnets.Where(x => x.data.Representative.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
        inv.show = true;
    };
    StateHasChanged();
    return Task.CompletedTask;
  }
}
