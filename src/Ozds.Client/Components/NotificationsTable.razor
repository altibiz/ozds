@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@inherits OzdsOwningComponentBase

<MudCheckBox
  T="bool"
  Label="@Translate("Seen")"
  Checked="@_seen"
  CheckedChanged="@(() => _seen = !_seen)"/>

@if (_shownNotifications is not null && _shownNotifications.Count() > 0)
{
  <MudHidden Breakpoint="Breakpoint.MdAndUp">
    <MudItem Class="mb-5">
      <MudText Typo="Typo.h4" Class="d-flex">
        @(Translate("Notifications"))
      </MudText>
      @foreach (var notification in _shownNotifications.Where(x => x.show).ToList())
      {
        <MudPaper Elevation="2" Class="ma-1">
          <MudStack Spacing="0">
            <MudGrid Class="d-flex pa-2">
              <MudItem xs="10" Class="d-flex align-center justify-start" Style="font-size: large;">
                <MudText Typo="Typo.h6">
                  @notification.data.Title
                </MudText>
              </MudItem>
              <MudItem xs="2" Class="d-flex align-center justify-end">
                <MudIconButton
                  OnClick="() => InspectNotification(notification.data.Id)"
                  Icon="@Icons.Material.Filled.RemoveRedEye"
                  Color="Color.Primary"/>
              </MudItem>
              <MudItem xs="8" Class="d-flex flex-column align-start justify-center">
                <MudText Typo="Typo.body2">
                  @notification.data.Summary
                </MudText>
              </MudItem>
              <MudItem xs="4" Class="d-flex flex-row align-center justify-end">
                <MudText Typo="Typo.body2">
                  @DateTimeString(notification.data.Timestamp)
                </MudText>
              </MudItem>
            </MudGrid>
          </MudStack>
        </MudPaper>
      }
    </MudItem>
  </MudHidden>

  <MudHidden Breakpoint="Breakpoint.SmAndDown">
    <MudDataGrid
      T="INotification"
      Class="my-6"
      MultiSelection="true"
      Items="@_notifications"
      SortMode="SortMode.Multiple"
      Filterable="true"
      QuickFilter="@_quickFilter">
      <ToolBarContent>
        <MudText Typo="Typo.h4">@Translate("Notifications")</MudText>
        <MudSpacer/>
        <MudTextField
          @bind-Value="_searchString"
          Placeholder="Search"
          Adornment="Adornment.Start"
          Immediate="true"
          AdornmentIcon="@Icons.Material.Filled.Search"
          IconSize="Size.Medium"
          Class="mt-0">
        </MudTextField>
      </ToolBarContent>
      <Columns >
        <PropertyColumn
          CellStyle="text-align: start !important;"
          Property="x => x.Title"
          Title='@Translate("Title")' Sortable="false"/>
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.Timestamp"
          Title='@Translate("Date")'>
          <CellTemplate>
            @(context.Item.Timestamp.ToString("HH:mm dd.MM.yyyy."))
          </CellTemplate>
        </PropertyColumn>
        <TemplateColumn
          CellClass="d-flex justify-end"
          Sortable="false"
          Filterable="false">
          <CellTemplate>
            <MudStack Row>
              <MudButton
                OnClick="() => InspectNotification(context.Item.Id)"
                Variant="Variant.Filled"
                Color="Color.Primary">
                @Translate("Overview")
              </MudButton>
            </MudStack>
          </CellTemplate>
        </TemplateColumn>
      </Columns>
      <PagerContent>
        <MudDataGridPager T="INotification"/>
      </PagerContent>
    </MudDataGrid>
  </MudHidden>
}

@code {

  [CascadingParameter]
  public UserState user { get; set; } = default!;

  [CascadingParameter]
  public RepresentativeState representative { get; set; } = default!;

  private bool _seen { get; set; } = false;

  public string SearchString { get; set; } = "";
  private List<INotification> _notifications = new();

  private class MobileData
  {
    public INotification data = default!;
    public bool expand;
    public bool show;
  }

  List<MobileData> _shownNotifications = new();
  private string? _searchString;

  protected override async Task OnParametersSetAsync()
  {
    _shownNotifications.Clear();

    _notifications = _seen
      ? (await ScopedServices
        .GetRequiredService<OzdsNotificationQueries>()
        .ReadForRecipient<NotificationModel>(representative.Representative, _seen))
      .Items
      .OfType<INotification>()
      .ToList()
      : representative.Notifications.OfType<INotification>().ToList();
    if (_notifications is not null)
    {
      foreach (var notification in _notifications)
      {
        _shownNotifications.Add(new MobileData { data = notification, expand = false, show = true });
      }
    }
  }

  private void OnExpandCollapseClick(string notificationId)
  {
    var a = _shownNotifications.Where(x => x.data.Id == notificationId).FirstOrDefault();
    if (a != null)
    {
      a.expand = !a.expand;
    }
  }

  private Func<INotification, bool> _quickFilter
  {
    get
    {
      return x =>
      {
        if (string.IsNullOrWhiteSpace(_searchString))
          return true;

        if (x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
          return true;

        return false;
      };
    }
  }

  private Task Filter(string value)
  {
    SearchString = value;
    foreach (var inv in _shownNotifications)
    {
      if (value.Trim() != "")
      {
        inv.show = false;
      }
    }

    ;
    var a = _shownNotifications.Where(x => x.data.Title.Contains(value, StringComparison.InvariantCultureIgnoreCase)).ToList();
    foreach (var inv in a)
    {
      inv.show = true;
    }

    ;
    StateHasChanged();
    return Task.CompletedTask;
  }

  private void InspectNotification(string id)
  {
    NavigationManager.NavigateTo($"notification/{id}");
  }

}
