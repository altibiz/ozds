@namespace Ozds.Client.Components.Fields

@* TODO: null handling *@
@using System.Collections
@using System.Linq.Expressions
@using MudBlazor
@typeparam T

<MudSelect
  T="T"
  Label="@Title"
  SelectedValues="@Value"
  SelectedValuesChanged="@ValueChanged"
  MultiSelection
  For="For">
  @foreach (var item in Values)
  {
    var value = (T)item;
    <MudSelectItem Value="@value">
      @if (Label is { } label)
      {
        @label(value)
      }
      else
      {
        @value.ToString()
      }
    </MudSelectItem>
  }
</MudSelect>

@code {

  [Parameter]
  public IEnumerable<T> Value { get; set; } = default!;

  [Parameter]
  public EventCallback<IEnumerable<T>> ValueChanged { get; set; } = default!;

  [Parameter]
  public string Title { get; set; } = default!;

  [Parameter]
  public Func<T, string>? Label { get; set; } = default!;

  [Parameter]
  public Expression<Func<T>> For { get; set; } = default!;

  [Parameter]
  public IEnumerable Values { get; set; } = Enum.GetValues(typeof(T));

}
