@using MudBlazor
@using System.Linq.Expressions

@namespace Ozds.Client.Components.Fields

@* TODO: null handling *@

@typeparam T

<MudSelect
  T="T"
  Label="@Title"
  SelectedValues="Value"
  SelectedValuesChanged="@(async e => {
    Console.WriteLine(string.Join(",", e));
    await ValueChanged.InvokeAsync(e.ToHashSet());
  })"
  MultiSelection
  For="For">
  @foreach (var value in Enum.GetValues(typeof(T)))
  {
    <MudSelectItem Value="@((T)value)">
      @if (Label is { } label)
      {
        @label((T)value)
      }
      else
      {
        @value.ToString()
      }
    </MudSelectItem>
  }
</MudSelect>

@code {
  [Parameter]
  public HashSet<T> Value { get; set; } = default!;

  [Parameter]
  public EventCallback<HashSet<T>> ValueChanged { get; set; } = default!;

  [Parameter]
  public string Title { get; set; } = default!;

  [Parameter]
  public Func<T, string>? Label { get; set; } = default!;

  [Parameter]
  public Expression<Func<T>> For { get; set; } = default!;
}
