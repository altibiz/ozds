@using Ozds.Business.Time
@using Ozds.Business.Analysis
@using Ozds.Client.Components.Streaming
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

@{
  var analyses = RepresentativeState.AnalysisBases.AnalysesByLocation();
}

<MudHidden Breakpoint="Breakpoint.MdAndUp">
  <MudItem Class="mb-5">
    <MudText Typo="Typo.h4" Class="d-flex">
      @(Translate("Locations"))
    </MudText>
    @foreach (var analysis in analyses)
    {
      <MudPaper Elevation="2" Class="ma-1">
        <MudStack Spacing="0">
          <MudGrid Class="d-flex pa-2">
            <MudItem xs="8" Class="d-flex align-center justify-start" Style="font-size: large;">
              @Translate("Location"): @(analysis.Location.Title)
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton
                OnClick="@(() => NavigationManager.NavigateTo($"location/{analysis.Location.Id}"))"
                Icon="@Icons.Material.Filled.RemoveRedEye"
                Color="Color.Primary"/>
            </MudItem>
            <MudItem xs="2" Class="d-flex align-center justify-end">
              <MudIconButton Icon="@(Icons.Material.Filled.KeyboardArrowUp)" Color="Color.Default"/>
            </MudItem>
          </MudGrid>

          <MudCollapse Class="py-2" Expanded="true">
            <MudStack>
              <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
              <MudContainer Class="d-flex flex-column">
                <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                  @Translate("Current months consumption"):
                  @NumericString(analysis.Analysis.LastMonthConsumption.ActiveEnergy_kWh, 0) kWh
                </MudItem>
                <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                  @Translate("Last months consumption"):
                  @NumericString(analysis.Analysis.ThisMonthConsumption.ActiveEnergy_kWh, 0) kWh
                </MudItem>
                @if (RepresentativeState.Representative.Role is RoleModel.LocationRepresentative)
                {
                  <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                    @Translate("Active power"):
                    @NumericString(analysis.Analysis.Load.ActivePower_kW) kW
                  </MudItem>
                }
                else
                {
                  <MudItem xs="12" Class="d-flex align-center justify-start" Style="font-size: large; font-weight: bold;">
                    @Translate("Last months invoice total"):
                    @(analysis.Analysis.LastMonthExpenses.Total_EUR == 0
                      ? Translate("Invoice pending...")
                      : NumericString(analysis.Analysis.LastMonthExpenses.Total_EUR) + " EUR")
                  </MudItem>
                }
              </MudContainer>
            </MudStack>
          </MudCollapse>
        </MudStack>
      </MudPaper>
    }
  </MudItem>
</MudHidden>

<MudHidden Breakpoint="Breakpoint.SmAndDown">
  <MudDataGrid
    T="LocationAnalysis"
    MultiSelection="true"
    Items="@analyses"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@(x =>
      string.IsNullOrWhiteSpace(_searchString)
      || x.Location.Title.Contains(_searchString))"
    Class="mb-6">
    <ToolBarContent>
      <MudText Typo="Typo.h4">@Translate("Locations")</MudText>
      <MudSpacer/>
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@Translate("Search")"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>
      <TemplateColumn Title="@Translate("Location")" Sortable="false">
        <CellTemplate>
          <MudStack Row>
            <MudButton
                OnClick="@(() => NavigationManager.NavigateTo($"location/{context.Item.Location.Id}"))"
                Variant="Variant.Outlined"
                Color="Color.Primary">
              @context.Item.Location.Title
            </MudButton>
          </MudStack>
        </CellTemplate>
      </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.Analysis.ThisMonthConsumption.ActiveEnergy_kWh"
        Title='@Translate("Current months consumption")'>
        <CellTemplate>
          @(NumericString(context.Item.Analysis.ThisMonthConsumption.ActiveEnergy_kWh, 0)) kWh
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: x-large;"
        Property="x => x.Analysis.LastMonthConsumption.ActiveEnergy_kWh"
        Title='@Translate("Last months consumption")'>
        <CellTemplate>
          @(NumericString(context.Item.Analysis.LastMonthConsumption.ActiveEnergy_kWh, 0)) kWh
        </CellTemplate>
      </PropertyColumn>
      @if (RepresentativeState.Representative.Role is RoleModel.LocationRepresentative)
      {
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.Analysis.Load.ActivePower_kW"
          Title='@Translate("Active power")'>
          <CellTemplate>
            @NumericString(context.Item.Analysis.Load.ActivePower_kW) kW
          </CellTemplate>
        </PropertyColumn>
      }
      else
      {
        <PropertyColumn
          CellStyle="font-size: x-large;"
          Property="x => x.Analysis.LastMonthExpenses.Total_EUR"
          Title='@Translate("Last months invoice total")'>
          <CellTemplate>
            @(context.Item.Analysis.LastMonthExpenses.Total_EUR == 0
              ? Translate("Invoice pending...")
              : NumericString(context.Item.Analysis.LastMonthExpenses.Total_EUR) + " EUR")
          </CellTemplate>
        </PropertyColumn>
      }
    </Columns>
    <PagerContent>
      <MudDataGridPager T="LocationAnalysis"/>
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  private string? _searchString;
}
