@* @inject IAntiforgery Antiforgery
@inject IHttpContextAccessor HttpContextAccessor
@inject INotificationCreatedSubscriber NotificationCreatedSubscriber
@inherits OzdsOwningLayoutComponentBase
@using System.Globalization
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Http
@using Ozds.Business.Observers.Abstractions
@using Ozds.Business.Observers.EventArgs
@implements IDisposable

<MudLayout>
  <MudAppBar Elevation="4">
    <MudHidden Breakpoint="Breakpoint.MdAndUp">
      <MudIconButton
        Icon="@Icons.Material.Outlined.Menu"
        Color="MudColor.Inherit"
        Edge="Edge.Start"
        OnClick="e => DrawerToggle()"/>
    </MudHidden>
    <MudHidden Breakpoint="Breakpoint.Xs">
      <MudImage @onclick="GoHome" Src="/logo.svg" Alt="HELB" Style="height: 50%;padding-left: 20px;"/>
    </MudHidden>
    <MudSpacer/>
    <MudMenu AnchorOrigin="Origin.CenterLeft" Dense="true" Class="mt-1 ml-4">
      <ActivatorContent>
        <MudButton Variant="Variant.Outlined" Class="mx-2" Style="color: white; border-color: white;">
          @CultureInfo.CurrentCulture.TwoLetterISOLanguageName.ToUpper()
        </MudButton>
      </ActivatorContent>
      <ChildContent>
        <MudListItem Text="HR" Href="@(ChangeLang("hr-HR"))" ForceLoad="true"/>
        <MudListItem Text="EN" Href="@(ChangeLang("en-US"))" ForceLoad="true"/>
      </ChildContent>
    </MudMenu>
    <MudMenu AnchorOrigin="Origin.BottomLeft" Dense="true" Class="mt-1 ml-4">
      <ActivatorContent>
        <MudItem Class="mx-2">
          @UserState?.RepresentingUser.User.UserName
        </MudItem>
        <MudIcon Icon="@Icons.Material.Filled.Person"/>
      </ActivatorContent>
      <ChildContent>
        <MudListItem Text="Account" Icon="@Icons.Material.Outlined.Person" Href="account" ForceLoad="true"/>
        <MudListItem Text="Logout" Icon="@Icons.Material.Outlined.Login" ForceLoad="true">
          <form method="post" action="/Users/LogOff?returnUrl=/login">
            <input type="hidden" name="__RequestVerificationToken" value="@antiforgeryToken"/>
            <button class="btn" type="submit">Logout</button>
          </form>
        </MudListItem>
      </ChildContent>
    </MudMenu>
    @if (RepresentativeState?.Representative is { } representative)
    {
      @if (_userLayoutState.Notifications.Count > 0)
      {
        <MudMenu AnchorOrigin="Origin.CenterLeft" Dense="true" Class="mt-1 ml-4">
          <ActivatorContent>
            <MudIcon Icon="@Icons.Material.Filled.NotificationsActive"/>
            <MudItem Style="display: flex; position: absolute; top: 12px; left: 14px;">
              <MudIcon Icon="@Icons.Material.Filled.Circle" Style="font-size: 17px; color: #f44336; position: absolute;"/>
              <MudText Style="font-size: 10px; position: absolute; left: 6px;">@_userLayoutState.Notifications.Count()</MudText>
            </MudItem>
          </ActivatorContent>
          <ChildContent>
            @foreach (var notification in _userLayoutState.Notifications)
            {
              <MudListItem
                Text="@notification.Title"
                Href="@($"notification/{notification.Id}")"
                ForceLoad="true"/>
              <hr/>
            }
          </ChildContent>
        </MudMenu>
      }
      else
      {
        <MudIcon Icon="@Icons.Material.Filled.Notifications"/>
      }
    }
  </MudAppBar>
  <MudDrawer @bind-Open="_drawerOpen" Elevation="25" ClipMode="DrawerClipMode.Always">
    <MudNavMenu>
      @foreach (var route in MainLayout.GetNavigationDescriptors(RepresentativeState))
      {
        <MudNavLink Href="@route.Route" Icon="@route.Icon">
          @T[route.Title]
        </MudNavLink>
      }
    </MudNavMenu>
  </MudDrawer>
  <MudMainContent>
    <MudHidden Breakpoint="Breakpoint.SmAndDown">
      <MudToolBar DisableGutters="true">
        <MudIconButton Icon="@Icons.Material.Outlined.Menu" Color="MudColor.Inherit" OnClick="@(e => DrawerToggle())" Class="ml-3"/>
      </MudToolBar>
    </MudHidden>
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4 pb-3">
      <CascadingValue Value="_userLayoutState">
        @Body
      </CascadingValue>
    </MudContainer>
  </MudMainContent>
</MudLayout>

@code {

  [CascadingParameter]
  public UserState? UserState { get; set; } = default!;

  [CascadingParameter]
  public RepresentativeState? RepresentativeState { get; set; } = default!;

  private UserLayoutState _userLayoutState =
    new(
      false,
      [],
      n => { },
      s => { },
      c => { }
    );

  public bool _drawerOpen = true;

  private string antiforgeryToken = string.Empty;

  protected override void OnInitialized()
  {
    var httpContext = HttpContextAccessor.HttpContext;
    if (httpContext != null)
    {
      var tokens = Antiforgery.GetAndStoreTokens(httpContext);
      antiforgeryToken = tokens.RequestToken ?? string.Empty;
    }
    else
    {
      antiforgeryToken = string.Empty;
    }

    NotificationCreatedSubscriber.SubscribeCreated(OnNotificationCreated);
  }

  protected override void Dispose(bool disposing)
  {
    if (!disposing)
    {
      return;
    }

    NotificationCreatedSubscriber.UnsubscribeCreated(OnNotificationCreated);
  }


  protected override async Task OnInitializedAsync()
  {
    if (RepresentativeState?.Representative is not { } representative)
    {
      return;
    }

    var notifications = (await ScopedServices
        .GetRequiredService<OzdsNotificationQueries>()
        .ReadForRecipient<NotificationModel>(representative))
      .Items
      .OfType<INotification>()
      .ToList();

    _userLayoutState =
      new UserLayoutState(
        false,
        notifications,
        n =>
        {
          _userLayoutState = _userLayoutState with
          {
            Notifications = _userLayoutState
              .Notifications
              .Where(u => u.Id != n.Id)
              .ToList()
          };
          InvokeAsync(StateHasChanged);
        },
        c =>
        {
          _userLayoutState = _userLayoutState with
          {
            Notifications = _userLayoutState
              .Notifications
              .Concat([c])
              .ToList()
          };
          InvokeAsync(StateHasChanged);
        },
        s =>
        {
          _userLayoutState = _userLayoutState with { Seen = s };
          InvokeAsync(StateHasChanged);
        }
      );
  }

  void OnNotificationCreated(
    object? sender,
    NotificationCreatedEventArgs eventArgs)
  {
    if (
      RepresentativeState?.Representative.Id is { } representativeId
      && eventArgs.Recipient.RepresentativeId == representativeId)
    {
      _userLayoutState.CreateNotification(eventArgs.Notification);
    }
  }

  void DrawerToggle()
  {
    _drawerOpen = !_drawerOpen;
  }

  string ChangeLang(string culture)
  {
    var uri = new Uri(NavigationManager.Uri);
    var segments = uri.Segments;
    segments[2] = $"{culture}/";
    var path = string.Join("", segments);
    return path;
  }

  private void GoHome()
  {
    NavigationManager.NavigateTo("/");
  }

} *@
