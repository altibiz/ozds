@namespace Ozds.Client.Components.Layout

@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.Extensions.Hosting
@using MudBlazor
@using Ozds.Client.Attributes
@using Ozds.Client.State
@inherits Ozds.Client.Components.Base.OzdsComponentBase

@inject IHostEnvironment Environment

@if (Descriptor.Navigation.Developer && !Environment.IsDevelopment())
{
  return;
}

@if (!Descriptor.Navigation.Allows
  .Contains(RepresentativeState.Representative.Role))
{
  return;
}

@{
  var match = Descriptor.Children.Any()
    ? NavLinkMatch.Prefix
    : NavLinkMatch.All;
}

<style>
  .ozds-nav-link {
    min-height: 48px;
  }

  .ozds-nav-link .mud-nav-link-text {
    margin-inline: 0 !important;
  }

  .ozds-nav-link .mud-nav-link {
    padding-inline: 0 !important;
  }

  .ozds-nav-link .mud-collapse-container {
    margin-left: 12px;
  }
</style>

@if (Descriptor.Children.Any())
{
  <MudNavGroup
    Title="@Descriptor.Navigation.Title"
    Class="ozds-nav-link">
    <MudNavLink
      Href="@PageHref(Descriptor.Type)"
      Match="match"
      Class="ozds-nav-link">
      <div class="d-flex flex-row align-center">
        <MudIcon Icon="@Descriptor.Navigation.Icon"/>
        <MudText Class="ml-4 d-flex flex-row" Style="align-items: center;">
          @Translate(Descriptor.Navigation.Title)
        </MudText>
      </div>
    </MudNavLink>

    @foreach (var child in Descriptor.Children)
    {
      <NavigationItem Descriptor="child"/>
    }
  </MudNavGroup>
}
else
{
  <MudNavLink
    Href="@PageHref(Descriptor.Type)"
    Match="match"
    Class="ozds-nav-link">
    <div class="d-flex flex-row align-center">
      <MudIcon Icon="@Descriptor.Navigation.Icon"/>
      <MudText Class="ml-4 d-flex flex-row" Style="align-items: center;">
        @Translate(Descriptor.Navigation.Title)
      </MudText>
    </div>
  </MudNavLink>
}

@code {

  [Parameter]
  public NavigationDescriptor Descriptor { get; set; } = default!;

  [CascadingParameter]
  private LayoutState LayoutState { get; set; } = default!;

  [CascadingParameter]
  private RepresentativeState RepresentativeState { get; set; } = default!;

}
