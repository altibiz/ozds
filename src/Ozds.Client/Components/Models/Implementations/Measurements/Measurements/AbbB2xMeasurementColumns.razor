@using MudBlazor
@using Ozds.Business.Models
@using Ozds.Business.Models.Complex
@using Ozds.Client.Components.Models.Base

@typeparam TPrefix
@typeparam TModel where TModel : AbbB2xMeasurementModel
@inherits OzdsColumnsComponentBase<TPrefix, TModel>

<PropertyColumn
  T="TPrefix"
  TProperty="string"
  Property="x => Raw(x)!.MeterId"
  Title='@Translate("Meter ID")'>
  <CellTemplate>
    <MudText>@Raw(context.Item)?.MeterId</MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="TPrefix"
  TProperty="DateTimeOffset"
  Property="x => Raw(x)!.Timestamp"
  Title='@Translate("Timestamp")'>
  <CellTemplate>
    <MudText>@DateTimeString(Raw(context.Item)?.Timestamp)</MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="TPrefix"
  TProperty="decimal"
  Property="x => TotalActivePower_W(Raw(x)!) / 1000"
  Title='@Translate("Active Power (W)")'>
  <CellTemplate>
    <MudText>
      @NumericString(TotalActivePower_W(Raw(context.Item)!) / 1000)
    </MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="TPrefix"
  TProperty="decimal"
  Property="x => Raw(x)!.ActiveEnergyTotalImportT0_Wh / 1000"
  Title='@Translate("Energy Import T0 (kWh)")'>
  <CellTemplate>
    <MudText>
      @NumericString(Raw(context.Item)?.ActiveEnergyTotalImportT0_Wh / 1000)
    </MudText>
  </CellTemplate>
</PropertyColumn>

@code {
  private decimal TotalActivePower_W(AbbB2xMeasurementModel model)
  {
    return model.ActivePowerL1NetT0_W +
           model.ActivePowerL2NetT0_W +
           model.ActivePowerL3NetT0_W;
  }
}
