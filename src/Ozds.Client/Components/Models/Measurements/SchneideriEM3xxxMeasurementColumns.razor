@using MudBlazor
@using Ozds.Business.Models
@using Ozds.Business.Models.Complex
@using Ozds.Client.Components.Base

@inherits OzdsComponentBase

<PropertyColumn
  T="SchneideriEM3xxxMeasurementModel"
  TProperty="string"
  Property="x => x.MeterId"
  Title='@Translate("Meter ID")'>
  <CellTemplate>
    <MudText>@context.Item.MeterId</MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="SchneideriEM3xxxMeasurementModel"
  TProperty="DateTimeOffset"
  Property="x => x.Timestamp"
  Title='@Translate("Timestamp")'>
  <CellTemplate>
    <MudText>@DateTimeString(context.Item.Timestamp)</MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="SchneideriEM3xxxMeasurementModel"
  TProperty="decimal"
  Property="x => TotalActivePower_W(x) / 1000"
  Title='@Translate("Active Power (W)")'>
  <CellTemplate>
    <MudText>
      @NumericString(TotalActivePower_W(context.Item) / 1000)
    </MudText>
  </CellTemplate>
</PropertyColumn>

<PropertyColumn
  T="SchneideriEM3xxxMeasurementModel"
  TProperty="decimal"
  Property="x => x.ActiveEnergyTotalImportT0_Wh"
  Title='@Translate("Active Energy Import T0 (kWh)")'>
  <CellTemplate>
    <MudText>@NumericString(context.Item.ActiveEnergyTotalImportT0_Wh / 1000)</MudText>
  </CellTemplate>
</PropertyColumn>

@code {
  private decimal TotalActivePower_W(SchneideriEM3xxxMeasurementModel model)
  {
    return model.ActivePowerL1NetT0_W +
           model.ActivePowerL2NetT0_W +
           model.ActivePowerL3NetT0_W;
  }
}
