@namespace Ozds.Client.Components.Models.Base

@typeparam TPrefix
@typeparam TModel
@using System.Collections
@using System.Linq.Expressions
@using MudBlazor
@using Ozds.Business.Models.Abstractions
@using Ozds.Client.Extensions
@using Ozds.Client.Components.Streaming
@inherits OzdsListModelComponentBase<TPrefix, TModel>

@Base()

@code {
  protected RenderFragment Column(Expression<Func<TModel, string?>> next)
  {
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="string"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)"/>);
  }

  protected RenderFragment Column(Expression<Func<TModel, Enum?>> next)
  {
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="Enum"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)"/>);
  }

  protected RenderFragment Column(Expression<Func<TModel, decimal?>> next)
  {
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="decimal?"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)"/>);
  }

  protected RenderFragment Column<T>(
    Expression<Func<TModel, IEnumerable<T>?>> next
  )
  {
    var nextFunc = next.Compile();
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="IEnumerable<T>"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)">
      <CellTemplate>
        @if (Get(nextFunc)(context.Item) is { } item)
        {
          <MudText>
            @string.Join(", ", item)
          </MudText>
        }
      </CellTemplate>
    </PropertyColumn>);
  }

  protected RenderFragment Column(
    Expression<Func<TModel, DateTimeOffset?>> next
  )
  {
    var nextFunc = next.Compile();
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="DateTimeOffset?"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)">
      <CellTemplate>
        <MudText>
          @if (Get(nextFunc)(context.Item) is { } date)
          {
            @DateTimeString(date)
          }
        </MudText>
      </CellTemplate>
    </PropertyColumn>);
  }

  protected RenderFragment EnumerableColumn<T>(
    Expression<Func<TModel, T?>> next
  )
  {
    var nextFunc = next.Compile();
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="T"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)">
      <CellTemplate>
        @if (Get(nextFunc)(context.Item) is IEnumerable item)
        {
          <MudText>
            @string.Join(", ", item)
          </MudText>
        }
      </CellTemplate>
    </PropertyColumn>);
  }

  protected RenderFragment TextColumn<T>(Expression<Func<TModel, T?>> next)
  {
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="T"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)"/>);
  }

  protected RenderFragment EnumColumn<T>(Expression<Func<TModel, T?>> next)
  {
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="T"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)"/>);
  }

  protected RenderFragment DateColumn<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="T"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)">
      <CellTemplate>
        <MudText>
          @if (Get(nextFunc)(context.Item) is DateTimeOffset date)
          {
            @DateString(date)
          }
        </MudText>
      </CellTemplate>
    </PropertyColumn>);
  }

  protected RenderFragment DateTimeColumn<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return Fragment(@<PropertyColumn
              T="TPrefix"
              TProperty="T"
              Title="@(Translate(next.Label()))"
              Property="@Wrap(next)">
      <CellTemplate>
        <MudText>
          @if (Get(nextFunc)(context.Item) is DateTimeOffset date)
          {
            @DateTimeString(date)
          }
        </MudText>
      </CellTemplate>
    </PropertyColumn>);
  }

  protected RenderFragment LinkColumn(
    Expression<Func<TModel, IIdentifiable?>> next
  )
  {
    var nextFunc = next.Compile();
    return Fragment(@<TemplateColumn
      T="TPrefix"
      Title="@(Translate(next.Label()))">
      <CellTemplate>
        @if (Get(nextFunc)(context.Item) is { } model)
        {
          <MudLink Href="@(Provider.CreateLink(model))">
            @model.Title
          </MudLink>
        }
      </CellTemplate>
    </TemplateColumn>);
  }

  protected RenderFragment LinkColumn<T>(
    Expression<Func<TModel, string?>> next
  )
    where T : IIdentifiable
  {
    var nextFunc = next.Compile();
    return Fragment(@<TemplateColumn
      T="TPrefix"
      Title="@(Translate(next.Label()))">
      <CellTemplate>
        @if (Get(nextFunc)(context.Item) is { } id)
        {
          var href = PageHref(
            Provider.GetPageComponentType(typeof(T)),
            new { id });
          <MudLink Href="@href">
            @id
          </MudLink>
        }
      </CellTemplate>
    </TemplateColumn>);
  }

  protected RenderFragment Fragment(
    RenderFragment fragment
  )
  {
    if (Isolate)
    {
      return fragment;
    }

    return @<Fragment>
      <Fragment>
        @fragment
      </Fragment>
    </Fragment>;
  }
}
