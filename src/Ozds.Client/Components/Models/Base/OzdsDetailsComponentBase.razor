@using MudBlazor
@using System.Linq.Expressions
@using System.Text.Json
@using Ozds.Business.Models.Abstractions
@using Ozds.Client.Components.Fields
@using Ozds.Client.Components.Streaming
@using Ozds.Client.Extensions

@namespace Ozds.Client.Components.Models.Base

@typeparam TModel
@inherits OzdsManagedModelComponentBase<TModel>

@Base()

@code {
  protected RenderFragment Field(Expression<Func<TModel, string?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @nextFunc(Model)
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment Field(Expression<Func<TModel, Enum?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @nextFunc(Model)
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment Field(Expression<Func<TModel, decimal?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @NumericString(nextFunc(Model))
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment Field(Expression<Func<TModel, DateTimeOffset?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @DateTimeString(nextFunc(Model))
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment Field(Expression<Func<TModel, JsonDocument?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @JsonString(nextFunc(Model))
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment Field<T>(
    Expression<Func<TModel, IEnumerable<T>?>> next
  )
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @if (nextFunc(Model) is { } model)
          {
            @string.Join(", ", model)
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment TextField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @nextFunc(Model)
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment NumericField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @{
            var value = nextFunc(Model);

            @if (value is decimal @decimal)
            {
              @NumericString(@decimal)
            }
            else
            {
              @value
            }
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment DateTimeField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @{
            var value = nextFunc(Model);

            @if (value is DateTimeOffset @decimal)
            {
              @DateTimeString(@decimal)
            }
            else
            {
              @value
            }
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment DateField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @{
            var value = nextFunc(Model);

            @if (value is DateTimeOffset @decimal)
            {
              @DateString(@decimal)
            }
            else
            {
              @value
            }
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment JsonField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @{
            var value = nextFunc(Model);

            @if (value is JsonDocument @decimal)
            {
              @JsonString(@decimal)
            }
            else
            {
              @value
            }
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment EnumerableField<T>(
    Expression<Func<TModel, IEnumerable<T>?>> next
  )
  {
    var nextFunc = next.Compile();
    return @<DetailsField Title="@(Translate(next.Label()))">
        <MudText>
          @if (nextFunc(Model) is { } model)
          {
            @string.Join(", ", model)
          }
        </MudText>
      </DetailsField>;
  }

  protected RenderFragment LinkField<T>(
    Expression<Func<TModel, string?>> next
  )
    where T : IIdentifiable
  {
    var nextFunc = next.Compile();
    var id = nextFunc(Model);
    var href = id is null
      ? null
      : PageHref(Provider.GetPageComponentType(typeof(T)), new { id });
    return @<DetailsField Title="@(Translate(next.Label()))">
        @if (id is null || href is null)
        {
          <Fragment />
        }
        else
        {
          <MudLink Href="@href">
            @id
          </MudLink>
        }
      </DetailsField>;
  }

  protected RenderFragment ArchivedField<T>(
    Expression<Func<TModel, T?>> next
  )
  {
    var nextFunc = next.Compile();
    var archived = nextFunc(Model);
    return @<CollapseField Title="@(Translate(next.Label()))">
        <Details Model="@archived" />
      </CollapseField>;
  }
}
