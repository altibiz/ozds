@using MudBlazor
@using System.Linq.Expressions
@using Ozds.Business.Models.Abstractions
@using Ozds.Client.Components.Fields
@using Ozds.Client.Components.Streaming
@using Ozds.Client.Extensions

@namespace Ozds.Client.Components.Models.Base

@typeparam TPrefix
@typeparam TModel
@inherits OzdsManagedModelComponentBase<TPrefix, TModel>

@Base()

@code {
  protected RenderFragment Field(Expression<Func<TModel, string?>> next)
  {
    var nextFunc = next.Compile();
    return @<MudTextField
      Label="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  protected RenderFragment Field(Expression<Func<TModel, decimal?>> next)
  {
    var nextFunc = next.Compile();
    return @<MudNumericField
      Label="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  // NOTE: doesn't work with just Enum
  protected RenderFragment Field<T>(Expression<Func<TModel, T?>> next)
    where T : Enum
  {
    var nextFunc = next.Compile();
    return @<EnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  // NOTE: doesn't work with just Enum
  protected RenderFragment Field<T>(
    Expression<Func<TModel, HashSet<T>?>> next
  )
    where T : Enum
  {
    var nextFunc = next.Compile();
    return @<MultiEnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)" />;
  }

  // NOTE: doesn't work with just Enum
  protected RenderFragment Field<T>(
    Expression<Func<TModel, List<T>?>> next
  )
    where T : Enum
  {
    var nextFunc = next.Compile();
    return @<MultiEnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(x => nextFunc(x)?.ToHashSet(), () => new HashSet<T>())"
      ValueChanged="@Set(next, (HashSet<T> x) => x.ToList())" />;
  }

  protected RenderFragment TextField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<MudTextField
      Label="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  protected RenderFragment NumericField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<MudNumericField
      Label="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  protected RenderFragment EnumField<T>(Expression<Func<TModel, T?>> next)
  {
    var nextFunc = next.Compile();
    return @<EnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)"
      For="@For(next)" />;
  }

  protected RenderFragment MultiEnumField<T>(
    Expression<Func<TModel, HashSet<T>?>> next
  )
  {
    var nextFunc = next.Compile();
    return @<MultiEnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(nextFunc)"
      ValueChanged="@Set(next)" />;
  }

  protected RenderFragment MultiEnumField<T>(
    Expression<Func<TModel, List<T>?>> next
  )
  {
    var nextFunc = next.Compile();
    return @<MultiEnumPicker
      Title="@(Translate(next.Label()))"
      Value="@Get(x => nextFunc(x)?.ToHashSet(), () => new HashSet<T>())"
      ValueChanged="@Set(next, (HashSet<T> x) => x.ToList())" />;
  }

  protected RenderFragment LinkField<T>(
    Expression<Func<TModel, string?>> next
  )
    where T : IIdentifiable
  {
    var nextFunc = next.Compile();
    return @<MudSelect
        Label="@(Translate(next.Label()))"
        Value="@Get(nextFunc)"
        ValueChanged="@Set(next)"
        For="@For(next)">
        <Paging T="T">
          <Summary Context="model">
            <MudSelectItem Value="@model.Id">
              <Summary Model="@model"/>
            </MudSelectItem>
          </Summary>
        </Paging>
      </MudSelect>;
  }
}
