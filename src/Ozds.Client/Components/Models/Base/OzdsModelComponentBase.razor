@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Models.Abstractions
@using Ozds.Client.Components.Streaming

@namespace Ozds.Client.Components.Models.Base

@typeparam TModel
@inherits OzdsComponentBase
@implements IModelComponentProvider

@Base()

@code {

  [Parameter]
  public RenderFragment ChildContent { get; set; } = @<Fragment />;

  protected RenderFragment Base(bool anyway = false)
  {
    if (Isolate && !anyway)
    {
      return @<Fragment />;
    }

    return @<DynamicComponent
      Type="@(BaseComponentType())"
      Parameters="@(BaseParameters())" />;
  }

  protected RenderFragment Base<T>(bool anyway = false)
  {
    return Base(typeof(T), anyway);
  }

  protected RenderFragment Base(Type baseModelType, bool anyway = false)
  {
    if (Isolate && !anyway)
    {
      return @<Fragment />;
    }

    return @<DynamicComponent
      Type="@(BaseComponentType(baseModelType))"
      Parameters="@(BaseParameters())" />;
  }

  protected RenderFragment Base(
    RenderFragment childContent,
    bool anyway = false
  )
  {
    if (Isolate && !anyway)
    {
      return @<Fragment />;
    }

    return @<DynamicComponent
      Type="@(BaseComponentType())"
      Parameters="@(BaseParameters(childContent))" />;
  }

  protected RenderFragment Base<T>(
    RenderFragment childContent,
    bool anyway = false
  )
  {
    return Base(typeof(T), childContent, anyway);
  }

  protected RenderFragment Base(
    Type baseModelType,
    RenderFragment childContent,
    bool anyway = false
  )
  {
    if (Isolate && !anyway)
    {
      return @<Fragment />;
    }

    return @<DynamicComponent
      Type="@(BaseComponentType(baseModelType))"
      Parameters="@(BaseParameters(childContent))" />;
  }

  protected RenderFragment Sub()
  {
    if (!Isolate)
    {
      return @<Fragment />;
    }

    return ChildContent;
  }
}
