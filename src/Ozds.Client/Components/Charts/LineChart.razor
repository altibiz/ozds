@using ApexCharts
@using MudBlazor
@using Ozds.Business.Models
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Client.Components.Fields
@using Ozds.Client.Components.Base

@namespace Ozds.Client.Components.Charts

@inherits OzdsOwningComponentBase

<div class="d-flex justify-center">
  <MudText>
    @if(_selectedMeters.Count() == 1){
      @(Translate(_selectedMeters.FirstOrDefault()!.Title) + " ")
    }
    @Translate(Measure.ToTitle())
    (@Translate(Measure.ToUnit())
    @Translate("over the last")
    @(Multiplier == 1 ? "" : Multiplier.ToString())
    @Translate(Resolution.ToTitle(Multiplier)))
  </MudText>
</div>

<ApexChart XAxisType="XAxisType.Datetime"
           Options="@_options"
           @ref="_chart">
  @if (Meters.Count > 1)
  {
    if(DonutSum) {
        <ApexPointSeries
          Items="_measurements.Items"
          SeriesType="SeriesType.Donut"
          Name="@Translate(Measure.ToTitle())"
          XValue="@(x => x.Measurements.MeterId)"
          YAggregate="@(x => x.Sum(m => m.Measurements.ChartValue(Measure, null)))"/>
    }
    else
    {
      foreach (var (selectedMeter, i) in _selectedMeters
        .OrderBy(x => x.Id)
        .Select((x, i) => (x, i)))
      {
        if(SumBars)
        {
          <ApexPointSeries
            Items="@(_measurements.Items.Where(x => x.MeterId == selectedMeter.Id).ToList())"
            Name="@(selectedMeter.Id + " " + Translate("Power"))"
            SeriesType="SeriesType.Bar"
            XValue="x => DateTimeApplyOffset(x.Timestamp)"
          YAggregate="x => x.Sum(m => m.ChartValue(MeasureModel.ActivePower, null))" />
          <ApexPointSeries
            Items="@(_measurements.Items.Where(x => x.MeterId == selectedMeter.Id).ToList())"
            Name="@(selectedMeter.Id + " " + Translate("Energy"))"
            SeriesType="DisplayType"
            XValue='x => DateTimeApplyOffset(x.Timestamp)'
            YValue="x => x.ChartValue(MeasureModel.ActiveEnergy, null)" />
        }
        else{
          foreach (var phase in Phases.OrderBy(x => x))
          {
            <ApexPointSeries
              Items="@(_measurements.Items.Where(x => x.MeterId == selectedMeter.Id).ToList())"
              Name="@(selectedMeter.Id + " " + (PhasesSum ? Translate("Sum") : phase.ToTitle()))"
              SeriesType="DisplayType"
              XValue='x => DateTimeApplyOffset(x.Timestamp)'
              YValue="x => x.ChartValue(Measure, PhasesSum ? null : phase)"
              Stroke="@(new SeriesStroke { Color = phase.ToColor(i), Width = 4 })"
              Color="@(phase.ToColor(i))"/>
            if(PhasesSum)
            {
              break;
            }
          }
        }
      }
    }
  }
  else
  {
    if(DonutSumPhases){
      @* TODO: Added Donut graph per phase for sum*@
    }
    else{
      foreach (var phase in Phases.OrderBy(x => x))
      {
        <ApexPointSeries
          Items="@_measurements.Items"
          Name="@(phase.ToTitle())"
          SeriesType="DisplayType"
          XValue='x => DateTimeApplyOffset(x.Timestamp)'
          YValue="x => x.ChartValue(Measure, phase)"
          Stroke="@(new SeriesStroke { Color = phase.ToColor(), Width = 4 })"
          Color="@(phase.ToColor())"/>
      }
    }
  }
</ApexChart>
