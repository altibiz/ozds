@namespace Ozds.Client.Components.Charts
@using ApexCharts
@using Ozds.Business.Models
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Client.Components.Fields
@using MudBlazor
@inherits Ozds.Client.Base.OzdsOwningComponentBase

<div class="d-flex justify-center">
  <MudText>
    @T[Measure.ToTitle()]
    (@T[Measure.ToUnit()]
    over the last
    @(Multiplier == 1 ? "" : Multiplier.ToString())
    @T[Resolution.ToTitle(Multiplier)]
  </MudText>
</div>

<ApexChart XAxisType="XAxisType.Datetime"
           Options="@_options"
           @ref="_chart">
  @if (Meters.Count > 1)
  {
    if (Sum)
    {
      foreach (var phase in Phases.OrderBy(x => x))
      {
        if(SumBars)
        {
          <ApexPointSeries
            Items="@_measurements.Items"
            Name="@phase.ToTitle()"
            SeriesType="SeriesType.Bar"
            XValue="x => DateTimeApplyOffset(x.Timestamp)"
            YValue="x => x.ChartValue(Measure, phase)" />
        }

        <ApexPointSeries
          Items="@_measurements.Items.GroupBy(m => m.Timestamp)"
          Name="@phase.ToTitle()"
          SeriesType="SeriesType.Line"
          XValue="x => DateTimeApplyOffset(x.Key)"
          YValue="x => x.Sum(m => m.ChartValue(Measure, phase))"
          Stroke="new SeriesStroke { Color = phase.ToColor(), Width = 4 }"
          Color="@phase.ToColor()"/>
      }
    }
    else
    {
      foreach (var (selectedMeter, i) in _selectedMeters
        .OrderBy(x => x.Id)
        .Select((x, i) => (x, i)))
      {
        foreach (var phase in Phases.OrderBy(x => x))
        {
          <ApexPointSeries
            Items="@(_measurements.Items.Where(x => x.MeterId == selectedMeter.Id))"
            Name="@($"{selectedMeter.Id} {phase.ToTitle()}")"
            SeriesType="SeriesType.Line"
            XValue='x => DateTimeApplyOffset(x.Timestamp)'
            YValue="x => x.ChartValue(Measure, phase)"
            Stroke="@(new SeriesStroke { Color = phase.ToColor(i), Width = 4 })"
            Color="@(phase.ToColor(i))"/>
        }
      }
    }
  }
  else
  {
    foreach (var phase in Phases.OrderBy(x => x))
    {
      <ApexPointSeries
        Items="@(_measurements.Items)"
        Name="@(phase.ToTitle())"
        SeriesType="SeriesType.Line"
        XValue='x => DateTimeApplyOffset(x.Timestamp)'
        YValue="x => x.ChartValue(Measure, phase)"
        Stroke="@(new SeriesStroke { Color = phase.ToColor(), Width = 4 })"
        Color="@(phase.ToColor())"/>
    }
  }
</ApexChart>

@if (!Static)
{
  <style>
    #graph-controls > .mud-expand-panel-header {
      padding: 0px !important;
    }
  </style>

  <MudExpansionPanel
    id="graph-controls"
    Gutters="false"
    Text="@T["Graph controls"]">
    <MudGrid Spacing="2" Justify="Justify.Center">
      <MudItem xs="12" md="6">
        @if (Meters.Count > 1)
        {
          <MudSelect
            T="string"
            Label="@T["Meters"]"
            SelectedValues="_selectedMeters.Select(meter => meter.Id)"
            SelectedValuesChanged="async e => {
              if (e.Count() == 0)
              {
                return;
              }
              _selectedMeters = Meters.Where(meter => e.Contains(meter.Id)).ToHashSet();
              await OnParametersSetAsync();
            }"
            MultiSelection>
            @foreach (var meter in Meters)
            {
              <MudSelectItem Value="@meter.Id">
                @meter.Id
              </MudSelectItem>
            }
          </MudSelect>
        }
      </MudItem>
      <MudItem xs="12" md="6">
        <MudHidden Breakpoint="Breakpoint.MdAndUp">
          <MudCheckBox
            T="bool"
            Value="Refresh"
            ValueChanged="async (e) => {
              Refresh = e;
              await OnParametersSetAsync();
            }"
            Label="@T["Refresh"]"/>
        </MudHidden>
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
          <div class="d-flex justify-end pe-4">
            <MudCheckBox
              T="bool"
              Value="Refresh"
              ValueChanged="async (e) => {
                Refresh = e;
                await OnParametersSetAsync();
              }"
              Label="@T["Refresh"]"/>
          </div>
        </MudHidden>
      </MudItem>
      <MudItem xs="12" sm="6" md="3">
        <EnumPicker
          T="MeasureModel"
          Value="Measure"
          ValueChanged="async (e) => {
            Measure = e;
            await OnParametersSetAsync();
          }"
          Title="@T["Measure"]"
          Label="x => T[x.ToTitle()]"/>
      </MudItem>
      <MudItem xs="12" sm="6" md="3">
        <MultiEnumPicker
          T="PhaseModel"
          Value="Phases"
          ValueChanged="async (e) => {
            Phases = e;
            await OnParametersSetAsync();
          }"
          Title="@T["Phase"]"
          Label="x => T[x.ToTitle()]"/>
      </MudItem>
      <MudItem xs="12" sm="6" md="3">
        <EnumPicker
          T="ResolutionModel"
          Value="Resolution"
          ValueChanged="async (e) => {
            Resolution = e;
            await OnParametersSetAsync();
          }"
          Title="@T["Resolution"]"
          Label="x => T[x.ToTitle(Multiplier)]"/>
      </MudItem>
      <MudItem xs="12" sm="6" md="3">
        <MudNumericField
          T="int"
          Value="Multiplier"
          ValueChanged="async (e) => {
            Multiplier = e;
            await OnParametersSetAsync();
          }"
          Label="@T["Multiplier"]"
          Min="1"
          Max="@Resolution.MaxMultiplier()"
          Step="1"/>
      </MudItem>
    </MudGrid>
  </MudExpansionPanel>
}
