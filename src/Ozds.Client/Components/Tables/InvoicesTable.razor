@using MudBlazor
@using Ozds.Business.Models
@using Ozds.Business.Analysis
@using Ozds.Client.Components.Base
@using Ozds.Client.State

@namespace Ozds.Client.Components.Tables

@inherits OzdsOwningComponentBase

@{
  var invoices = RepresentativeState.AnalysisBases
    .SelectMany(x => x.Invoices)
    .ToList();
}

<MudHidden Breakpoint="Breakpoint.LgAndUp">
  <MudText Typo="Typo.h4" Class="d-flex">
    @Translate("Invoices")
  </MudText>
  @foreach (var invoice in invoices)
  {
    <MudPaper Elevation="2" Class="ma-1">
      <MudStack Spacing="0">
        <MudGrid Class="d-flex pa-2">
          <MudItem
            xs="10"
            Class="d-flex align-center justify-start"
            Style="font-size: medium;">
            @Translate("Invoice number"): @invoice.Id
          </MudItem>
          <MudItem
            xs="2"
            Class="d-flex align-center justify-end">
            <MudIconButton
              OnClick="@(() => NavigationManager
                .NavigateTo($"invoice/{invoice.Id}"))"
              Icon="@Icons.Material.Filled.RemoveRedEye"
              Color="Color.Primary"/>
          </MudItem>
          <MudItem
            xs="10"
            Class="d-flex align-center justify-start"
            Style="font-size: medium;">
            @Translate("Date")
            &colon;
            &nbsp;
            @(DateString(invoice.FromDate))
            &nbsp;
            &dash;
            &nbsp;
            @(DateString(invoice.ToDate))
          </MudItem>
        </MudGrid>

        <MudCollapse Class="py-2" Expanded="true">
          <MudStack>
            <MudDivider DividerType="DividerType.Middle" Class="mt-2"/>
            <MudContainer Class="d-flex flex-column">
              <MudItem Class="d-flex">
                @if (invoice is NetworkUserInvoiceModel networkUserInvoice)
                {
                  <MudItem
                    xs="10"
                    Class="d-flex align-center justify-start"
                    Style="font-size: large;">
                    @Translate("Network user")
                    &colon;
                    &nbsp;
                    @networkUserInvoice.ArchivedNetworkUser.LegalPerson.Name
                  </MudItem>
                  <MudItem xs="2" Class="d-flex align-center justify-end">
                    <MudIconButton
                      OnClick="@(() => NavigationManager
                        .NavigateTo(
                          $"network-user/{networkUserInvoice.NetworkUserId}"))"
                      Icon="Icons.Material.Filled.RemoveRedEye"
                      Color="Color.Primary"/>
                  </MudItem>
                }
              </MudItem>
              <MudItem
                xs="10"
                Class="align-center justify-start"
                Style="font-size: large; font-weight:bold;">
                @Translate("Total")
                &colon;
                &nbsp;
                @(NumericString(invoice.TotalWithTax_EUR))
                &nbsp;
                EUR
              </MudItem>
            </MudContainer>
          </MudStack>
        </MudCollapse>
      </MudStack>
    </MudPaper>
  }
</MudHidden>

<MudHidden Breakpoint="Breakpoint.MdAndDown">
  <MudDataGrid
    MultiSelection="true"
    Items="invoices"
    SortMode="SortMode.Multiple"
    Filterable="true"
    QuickFilter="@((x) => string.IsNullOrEmpty(_searchString)
      || x.Title.Contains(
        _searchString,
        StringComparison.OrdinalIgnoreCase))">
    <ToolBarContent>
      <MudText Typo="Typo.h4">
        @Translate("Invoice")
      </MudText>
      <MudSpacer/>
      <MudTextField
        @bind-Value="_searchString"
        Placeholder="@Translate("Search")"
        Adornment="Adornment.Start"
        Immediate="true"
        AdornmentIcon="@Icons.Material.Filled.Search"
        IconSize="Size.Medium"
        Class="mt-0">
      </MudTextField>
    </ToolBarContent>
    <Columns>
      <TemplateColumn
        Title="@Translate("Network user")"
        Sortable="false">
        <CellTemplate>
          @if (context.Item is NetworkUserInvoiceModel networkUserInvoice)
          {
            <MudStack Row>
              <MudButton
                OnClick="@(() => NavigationManager
                  .NavigateTo($"invoice/{context.Item.Id}"))"
                Variant="Variant.Outlined"
                Color="Color.Primary">
                @networkUserInvoice.ArchivedNetworkUser.LegalPerson.Name
              </MudButton>
            </MudStack>
          }
        </CellTemplate>
      </TemplateColumn>
      <PropertyColumn
        CellStyle="font-size: x-large; text-align: end !important;"
        Property="x => x.TotalWithTax_EUR"
        Title='@Translate("Total")'>
        <CellTemplate>
          @NumericString(context.Item.TotalWithTax_EUR)
          &nbsp;
          EUR
        </CellTemplate>
      </PropertyColumn>
      <PropertyColumn
        CellStyle="font-size: large;"
        Property="x => DateString(x.FromDate)"
        Title='@Translate("From")'/>
      <PropertyColumn
        CellStyle="font-size: large;"
        Property="x => DateString(x.ToDate)"
        Title='@Translate("To")'/>
      <PropertyColumn
        CellStyle="font-size: large;"
        Property="x => x.Id"
        Sortable="false"
        Title='@Translate("Invoice number")'/>
      <TemplateColumn
        CellClass="d-flex justify-center"
        Sortable="false"
        Filterable="false">
        <CellTemplate>
          @if (context.Item is NetworkUserInvoiceModel networkUserInvoice)
          {
            <MudStack Row>
              <MudButton
                OnClick="@(() => NavigationManager
                  .NavigateTo(
                    $"network-user/{networkUserInvoice.NetworkUserId}"))"
                Variant="Variant.Filled"
                Color="Color.Primary">
                @Translate("View")
              </MudButton>
            </MudStack>
          }
        </CellTemplate>
      </TemplateColumn>
    </Columns>
    <PagerContent>
      <MudDataGridPager T="NetworkUserInvoiceModel"/>
    </PagerContent>
  </MudDataGrid>
</MudHidden>

@code {
  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  private string? _searchString;
}
