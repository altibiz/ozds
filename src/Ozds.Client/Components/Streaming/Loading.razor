@namespace Ozds.Client.Components.Streaming

@typeparam T where T : notnull
@using MudBlazor
@using Ozds.Client.State
@inherits Ozds.Client.Components.Base.OzdsComponentBase

@if (_state.State is LoadingState.Loading)
{
  if (Progress is not null)
  {
    @Progress
    return;
  }

  <Progress/>
  return;
}

@if (_state.State is LoadingState.Error)
{
  if (Error is not null)
  {
    @Error(_state.Error!)
    return;
  }

  <Error>@_state.Error</Error>
  return;
}

@if (_state.State is LoadingState.Unfound)
{
  if (NotFound is not null)
  {
    @NotFound
    return;
  }

  <NotFound/>
  return;
}

@if (_state.State is LoadingState.Created)
{
  @if (Activate || ActivateAsync)
  {
    if (Concretize is not null)
    {
      @Concretize(_state.Value!)
    }
    else
    {
      <MudSelect T="Type" @bind-Value="@_activationType">
        @foreach (var type in ConcreteTypes)
        {
          <MudSelectItem Value="@type">
            <MudText>
              @Translate(type.Name)
            </MudText>
          </MudSelectItem>
        }
      </MudSelect>
    }
  }

  if (Created is not null)
  {
    @Created(_state.Value!)
    return;
  }


  <Serialized Value="@_state.Value"/>
  return;
}

@if (Found is not null)
{
  @Found(_state.Value!)
  return;
}

<Serialized Value="@_state.Value"/>
