@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.DependencyInjection
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Mutations.Agnostic
@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Fields
@using Ozds.Client.State
@using MudBlazor

@namespace Ozds.Client.Components.Streaming

@typeparam T where T : notnull

@inherits OzdsOwningComponentBase

<Loading
  T="T"
  Value="@Value"
  Progress="@(Progress!)"
  Error="@(Error!)"
  Id="@(Id!)"
  Load="@(Load!)"
  LoadAsync="@(LoadAsync!)"
  New="@(New!)"
  NewAsync="@(NewAsync!)"
  ActivateAsync>
  <Found Context="model">
    @if (Label is not null)
    {
      @Label(new MutatingState<T>(model, false))
      <MudDivider Class="mb-4" />
    }
    else if (model is IIdentifiable identifiable)
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @if (_mutating)
        {
          @Translate("Edit")
          <span>&nbsp;</span>
        }
        @(identifiable.Title)
      </MudText>
      <MudDivider Class="mb-4" />
      <DetailsField Title="@Translate("Id")">
        @identifiable.Id
      </DetailsField>
    }
    else
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @if (_mutating)
        {
          @Translate("Edit")
          <span>&nbsp;</span>
        }
        @(typeof(T).Name)
      </MudText>
      <MudDivider Class="mb-4" />
    }

    @if (model is IReadonly)
    {
      @Details(new MutatingState<T>(model, false))
    }
    else
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnUpdate(model))">
        <DataAnnotationsValidator/>
        @if (_mutating)
        {
          @Edit(new MutatingState<T>(model, false))
          <div Class="d-flex flex-column mt-4">
            <div Class="d-flex flex-row">
              <MudButton
                Variant="Variant.Filled"
                Color="MudBlazor.Color.Success"
                ButtonType="ButtonType.Submit">
                @Translate("Update")
              </MudButton>
              <MudButton
                Variant="Variant.Filled"
                Color="MudBlazor.Color.Secondary"
                OnClick="@(() => _mutating = !_mutating)"
                Class="ml-4">
                @Translate("Preview")
              </MudButton>
            </div>
            <MudButton
              Variant="Variant.Filled"
              Color="MudBlazor.Color.Error"
              OnClick="@(() => OnDelete(model))"
              Class="mt-8 align-self-start">
              @Translate("Delete")
            </MudButton>
          </div>
        }
        else
        {
          @Details(new MutatingState<T>(model, false))
          @if (model is not IReadonly)
          {
            <div Class="d-flex flex-row mt-4">
              <MudButton
                OnClick="@(() => _mutating = !_mutating)"
                Variant="Variant.Filled"
                Color="MudBlazor.Color.Warning">
                @Translate("Edit")
              </MudButton>
            </div>
          }
        }
      </EditForm>
    }
  </Found>

  <Created Context="model">
    @if (Label is not null)
    {
      @Label(new MutatingState<T>(model, true))
    }
    else
    {
      <MudText Typo="Typo.h5" Class="mb-2">
        @Translate("Create") @(typeof(T).Name)
      </MudText>
    }
    <MudDivider Class="mb-4" />
    <EditForm
      Model="@model"
      OnValidSubmit="@(() => OnCreate(model))">
      <DataAnnotationsValidator/>
      @if (!_mutating)
      {
        @Edit(new MutatingState<T>(model, true))
        <div Class="d-flex flex-row mt-4">
          <MudButton
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled"
            Color="MudBlazor.Color.Success">
            @Translate("Create")
          </MudButton>
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="MudBlazor.Color.Secondary"
            Class="ml-4">
            @Translate("Preview")
          </MudButton>
        </div>
      }
      else
      {
        @Details(new MutatingState<T>(model, true))
        <div Class="d-flex flex-row mt-4">
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="MudBlazor.Color.Warning">
            @Translate("Edit")
          </MudButton>
        </div>
      }
    </EditForm>
  </Created>
</Loading>
