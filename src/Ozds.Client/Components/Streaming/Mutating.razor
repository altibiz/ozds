@namespace Ozds.Client.Components.Streaming

@typeparam T where T : notnull
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Client.State
@inherits Ozds.Client.Components.Base.OzdsComponentBase

<Loading
  T="T"
  Value="@Value"
  Progress="@(Progress!)"
  Error="@(Error!)"
  Id="@(Id!)"
  Load="@(Load!)"
  LoadAsync="@(LoadAsync!)"
  New="@(New!)"
  NewAsync="@(NewAsync!)"
  Concretize="@(Concretize!)"
  ActivateAsync>
  <Found Context="model">
    @if (model is IReadonly || AsReadonly)
    {
      @Details(new MutatingState<T>(model, false))
    }
    else
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnUpdate(model))">
        <DataAnnotationsValidator/>
        @if (_mutating)
        {
          @Edit(new MutatingState<T>(model, false))
          <div Class="d-flex flex-row mt-4">
            <MudButton
              Variant="Variant.Filled"
              Color="Color.Success"
              ButtonType="ButtonType.Submit">
              @Translate("Update")
            </MudButton>
            <MudButton
              Variant="Variant.Filled"
              Color="Color.Secondary"
              OnClick="@(() => _mutating = !_mutating)"
              Class="ml-4">
              @Translate("Preview")
            </MudButton>
          </div>
        }
        else
        {
          @Details(new MutatingState<T>(model, false))
          @if (model is not IReadonly
            && RepresentativeState.Representative.Role
              == RoleModel.OperatorRepresentative)
          {
            <div Class="d-flex flex-row mt-4">
              <MudButton
                OnClick="@(() => _mutating = !_mutating)"
                Variant="Variant.Filled"
                Color="Color.Warning">
                @Translate("Edit")
              </MudButton>
              <MudSpacer />
              @if (model is IAuditable)
              {
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Error"
                  OnClick="@(() => OnDelete(model))">
                  @Translate("Delete")
                </MudButton>
                <MudButton
                  Variant="Variant.Outlined"
                  Class="ml-2"
                  Color="Color.Error"
                  OnClick="@(() => OnForget(model))">
                  @Translate("Forget")
                </MudButton>
              }
            </div>
          }
        }
      </EditForm>
    }
  </Found>

  <Created Context="model">
    <EditForm
      Model="@model"
      OnValidSubmit="@(() => OnCreate(model))">
      <DataAnnotationsValidator/>
      @if (!_mutating)
      {
        @Edit(new MutatingState<T>(model, true))
        <div Class="d-flex flex-row mt-4">
          <MudButton
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled"
            Color="Color.Success">
            @Translate("Create")
          </MudButton>
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="Color.Secondary"
            Class="ml-4">
            @Translate("Preview")
          </MudButton>
        </div>
      }
      else
      {
        @Details(new MutatingState<T>(model, true))
        <div Class="d-flex flex-row mt-4">
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="Color.Warning">
            @Translate("Edit")
          </MudButton>
        </div>
      }
    </EditForm>
  </Created>
</Loading>
