@namespace Ozds.Client.Components.Streaming

@typeparam T where T : notnull
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Client.State
@inherits Ozds.Client.Components.Base.OzdsComponentBase

<Loading
  T="T"
  Value="@Value"
  Progress="@(Progress!)"
  Error="@(Error!)"
  Id="@(Id!)"
  Load="@(Load!)"
  LoadAsync="@(LoadAsync!)"
  New="@(New!)"
  NewAsync="@(NewAsync!)"
  Concretize="@(Concretize!)"
  ActivateAsync>
  <Found Context="model">
    @if (model is IReadonly || AsReadonly)
    {
      @Details(new MutatingState<T>(model, false))
    }
    else
    {
      @if (_mutating)
      {
        <EditForm
          Model="@model"
          OnValidSubmit="@(() => OnUpdate(model))">
          <DataAnnotationsValidator />

          @Edit(new MutatingState<T>(model, false))

          <MudText Color="Color.Error" Class="ml-4">
            <ValidationSummary />
          </MudText>

          <div Class="d-flex flex-row mt-4">
            <MudButton
              Variant="Variant.Filled"
              Color="Color.Success"
              ButtonType="ButtonType.Submit">
              @Translate("Update")
            </MudButton>
            <MudButton
              Variant="Variant.Filled"
              Color="Color.Secondary"
              OnClick="@(() => _mutating = !_mutating)"
              Class="ml-4">
              @Translate("Preview")
            </MudButton>
          </div>
        </EditForm>
      }
      else
      {
        @Details(new MutatingState<T>(model, false))
        @if (model is not IReadonly
          && RepresentativeState.Representative.Role
          == RoleModel.OperatorRepresentative)
        {
          <div Class="d-flex flex-row mt-4">
            <MudButton
              OnClick="@(() => _mutating = !_mutating)"
              Variant="Variant.Filled"
              Color="Color.Warning">
              @Translate("Edit")
            </MudButton>

            <MudSpacer/>

            @if (model is IAuditable auditable)
            {
              if (auditable.IsDeleted)
              {
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Success"
                  OnClick="@(() => OnRestore(model))">
                  @Translate("Restore")
                </MudButton>
              }
              else
              {
                <MudButton
                  Variant="Variant.Filled"
                  Color="Color.Error"
                  OnClick="@(() => OnDelete(model))">
                  @Translate("Delete")
                </MudButton>
              }

              <MudButton
                Variant="Variant.Outlined"
                Class="ml-2"
                Color="Color.Error"
                OnClick="@(() => OnForget(model))">
                @Translate("Forget")
              </MudButton>
            }
          </div>
        }
      }
    }
  </Found>

  <Created Context="model">
    @* NOTE: if created we want to start with editing *@
    @if (!_mutating)
    {
      <EditForm
        Model="@model"
        OnValidSubmit="@(() => OnCreate(model))">
        <DataAnnotationsValidator />

        @Edit(new MutatingState<T>(model, true))

        <MudText Color="Color.Error" Class="ml-4">
          <ValidationSummary />
        </MudText>

        <div Class="d-flex flex-row">
          <MudButton
            ButtonType="ButtonType.Submit"
            Variant="Variant.Filled"
            Color="Color.Success">
            @Translate("Create")
          </MudButton>
          <MudButton
            OnClick="@(() => _mutating = !_mutating)"
            Variant="Variant.Filled"
            Color="Color.Secondary"
            Class="ml-4">
            @Translate("Preview")
          </MudButton>
        </div>
      </EditForm>
    }
    else
    {
      @Details(new MutatingState<T>(model, true))

      <div Class="d-flex flex-row mt-4">
        <MudButton
          OnClick="@(() => _mutating = !_mutating)"
          Variant="Variant.Filled"
          Color="Color.Warning">
          @Translate("Edit")
        </MudButton>
      </div>
    }
  </Created>
</Loading>
