@namespace Ozds.Client.Components.Streaming

@typeparam T where T : notnull

@using MudBlazor
@using Ozds.Business.Queries.Abstractions
@inherits Ozds.Client.Components.Base.OzdsComponentBase

<Loading
  T="PaginatedList<T>"
  @ref="loading"
  Load="@(OnPage!)"
  LoadAsync="@(OnPageAsync!)"
  Progress="@(Progress!)"
  Error="@(Error!)">
  <Found Context="page">
    @if (page.Items.Count == 0)
    {
      if (Empty is not null)
      {
        @Empty
      }
      else
      {
        <Empty/>
      }
    }
    else
    {
      if (Found is not null)
      {
        @Found(page)
      }
      else if (Summary is not null)
      {
        foreach (var item in page.Items)
        {
          @Summary(item)
        }
      }
      else
      {
        foreach (var item in page.Items)
        {
          <MudText>
            <Serialized Value="@item"/>
          </MudText>
        }
      }

      if (page.TotalCount != page.Items.Count)
      {
        if (Pagination is not null)
        {
          @Pagination(
            new PaginationOptions(
              PageCount,
              _pageNumber,
              page.TotalCount,
              SetPageNumber
            )
          )
        }
        else
        {
          @if (Scroll == Scroll.Paged)
          {
            <div style="width: 100%; text-align: center;">
              <MudPagination
                class="mt-4"
                Count="@((int)Math.Ceiling(page.TotalCount / (double)PageCount))"
                Selected="_pageNumber"
                SelectedChanged="OnSelectedChanged"/>
              <MudText Class="mt-4" Typo="Typo.body2">
                @((_pageNumber - 1) * PageCount) -
                @(Math.Min(_pageNumber * PageCount, page.TotalCount)) /
                @(page.TotalCount)
              </MudText>
            </div>
          }
          else
          {
            <div
              id="@infiniteScrollId"
              style="width: 100%; text-align: center;">
              <MudProgressCircular/>
            </div>
            <MudScrollToTop>
              <MudFab
                Color="Color.Tertiary"
                StartIcon="@Icons.Material.Filled.ArrowCircleUp"/>
            </MudScrollToTop>
          }
        }
      }
    }
  </Found>
</Loading>

<script>
  window.observeElement = (elementId, dotNetHelper) => {
    const element = document.getElementById(elementId);

    if (!element) {
      console.error(`Element with id ${elementId} not found.`);
      return;
    }

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        dotNetHelper.invokeMethodAsync('OnScrollInView', entry.isIntersecting);
      });
    });

    observer.observe(element);
  };
</script>
