@page "/rep/{id}"


@if (user is null || representative is null)
{
  return;
}
@if (_representative != null)
{
  <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex  flex-column" Style="float: left;">
    <MudText Class="d-flex align-center my-2" Typo="@Typo.h5">@_representative.Representative.PhysicalPerson.Name</MudText>
    <MudPaper class="mt-2 px-4 py-2">
      <MudGrid Spacing="3">

        <MudItem xs="12" sm="6">
          <MudText Typo="Typo.body1" Style="font-weight: bold;">
            @T["Email"]:
          </MudText>
        </MudItem>
        <MudItem xs="12" sm="6">
          <MudHidden Breakpoint="Breakpoint.Xs">
            <MudText Type="Typo.body2" Align="MudAlign.Right">
              @_representative.Representative.PhysicalPerson.Email
            </MudText>
          </MudHidden>
          <MudHidden Breakpoint="Breakpoint.SmAndUp">
            <MudText Type="Typo.body2" Align="MudAlign.Left">
              @_representative.Representative.PhysicalPerson.Email
            </MudText>
          </MudHidden>
        </MudItem>

        <MudItem xs="12" sm="6">
          <MudText Typo="Typo.body1" Style="font-weight: bold;">
            @T["Grad"]:
          </MudText>
        </MudItem>
      </MudGrid>
    </MudPaper>
  </MudContainer>
}

@code {
  [Parameter] public string? id { get; set; }
  [CascadingParameter] public UserState user { get; set; } = default!;
  [CascadingParameter] public RepresentativeState representative { get; set; } = default!;
  private RepresentativeState? _representative;

  protected override async Task OnInitializedAsync()
  {
    // !!! Find _representative by id
  }

}
