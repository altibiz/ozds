@namespace Ozds.Client.Pages

@page "/measurements/meter/{id?}"
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using Ozds.Business.Analysis
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Business.Queries
@using Ozds.Client.Components.Charts
@using Ozds.Client.Components.Fields
@using Ozds.Client.Components.Models
@using Ozds.Client.Components.Streaming
@using Ozds.Client.State
@inherits Ozds.Client.Components.Models.Base.OzdsIdentifiableModelPageComponentBase<Ozds.Business.Models.Abstractions.IMeter>

@if (RepresentativeState.Representative.Role
  is not RoleModel.OperatorRepresentative)
{
  <NotFound/>
  return;
}

@if (analysis is not null)
{
  <Table Model="@analysis.Analysis.Monthly">
    <Summary>
      <Summary Model="@context"/>
    </Summary>
    <Details>
      <Details Model="@context"/>
    </Details>
    <Columns>
      <Columns Models="@analysis.Analysis.Monthly"/>
    </Columns>
  </Table>
  <DownloadField Models="@measurements" ></DownloadField>

  <MeasurementChartControls Meters="@meters">
    <MeasurementGaugeChart
      Parameters="@context"/>
    <MeasurementLineChart
      Parameters="@context"
      Brush="@(Breakpoint >= Breakpoint.MdAndUp)"/>
  </MeasurementChartControls>
}

<Mutating
  T="IMeter"
  Value="@(analysis?.Meter)"
  Id="@Id">
  <Edit>
    <HeadContent>
      @if (context.Created)
      {
        <title>OZDS - @Translate("New meter")</title>
      }
      else
      {
        <title>
          OZDS - @Translate("Meter"): @context.Model.Title
        </title>
      }
    </HeadContent>

    <Edit Model="context.Model"/>
  </Edit>
  <Details>
    <HeadContent>
      <title>
        OZDS - @Translate("Meter"): @context.Model.Title
      </title>
    </HeadContent>

    <Details Model="context.Model"/>
  </Details>
</Mutating>

@code {
  [CascadingParameter]
  private AnalysisState AnalysisState { get; set; } = default!;

  [Parameter]
  public string Id { get; set; } = default!;

  [CascadingParameter]
  private RepresentativeState RepresentativeState { get; set; } = default!;

  [CascadingParameter]
  private Breakpoint Breakpoint { get; set; }

  private MeterAnalysis? analysis; // Replace with your actual analysis type.

  private List<IMeter> meters = new();

  IEnumerable<object> measurements = new List<object>();

  protected override async Task OnParametersSetAsync()
  {
    // Retrieve analysis once all parameters have been set.
    analysis = AnalysisState.AnalysisBases.Value
      .AnalysesByMeter()
      .FirstOrDefault(x => x.Meter.Id == Id);

    if (analysis is not null)
    {
      // Create the meters list using the retrieved analysis.
      meters = new List<IMeter> { analysis.Meter };

      var queries = ScopedServices.GetRequiredService<MeasurementQueries>();
      var measures = await queries.ReadByMeterIdsDynamic(
        meters,
        ResolutionModel.Minute,
        1,
        0,
        CancellationToken,
        DateTimeOffset.UtcNow.AddMonths(-1),
        DateTimeOffset.UtcNow);

      measurements = measures.Items.OrderBy(x => x.Timestamp).ToList();
    }
  }
}
