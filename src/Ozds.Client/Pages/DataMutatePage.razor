@page "/data/{Type}/{Id}"
@attribute [StreamRendering]

@if (!string.IsNullOrEmpty(Type) && _componentDict.TryGetValue(Type, out var renderFragment))
{
  @renderFragment
}
else
{
  <p>Component not found for type: @Type</p>
}

<MutateEventsTable />

@code {

  [Parameter]
  public string? Type { get; set; } = "";

  [Parameter]
  public string? Id { get; set; } = "-1";

  private readonly Dictionary<string, RenderFragment> _componentDict = new();

  protected override void OnInitialized()
  {
    _componentDict.Add(
      "location", @<LocationMutate Id="@Id"/>);
    _componentDict.Add(
      "network-user", @<NetUserMutate Id="@Id"/>);
    _componentDict.Add(
      "red-low-catalogue", @<RedLowNetworkUserCatalogueMutate Id="@Id"/>);
    _componentDict.Add(
      "blue-low-catalogue", @<BlueLowNetworkUserCatalogueMutate Id="@Id"/>);
    _componentDict.Add(
      "white-low-catalogue", @<WhiteLowNetworkUserCatalogueMutate Id="@Id"/>);
    _componentDict.Add(
      "white-medium-catalogue", @<WhiteMediumNetworkUserCatalogueMutate Id="@Id"/>);
    _componentDict.Add(
      "regulatory-catalogue", @<RegulatoryCatalogueMutate Id="@Id"/>);
    _componentDict.Add(
      "messenger", @<MessengerMutate Id="@Id"/>);
    _componentDict.Add(
      "abb-b2x-validator", @<AbbB2xMeasurementValidatorMutate Id="@Id"/>);
    _componentDict.Add(
      "schneider-iem3xxx-validator", @<SchneideriEM3xxxMeasurementValidatorMutate Id="@Id"/>);
    _componentDict.Add(
      "abb-b2x-device", @<AbbB2xMeterMutate Id="@Id"/>);
    _componentDict.Add(
      "schneider-iem3xxx-device", @<SchneideriEM3xxxMeterMutate Id="@Id"/>);
    _componentDict.Add(
      "device-at-location", @<LocationMeasurementLocationMutate Id="@Id"/>);
    _componentDict.Add(
      "device-at-network-user", @<NetworkUserMeasurementLocationMutate Id="@Id"/>);
  }

}
