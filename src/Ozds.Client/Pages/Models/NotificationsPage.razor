@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@using Ozds.Business.Models.Base
@using Ozds.Business.Queries
@using Ozds.Business.Queries.Abstractions
@using Ozds.Client.Attributes
@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Streaming
@using Ozds.Client.Components.Tables
@using Ozds.Client.Components.Models
@using Ozds.Client.State

@page "/notifications"

@attribute [Navigation(
  Icon = Icons.Material.Outlined.Notifications,
  ParentTitle = "Alerts",
  Title = "Notifications")]

@inherits OzdsOwningComponentBase

<MudCheckBox
  T="bool"
  Label="@(Translate("Seen"))"
  Checked="@_seen"
  CheckedChanged="@(() => _seen = !_seen)"/>

<Paging
  PageAsync="@((page) => _seen
  ? ScopedServices
      .GetRequiredService<NotificationQueries>()
      .ReadForRecipient<NotificationModel>(
        RepresentativeState.Representative.Id,
        page,
        CancellationToken.None,
        seen: _seen)
  : Task.FromResult(RepresentativeState.Notifications
      .ToPaginated(RepresentativeState.Notifications.Count)))">
  <Found Context="page">
    <ResponsiveTable Model="@(page.Items)">
      <Summary>
        <NotificationSummary Model="@context" />
      </Summary>
      <Details>
        <NotificationDetails Model="@context" />
      </Details>
      <Columns>
        <NotificationColumns />
      </Columns>
    </ResponsiveTable>
  </Found>
</Paging>

@code {
  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  private bool _seen = false;
}
