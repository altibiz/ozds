@using Microsoft.Extensions.DependencyInjection
@using Ozds.Business.Models.Composite
@using Ozds.Business.Mutations.Agnostic
@using Ozds.Business.Queries
@using Ozds.Client.Attributes
@using Ozds.Client.Components.Models
@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Streaming

@namespace Ozds.Client.Pages

@page "/administration/user/{id}"

@inherits OzdsOwningComponentBase

<Mutating
  T="MaybeRepresentingUserModel"
  LoadAsync="@(() => ScopedServices
    .GetRequiredService<RepresentativeQueries>()
    .MaybeRepresentingUserByUserId(Id, CancellationToken.None))"
  UpdateAsync="@((x) => x.Representative is { } representative
    ? ScopedServices
      .GetRequiredService<AuditableMutations>()
      .Update(representative, CancellationToken.None)
    : Task.CompletedTask)"
  DeleteAsync="@((x) => x.Representative is { } representative
    ? ScopedServices
      .GetRequiredService<AuditableMutations>()
      .Delete(representative, CancellationToken.None)
    : Task.CompletedTask)">
  <Details>
    <MaybeRepresentingUserDetails Model="@context.Model"/>
  </Details>
  <Edit>
    <MaybeRepresentingUserEdit Model="@context.Model"/>
  </Edit>
</Mutating>

@code {
  [Parameter]
  public string Id { get; set; } = default!;
}
