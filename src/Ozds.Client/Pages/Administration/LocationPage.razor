@using Microsoft.AspNetCore.Components.Web
@using Ozds.Business.Models
@using Ozds.Business.Models.Enums
@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Streaming
@using Ozds.Client.Components.Models
@using Ozds.Client.State

@namespace Ozds.Client.Pages

@*
  TODO:
    optimize by checking if AnalysisBases were created
    and if not fetch only the location
*@

@page "/administration/location/{id?}"

@inherits OzdsComponentBase

@if (RepresentativeState.Representative.Role
  is not RoleModel.OperatorRepresentative
    or RoleModel.LocationRepresentative)
{
  <NotFound />
  return;
}

@{
  var location = AnalysisState.AnalysisBases.Value
    .FirstOrDefault(x => x.Location.Id == Id)?.Location;
}

@if (location is null
  && RepresentativeState.Representative.Role
    == RoleModel.LocationRepresentative)
{
  <NotFound />
  return;
}

<Mutating T="LocationModel" Id="@Id" Value="location">
  <Edit>
    <HeadContent>
      @if (context.Created)
      {
        <title>OZDS - @Translate("New location")</title>
      }
      else
      {
        <title>OZDS - @Translate("Locationotification"): @context.Model.Title</title>
      }
    </HeadContent>

    <LocationEdit Model="@context.Model" />
  </Edit>
  <Details>
    <HeadContent>
      <title>OZDS - @Translate("Location"): @context.Model.Title</title>
    </HeadContent>

    <LocationDetails Model="@context.Model" />
  </Details>
</Mutating>

@code {
  [Parameter]
  public string? Id { get; set; } = default!;

  [CascadingParameter]
  private RepresentativeState RepresentativeState { get; set; } = default!;

  [CascadingParameter]
  private AnalysisState AnalysisState { get; set; } = default!;
}
