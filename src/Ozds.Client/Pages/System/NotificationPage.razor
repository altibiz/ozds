@using Microsoft.Extensions.DependencyInjection
@using MudBlazor
@using Ozds.Business.Activation.Agnostic
@using Ozds.Business.Models
@using Ozds.Business.Models.Base
@using Ozds.Business.Models.Enums
@using Ozds.Business.Mutations
@using Ozds.Business.Queries
@using Ozds.Business.Queries.Agnostic
@using Ozds.Client.Components.Streaming
@using Ozds.Client.Components.Base
@using Ozds.Client.Components.Models
@using Ozds.Client.State

@namespace Ozds.Client.Pages

@page "/system/notification/{id?}"

@inherits OzdsOwningComponentBase

@if (RepresentativeState.Representative.Role
  is not RoleModel.OperatorRepresentative)
{
  <Loading T="NotificationModel" Id="@Id">
    <Found Context="model">
      <NotificationDetails Model="@model"/>
    </Found>
  </Loading>
  return;
}

<Mutating
  T="NotificationModel"
  Id="@Id"
  LoadAsync="@(async () => Id is null
    ? null
    : await ScopedServices
        .GetRequiredService<NotificationQueries>()
        .ReadSingle<NotificationModel>(Id, CancellationToken.None))"
  NewAsync="@(async () => ScopedServices
    .GetRequiredService<AgnosticModelActivator>()
    .Activate<SystemNotificationModel>())"
  CreateAsync="@((model) => ScopedServices
    .GetRequiredService<NotificationMutations>()
    .Create(model, CancellationToken.None))">
  <Edit>
    <NotificationEdit Model="@context.Model"/>
  </Edit>
  <Details>
    <NotificationDetails Model="@context.Model"/>
    @if (!context.Created)
    {
      <div class="d-flex flex-row mt-4 justify-end">
        <MudButton
          Variant="Variant.Filled"
          Class="align-self-end"
          OnClick="() => OnMarkAsSeen(context.Model)">
          @Translate("Mark as seen")
        </MudButton>
      </div>
    }
  </Details>
</Mutating>

@code {

  [Parameter]
  public string? Id { get; set; }

  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  private async Task OnMarkAsSeen(NotificationModel model)
  {
    await ScopedServices
      .GetRequiredService<NotificationMutations>()
      .MarkNotificationAsSeen(
        model.Id,
        RepresentativeState.Representative.Id,
        CancellationToken.None);

    NavigationManager.NavigateTo("/notifications");
  }
}
