@page "/notification/{id}"
@using Align = MudBlazor.Align
@inherits OzdsOwningComponentBase


@if (user is null)
{
  return;
}

<Loading T="NotificationModel" LoadAsync="Load">
  <Found Context="model">
    <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex  flex-column" Style="float: left;">
      <MudText Class="d-flex align-center my-2" Typo="@Typo.h5">Notification Id: @Id</MudText>
      <MudPaper class="mt-2 px-4 py-2">

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="3">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @T["Title"]:
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="9">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="MudAlign.Right">
                @model.Title
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left">
                @model.Title
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="@(model.Summary.Length > 30 ? 12 : 3)">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @T["Summary"]:
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="@(model.Summary.Length > 30 ? 12 : 9)">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="@(model.Summary.Length > 30 ? Align.Left : Align.Right)"
                       Style="overflow-wrap: break-word;">
                @model.Summary
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left"
                       Style="overflow-wrap: break-word;">
                @model.Summary
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="@(model.Content.Length > 30 ? 12 : 3)">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @T["Content"]:
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="@(model.Content.Length > 30 ? 12 : 9)">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="@(model.Content.Length > 30 ? Align.Left : Align.Right)"
                       Style="overflow-wrap: break-word;">
                <code Style="overflow-wrap: break-word;">
                  @model.Content
                </code>
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left"
                       Style="overflow-wrap: break-word;">
                <code Style="overflow-wrap: break-word;">
                  @model.Content
                </code>
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="3">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @T["Date"]:
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="9">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="MudAlign.Right">
                @DateTimeString(model.Timestamp)
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left">
                @DateTimeString(model.Timestamp)
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>
      </MudPaper>
    </MudContainer>
  </Found>
</Loading>

@code {
  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  [Parameter]
  public string Id { get; set; } = default!;

  private async Task<NotificationModel?> Load()
  {
    var notification = await ScopedServices
      .GetRequiredService<OzdsNotificationQueries>()
      .ReadSingle<NotificationModel>(Id);
    if (notification is not null)
    {
      await ScopedServices
        .GetRequiredService<NotificationMutations>()
        .MarkNotificationAsSeen(
          notification.Id,
          RepresentativeState.Representative.Id);
      RepresentativeState.MarkNotificationAsSeen(notification);
    }

    return notification;
  }

}
