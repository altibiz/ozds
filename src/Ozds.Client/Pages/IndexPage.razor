@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using Ozds.Business.Models.Abstractions
@using Ozds.Business.Models.Enums
@using Ozds.Business.Time
@using Ozds.Business.Analysis
@using Ozds.Client.Attributes
@using Ozds.Client.Components.Charts
@using Ozds.Client.Components.Dashboards
@using Ozds.Client.Components.Tables
@using Ozds.Client.Components.Models
@using Ozds.Client.State

@namespace Ozds.Client.Pages

@page "/"

@attribute [Navigation(
  Order = -1000,
  Title = "Dashboard",
  Icon= Icons.Material.Outlined.Home)]

<HeadContent>
  <title>OZDS</title>
</HeadContent>

@{
  var model = AnalysisState.AnalysisBases.Value.Analysis();
  var meters = AnalysisState.AnalysisBases.Value
    .Select(analysis => (IMeter)analysis.Meter)
    .DistinctBy(meter => meter.Id)
    .ToList();
}
@if (RepresentativeState.Representative.Role
  is RoleModel.NetworkUserRepresentative)
{
  <NetworkUserRepresentativeDashboard Model="@model" Meters="@meters" />
}
@if (RepresentativeState.Representative.Role
  is RoleModel.LocationRepresentative)
{
  <LocationRepresentativeDashboard  Model="@model" Meters="@meters" />
}
@if (RepresentativeState.Representative.Role
  is RoleModel.OperatorRepresentative)
{
  <OperatorRepresentativeDashboard Model="@model" Meters="@meters" />
}

@if (RepresentativeState.Representative.Role
  is RoleModel.OperatorRepresentative
    or RoleModel.LocationRepresentative)
{
  var locations = AnalysisState.AnalysisBases.Value
    .AnalysesByLocation();

  <ResponsiveTable
    Model="@locations"
    Link="@(x => $"location/${x.Location.Id}")">
    <Summary>
      <LocationAnalysisSummary Model="@context" />
    </Summary>
    <Details>
      <LocationAnalysisDetails Model="@context" />
    </Details>
    <Columns>
      <LocationAnalysisColumns />
    </Columns>
  </ResponsiveTable>
}

@if (RepresentativeState.Representative.Role
  is RoleModel.LocationRepresentative
    or RoleModel.NetworkUserRepresentative)
{
  var networkUsers = AnalysisState.AnalysisBases.Value
    .AnalysesByNetworkUser();

  <ResponsiveTable
    Model="@networkUsers"
    Link="@(x => $"network-user/${x.NetworkUser.Id}")">
    <Summary>
      <NetworkUserAnalysisSummary Model="@context" />
    </Summary>
    <Details>
      <NetworkUserAnalysisDetails Model="@context" />
    </Details>
    <Columns>
      <NetworkUserAnalysisColumns />
    </Columns>
  </ResponsiveTable>
}

@if (RepresentativeState.Representative.Role
  is RoleModel.NetworkUserRepresentative)
{
  var measurementLocations = AnalysisState.AnalysisBases.Value
    .AnalysesByMeasurementLocation();

  <ResponsiveTable
    Model="@measurementLocations"
    Link="@(x => $"measurement-location/${x.MeasurementLocation.Id}")">
    <Summary>
      <MeasurementLocationAnalysisSummary Model="@context" />
    </Summary>
    <Details>
      <MeasurementLocationAnalysisDetails Model="@context" />
    </Details>
    <Columns>
      <MeasurementLocationAnalysisColumns />
    </Columns>
  </ResponsiveTable>
}

@{
  var invoices = AnalysisState.AnalysisBases.Value
    .SelectMany(analysis => analysis.Invoices)
    .DistinctBy(invoice => invoice.Id)
    .OfType<IInvoice>()
    .ToList();

  <ResponsiveTable
    Model="@invoices"
    Link="@(x => $"invoice/${x.Id}")">
    <Summary>
      <InvoiceSummary Model="@context" />
    </Summary>
    <Details>
      <InvoiceDetails Model="@context" />
    </Details>
    <Columns>
      <InvoiceColumns />
    </Columns>
  </ResponsiveTable>
}

@code {
  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  [CascadingParameter]
  public AnalysisState AnalysisState { get; set; } = default!;
}
