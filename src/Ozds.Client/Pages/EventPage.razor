@page "/event/{id}"
@using Ozds.Client.Extensions
@using Align = MudBlazor.Align
@inherits OzdsOwningComponentBase


@if (user is null)
{
  return;
}
<Loading T="EventModel" LoadAsync="@(() => ScopedServices
  .GetRequiredService<ReadonlyQueries>()
  .ReadSingle<EventModel>(Id, CancellationToken.None))">
  <Found Context="model">
    @{
      var json = JsonString(model.Content);
    }
    <MudContainer MaxWidth="MaxWidth.Small" Class="d-flex  flex-column" Style="float: left;">
      <MudText Class="d-flex align-center my-2" Typo="@Typo.h5">Event Id: @Id</MudText>
      <MudPaper class="mt-2 px-4 py-2">

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="3">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @Translate("Title"):
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="9">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="MudAlign.Right">
                @model.Title
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left">
                @model.Title
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="3">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @Translate("Level"):
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="9">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <div Class="d-flex flex-row justify-end">
                <MudIcon Icon="@Icons.Material.Filled.Circle" Color="@model.Level.ToColor()"/>
                <MudText Type="Typo.body2">
                  <i>
                    (@Translate(model.Level.ToTitle()))
                  </i>
                </MudText>
              </div>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <div Class="d-flex flex-row justify-start">
                <MudIcon Icon="@Icons.Material.Filled.Circle" Color="@model.Level.ToColor()"/>
                <MudText Type="Typo.body2">
                  <i>
                    (@Translate(model.Level.ToTitle()))
                  </i>
                </MudText>
              </div>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="@(json.Length > 30 ? 12 : 3)">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @Translate("Content"):
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="@(json.Length > 30 ? 12 : 9)">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="@(json.Length > 30 ? Align.Left : Align.Right)"
                       Style="overflow-wrap: break-word;">
                <Serialized Value="@model.Content"/>
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left">
                <Serialized Value="@model.Content"/>
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>

        <MudGrid Spacing="3">
          <MudItem xs="12" sm="3">
            <MudText Typo="Typo.body1" Style="font-weight: bold;">
              @Translate("Date"):
            </MudText>
          </MudItem>
          <MudItem xs="12" sm="9">
            <MudHidden Breakpoint="Breakpoint.Xs">
              <MudText Type="Typo.body2" Align="MudAlign.Right">
                @DateString(model.Timestamp)
              </MudText>
            </MudHidden>
            <MudHidden Breakpoint="Breakpoint.SmAndUp">
              <MudText Type="Typo.body2" Align="MudAlign.Left">
                @DateString(model.Timestamp)
              </MudText>
            </MudHidden>
          </MudItem>
        </MudGrid>
      </MudPaper>
    </MudContainer>
  </Found>
</Loading>

@code {

  [CascadingParameter]
  public UserState user { get; set; } = default!;

  [CascadingParameter]
  public RepresentativeState RepresentativeState { get; set; } = default!;

  [Parameter]
  public string Id { get; set; } = default!;

}
