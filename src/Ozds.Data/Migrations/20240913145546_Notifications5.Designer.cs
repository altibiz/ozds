// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ozds.Data.Context;
using Ozds.Data.Entities.Enums;

#nullable disable

namespace Ozds.Data.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20240913145546_Notifications5")]
    partial class Notifications5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "audit_entity", new[] { "query", "creation", "modification", "deletion" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "category_entity", new[] { "all", "messenger", "messenger_push", "audit" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "duration_entity", new[] { "second", "minute", "hour", "day", "week", "month", "year" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "interval_entity", new[] { "quarter_hour", "day", "month" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "level_entity", new[] { "trace", "debug", "info", "warning", "error", "critical" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "phase_entity", new[] { "l1", "l2", "l3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_entity", new[] { "operator_representative", "location_representative", "network_user_representative" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "topic_entity", new[] { "all", "messenger", "messenger_inactivity" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.Property<long>("Locations_id")
                        .HasColumnType("bigint")
                        .HasColumnName("locations_id");

                    b.Property<string>("Representatives_stringId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_string_id");

                    b.HasKey("Locations_id", "Representatives_stringId")
                        .HasName("pk_location_entity_representative_entity");

                    b.HasIndex("Representatives_stringId")
                        .HasDatabaseName("ix_location_entity_representative_entity_representatives_strin");

                    b.ToTable("location_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.Property<long>("NetworkUsers_id")
                        .HasColumnType("bigint")
                        .HasColumnName("network_users_id");

                    b.Property<string>("Representatives_stringId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_string_id");

                    b.HasKey("NetworkUsers_id", "Representatives_stringId")
                        .HasName("pk_network_user_entity_representative_entity");

                    b.HasIndex("Representatives_stringId")
                        .HasDatabaseName("ix_network_user_entity_representative_entity_representatives_s");

                    b.ToTable("network_user_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xAggregateEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<IntervalEntity>("Interval")
                        .HasColumnType("interval_entity")
                        .HasColumnName("interval");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyTotalExportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_min_wh");

                    b.Property<float>("ActivePowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_avg_w");

                    b.Property<float>("ActivePowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_avg_w");

                    b.Property<float>("ActivePowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_avg_w");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<float>("CurrentL1AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_avg_a");

                    b.Property<float>("CurrentL2AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_avg_a");

                    b.Property<float>("CurrentL3AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_avg_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_min_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_min_varh");

                    b.Property<float>("ReactivePowerL1NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l1_net_t0_avg_var");

                    b.Property<float>("ReactivePowerL2NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l2_net_t0_avg_var");

                    b.Property<float>("ReactivePowerL3NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l3_net_t0_avg_var");

                    b.Property<float>("VoltageL1AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_avg_v");

                    b.Property<float>("VoltageL2AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_avg_v");

                    b.Property<float>("VoltageL3AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_avg_v");

                    b.HasKey("Timestamp", "Interval", "MeterId")
                        .HasName("pk_abb_b2x_aggregates");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_abb_b2x_aggregates_meter_id");

                    b.ToTable("abb_b2x_aggregates", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyL1ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l1_export_t0_wh");

                    b.Property<float>("ActiveEnergyL1ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l1_import_t0_wh");

                    b.Property<float>("ActiveEnergyL2ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l2_export_t0_wh");

                    b.Property<float>("ActiveEnergyL2ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l2_import_t0_wh");

                    b.Property<float>("ActiveEnergyL3ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l3_export_t0_wh");

                    b.Property<float>("ActiveEnergyL3ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l3_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_wh");

                    b.Property<float>("ActivePowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_w");

                    b.Property<float>("ActivePowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_w");

                    b.Property<float>("ActivePowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_w");

                    b.Property<float>("CurrentL1AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_a");

                    b.Property<float>("CurrentL2AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_a");

                    b.Property<float>("CurrentL3AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_a");

                    b.Property<float>("ReactiveEnergyL1ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l1_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL1ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l1_import_t0_varh");

                    b.Property<float>("ReactiveEnergyL2ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l2_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL2ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l2_import_t0_varh");

                    b.Property<float>("ReactiveEnergyL3ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l3_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL3ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l3_import_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_varh");

                    b.Property<float>("ReactivePowerL1NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l1_net_t0_var");

                    b.Property<float>("ReactivePowerL2NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l2_net_t0_var");

                    b.Property<float>("ReactivePowerL3NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l3_net_t0_var");

                    b.Property<float>("VoltageL1AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_v");

                    b.Property<float>("VoltageL2AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_v");

                    b.Property<float>("VoltageL3AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_v");

                    b.HasKey("Timestamp", "MeterId")
                        .HasName("pk_abb_b2x_measurements");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_abb_b2x_measurements_meter_id");

                    b.ToTable("abb_b2x_measurements", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.EventEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<List<CategoryEntity>>("Categories")
                        .IsRequired()
                        .HasColumnType("category_entity[]")
                        .HasColumnName("categories");

                    b.Property<JsonDocument>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<LevelEntity>("Level")
                        .HasColumnType("level_entity")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("EventEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeasurementLocationEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_measurement_locations");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_measurement_locations_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_measurement_locations_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_measurement_locations_last_updated_by_id");

                    b.HasIndex("MeterId")
                        .IsUnique()
                        .HasDatabaseName("ix_measurement_locations_meter_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeasurementLocationEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MessengerEntity", b =>
                {
                    b.Property<string>("_stringId")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("_locationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.ComplexProperty<Dictionary<string, object>>("MaxInactivityPeriod", "Ozds.Data.Entities.Base.MessengerEntity.MaxInactivityPeriod#PeriodEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DurationEntity>("Duration")
                                .HasColumnType("duration_entity")
                                .HasColumnName("max_inactivity_period_duration");

                            b1.Property<long>("Multiplier")
                                .HasColumnType("bigint")
                                .HasColumnName("max_inactivity_period_multiplier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("PushDelayPeriod", "Ozds.Data.Entities.Base.MessengerEntity.PushDelayPeriod#PeriodEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DurationEntity>("Duration")
                                .HasColumnType("duration_entity")
                                .HasColumnName("push_delay_period_duration");

                            b1.Property<long>("Multiplier")
                                .HasColumnType("bigint")
                                .HasColumnName("push_delay_period_multiplier");
                        });

                    b.HasKey("_stringId")
                        .HasName("pk_messengers");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_messengers_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_messengers_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_messengers_last_updated_by_id");

                    b.HasIndex("_locationId")
                        .HasDatabaseName("ix_messengers__location_id");

                    b.ToTable("messengers", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MessengerEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.Property<string>("_stringId")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<float>("ConnectionPower_W")
                        .HasColumnType("real")
                        .HasColumnName("connection_power_w");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MessengerId")
                        .HasColumnType("text")
                        .HasColumnName("messenger_id");

                    b.Property<List<PhaseEntity>>("Phases")
                        .IsRequired()
                        .HasColumnType("phase_entity[]")
                        .HasColumnName("phases");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("_stringId")
                        .HasName("pk_meters");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_meters_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_meters_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_meters_last_updated_by_id");

                    b.HasIndex("MessengerId")
                        .HasDatabaseName("ix_meters_messenger_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeterEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NetworkUserCalculationEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<string>("IssuedById")
                        .HasColumnType("text")
                        .HasColumnName("issued_by_id");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<decimal>("SupplyFeeTotal_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_fee_total_eur");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.Property<decimal>("Total_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("total_eur");

                    b.Property<decimal>("UsageFeeTotal_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_fee_total_eur");

                    b.Property<long>("_networkUserInvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("network_user_invoice_id");

                    b.Property<long>("_networkUserMeasurementLocationId")
                        .HasColumnType("bigint")
                        .HasColumnName("network_user_measurement_location_id");

                    b.Property<long>("_supplyRegulatoryCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("supply_regulatory_catalogue_id");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedMeter", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.ArchivedMeter#MeterEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<float>("ConnectionPower_W")
                                .HasColumnType("real")
                                .HasColumnName("am_connection_power__w");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("am_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("am_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("am_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("am_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("am_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("am_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("am_last_updated_on");

                            b1.Property<string>("MessengerId")
                                .HasColumnType("text")
                                .HasColumnName("am_messenger_id");

                            b1.Property<List<PhaseEntity>>("Phases")
                                .IsRequired()
                                .HasColumnType("phase_entity[]")
                                .HasColumnName("am_phases");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedNetworkUserMeasurementLocation", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.ArchivedNetworkUserMeasurementLocation#NetworkUserMeasurementLocationEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("anuml_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anuml_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("anuml_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anuml_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("anuml_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("anuml_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anuml_last_updated_on");

                            b1.Property<string>("MeterId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("anuml_meter_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedSupplyRegulatoryCatalogue", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.ArchivedSupplyRegulatoryCatalogue#RegulatoryCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("asrc_active_energy_total_import_t1_price__eur");

                            b1.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("asrc_active_energy_total_import_t2_price__eur");

                            b1.Property<decimal>("BusinessUsageFeePrice_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("asrc_business_usage_fee_price__eur");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("asrc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("asrc_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("asrc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("asrc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("asrc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("asrc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("asrc_last_updated_on");

                            b1.Property<decimal>("RenewableEnergyFeePrice_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("asrc_renewable_energy_fee_price__eur");

                            b1.Property<decimal>("TaxRate_Percent")
                                .HasColumnType("numeric")
                                .HasColumnName("asrc_tax_rate__percent");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SupplyActiveEnergyTotalImportT1", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.SupplyActiveEnergyTotalImportT1#SupplyActiveEnergyTotalImportT1CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rvt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rvt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rvt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("rvt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("rvt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SupplyActiveEnergyTotalImportT2", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.SupplyActiveEnergyTotalImportT2#SupplyActiveEnergyTotalImportT2CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rnt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rnt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("rnt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("rnt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("rnt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SupplyBusinessUsageFee", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.SupplyBusinessUsageFee#SupplyBusinessUsageFeeCalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("trp_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("trp_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("trp_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("trp_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("trp_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("SupplyRenewableEnergyFee", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.SupplyRenewableEnergyFee#SupplyRenewableEnergyFeeCalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("oie_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("oie_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("oie_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("oie_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("oie_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageMeterFee", "Ozds.Data.Entities.Base.NetworkUserCalculationEntity.UsageMeterFee#UsageMeterFeeCalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_N")
                                .HasColumnType("numeric")
                                .HasColumnName("usage_meter_fee_amount");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("usage_meter_fee_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("usage_meter_total_eur");
                        });

                    b.HasKey("_id")
                        .HasName("pk_network_user_calculations");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_network_user_calculations_issued_by_id");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_network_user_calculations_meter_id");

                    b.HasIndex("_networkUserInvoiceId")
                        .HasDatabaseName("ix_network_user_calculations__network_user_invoice_id");

                    b.HasIndex("_networkUserMeasurementLocationId")
                        .HasDatabaseName("ix_network_user_calculations__network_user_measurement_locatio");

                    b.HasIndex("_supplyRegulatoryCatalogueId")
                        .HasDatabaseName("ix_network_user_calculations__supply_regulatory_catalogue_id");

                    b.ToTable("network_user_calculations", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("NetworkUserCalculationEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_network_user_catalogues");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_network_user_catalogues_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_network_user_catalogues_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_network_user_catalogues_last_updated_by_id");

                    b.ToTable("network_user_catalogues", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("NetworkUserCatalogueEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NotificationEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<HashSet<TopicEntity>>("Topics")
                        .IsRequired()
                        .HasColumnType("topic_entity[]")
                        .HasColumnName("topics");

                    b.Property<long?>("_eventId")
                        .HasColumnType("bigint")
                        .HasColumnName("event_id");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_notifications");

                    b.HasIndex("_eventId")
                        .HasDatabaseName("ix_notifications__event_id");

                    b.ToTable("notifications", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("NotificationEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Joins.NotificationRecipientEntity", b =>
                {
                    b.Property<string>("RepresentativeId")
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.Property<long>("_notificationId")
                        .HasColumnType("bigint")
                        .HasColumnName("notification_id");

                    b.Property<DateTimeOffset?>("SeenOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("seen_on");

                    b.HasKey("RepresentativeId", "_notificationId")
                        .HasName("pk_notification_recipient_entity");

                    b.HasIndex("_notificationId")
                        .HasDatabaseName("ix_notification_recipient_entity__notification_id");

                    b.ToTable("notification_recipient_entity", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("AltiBizSubProjectCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alti_biz_sub_project_code");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("_blueLowNetworkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("blue_low_catalogue_id");

                    b.Property<long>("_redLowNetworkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("red_low_catalogue_id");

                    b.Property<long>("_regulatoryNetworkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("regulatory_catalogue_id");

                    b.Property<long>("_whiteLowNetworkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("white_low_catalogue_id");

                    b.Property<long>("_whiteMediumNetworkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("white_medium_catalogue_id");

                    b.ComplexProperty<Dictionary<string, object>>("LegalPerson", "Ozds.Data.Entities.LocationEntity.LegalPerson#LegalPersonEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_city");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_phone_number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_postal_code");

                            b1.Property<string>("SocialSecurityNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_social_security_number");
                        });

                    b.HasKey("_id")
                        .HasName("pk_locations");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_locations_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_locations_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_locations_last_updated_by_id");

                    b.HasIndex("_blueLowNetworkUserCatalogueId")
                        .HasDatabaseName("ix_locations__blue_low_network_user_catalogue_id");

                    b.HasIndex("_redLowNetworkUserCatalogueId")
                        .HasDatabaseName("ix_locations__red_low_network_user_catalogue_id");

                    b.HasIndex("_regulatoryNetworkUserCatalogueId")
                        .HasDatabaseName("ix_locations__regulatory_network_user_catalogue_id");

                    b.HasIndex("_whiteLowNetworkUserCatalogueId")
                        .HasDatabaseName("ix_locations__white_low_network_user_catalogue_id");

                    b.HasIndex("_whiteMediumNetworkUserCatalogueId")
                        .HasDatabaseName("ix_locations__white_medium_network_user_catalogue_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationInvoiceEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<string>("IssuedById")
                        .HasColumnType("text")
                        .HasColumnName("issued_by_id");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on");

                    b.Property<decimal>("TaxRate_Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate_percent");

                    b.Property<decimal>("Tax_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_eur");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.Property<decimal>("TotalWithTax_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("total_with_tax_eur");

                    b.Property<decimal>("Total_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("total_eur");

                    b.Property<long>("_locationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedLocation", "Ozds.Data.Entities.LocationInvoiceEntity.ArchivedLocation#LocationEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AltiBizSubProjectCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_alti_biz_sub_project_code");

                            b1.Property<string>("BlueLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_blue_low_network_user_catalogue_id");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("al_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("al_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("al_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("al_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_last_updated_on");

                            b1.Property<string>("RedLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_red_low_network_user_catalogue_id");

                            b1.Property<string>("RegulatoryCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_regulatory_catalogue_id");

                            b1.Property<string>("WhiteLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_white_low_network_user_catalogue_id");

                            b1.Property<string>("WhiteMediumNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_white_medium_network_user_catalogue_id");

                            b1.ComplexProperty<Dictionary<string, object>>("LegalPerson", "Ozds.Data.Entities.LocationInvoiceEntity.ArchivedLocation#LocationEntity.LegalPerson#LegalPersonEntity", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_address");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_city");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_email");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_name");

                                    b2.Property<string>("PhoneNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_phone_number");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_postal_code");

                                    b2.Property<string>("SocialSecurityNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_social_security_number");
                                });
                        });

                    b.HasKey("_id")
                        .HasName("pk_location_invoices");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_location_invoices_issued_by_id");

                    b.HasIndex("_locationId")
                        .HasDatabaseName("ix_location_invoices__location_id");

                    b.ToTable("location_invoices", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.HasKey("_id")
                        .HasName("pk_measurement_validators");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_measurement_validators_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_measurement_validators_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_measurement_validators_last_updated_by_id");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeasurementValidatorEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("AltiBizSubProjectCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alti_biz_sub_project_code");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<long>("_locationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.ComplexProperty<Dictionary<string, object>>("LegalPerson", "Ozds.Data.Entities.NetworkUserEntity.LegalPerson#LegalPersonEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_city");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_phone_number");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_postal_code");

                            b1.Property<string>("SocialSecurityNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("legal_person_social_security_number");
                        });

                    b.HasKey("_id")
                        .HasName("pk_network_users");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_network_users_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_network_users_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_network_users_last_updated_by_id");

                    b.HasIndex("_locationId")
                        .HasDatabaseName("ix_network_users__location_id");

                    b.ToTable("network_users", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserInvoiceEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<string>("BillId")
                        .HasColumnType("text")
                        .HasColumnName("bill_id");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<string>("IssuedById")
                        .HasColumnType("text")
                        .HasColumnName("issued_by_id");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on");

                    b.Property<decimal>("SupplyActiveEnergyTotalImportT1Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_active_energy_total_import_t1fee_eur");

                    b.Property<decimal>("SupplyActiveEnergyTotalImportT2Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_active_energy_total_import_t2fee_eur");

                    b.Property<decimal>("SupplyBusinessUsageFee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_business_usage_fee_eur");

                    b.Property<decimal>("SupplyFeeTotal_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_fee_total_eur");

                    b.Property<decimal>("SupplyRenewableEnergyFee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("supply_renewable_energy_fee_eur");

                    b.Property<decimal>("TaxRate_Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate_percent");

                    b.Property<decimal>("Tax_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_eur");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.Property<decimal>("TotalWithTax_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("total_with_tax_eur");

                    b.Property<decimal>("Total_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("total_eur");

                    b.Property<decimal>("UsageActiveEnergyTotalImportT0Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_active_energy_total_import_t0fee_eur");

                    b.Property<decimal>("UsageActiveEnergyTotalImportT1Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_active_energy_total_import_t1fee_eur");

                    b.Property<decimal>("UsageActiveEnergyTotalImportT2Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_active_energy_total_import_t2fee_eur");

                    b.Property<decimal>("UsageActivePowerTotalImportT1PeakFee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_active_power_total_import_t1peak_fee_eur");

                    b.Property<decimal>("UsageFeeTotal_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_fee_total_eur");

                    b.Property<decimal>("UsageMeterFee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_meter_fee_eur");

                    b.Property<decimal>("UsageReactiveEnergyTotalRampedT0Fee_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("usage_reactive_energy_total_ramped_t0fee_eur");

                    b.Property<long>("_networkUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("network_user_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedLocation", "Ozds.Data.Entities.NetworkUserInvoiceEntity.ArchivedLocation#LocationEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AltiBizSubProjectCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_alti_biz_sub_project_code");

                            b1.Property<string>("BlueLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_blue_low_network_user_catalogue_id");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("al_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("al_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("al_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("al_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("al_last_updated_on");

                            b1.Property<string>("RedLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_red_low_network_user_catalogue_id");

                            b1.Property<string>("RegulatoryCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_regulatory_catalogue_id");

                            b1.Property<string>("WhiteLowNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_white_low_network_user_catalogue_id");

                            b1.Property<string>("WhiteMediumNetworkUserCatalogueId")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("al_white_medium_network_user_catalogue_id");

                            b1.ComplexProperty<Dictionary<string, object>>("LegalPerson", "Ozds.Data.Entities.NetworkUserInvoiceEntity.ArchivedLocation#LocationEntity.LegalPerson#LegalPersonEntity", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_address");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_city");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_email");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_name");

                                    b2.Property<string>("PhoneNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_phone_number");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_postal_code");

                                    b2.Property<string>("SocialSecurityNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("al_lp_social_security_number");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedNetworkUser", "Ozds.Data.Entities.NetworkUserInvoiceEntity.ArchivedNetworkUser#NetworkUserEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AltiBizSubProjectCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("anu_alti_biz_sub_project_code");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("anu_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anu_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("anu_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anu_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("anu_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("anu_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("anu_last_updated_on");

                            b1.ComplexProperty<Dictionary<string, object>>("LegalPerson", "Ozds.Data.Entities.NetworkUserInvoiceEntity.ArchivedNetworkUser#NetworkUserEntity.LegalPerson#LegalPersonEntity", b2 =>
                                {
                                    b2.IsRequired();

                                    b2.Property<string>("Address")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_address");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_city");

                                    b2.Property<string>("Email")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_email");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_name");

                                    b2.Property<string>("PhoneNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_phone_number");

                                    b2.Property<string>("PostalCode")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_postal_code");

                                    b2.Property<string>("SocialSecurityNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("anu_lp_social_security_number");
                                });
                        });

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedRegulatoryCatalogue", "Ozds.Data.Entities.NetworkUserInvoiceEntity.ArchivedRegulatoryCatalogue#RegulatoryCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("arc_active_energy_total_import_t1_price__eur");

                            b1.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("arc_active_energy_total_import_t2_price__eur");

                            b1.Property<decimal>("BusinessUsageFeePrice_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("arc_business_usage_fee_price__eur");

                            b1.Property<string>("CreatedById")
                                .HasColumnType("text")
                                .HasColumnName("arc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("arc_created_on");

                            b1.Property<string>("DeletedById")
                                .HasColumnType("text")
                                .HasColumnName("arc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("arc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("boolean")
                                .HasColumnName("arc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .HasColumnType("text")
                                .HasColumnName("arc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("arc_last_updated_on");

                            b1.Property<decimal>("RenewableEnergyFeePrice_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("arc_renewable_energy_fee_price__eur");

                            b1.Property<decimal>("TaxRate_Percent")
                                .HasColumnType("numeric")
                                .HasColumnName("arc_tax_rate__percent");
                        });

                    b.HasKey("_id")
                        .HasName("pk_network_user_invoices");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_network_user_invoices_issued_by_id");

                    b.HasIndex("_networkUserId")
                        .HasDatabaseName("ix_network_user_invoices__network_user_id");

                    b.ToTable("network_user_invoices", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.RegulatoryCatalogueEntity", b =>
                {
                    b.Property<long>("_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("_id"));

                    b.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<decimal>("BusinessUsageFeePrice_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("business_usage_fee_price_eur");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<decimal>("RenewableEnergyFeePrice_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("renewable_energy_fee_price_eur");

                    b.Property<decimal>("TaxRate_Percent")
                        .HasColumnType("numeric")
                        .HasColumnName("tax_rate_percent");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("_id")
                        .HasName("pk_regulatory_catalogues");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_regulatory_catalogues_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_regulatory_catalogues_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_regulatory_catalogues_last_updated_by_id");

                    b.ToTable("regulatory_catalogues", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Property<string>("_stringId")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<RoleEntity>("Role")
                        .HasColumnType("role_entity")
                        .HasColumnName("role");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<List<TopicEntity>>("Topics")
                        .IsRequired()
                        .HasColumnType("topic_entity[]")
                        .HasColumnName("topics");

                    b.ComplexProperty<Dictionary<string, object>>("PhysicalPerson", "Ozds.Data.Entities.RepresentativeEntity.PhysicalPerson#PhysicalPersonEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_person_email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_person_name");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("physical_person_phone_number");
                        });

                    b.HasKey("_stringId")
                        .HasName("pk_representatives");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_representatives_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_representatives_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_representatives_last_updated_by_id");

                    b.ToTable("representatives", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxAggregateEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<IntervalEntity>("Interval")
                        .HasColumnType("interval_entity")
                        .HasColumnName("interval");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyTotalExportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_min_wh");

                    b.Property<float>("ActivePowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_avg_w");

                    b.Property<float>("ActivePowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_avg_w");

                    b.Property<float>("ActivePowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_avg_w");

                    b.Property<float>("ApparentPowerTotalNetT0Avg_VA")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_total_net_t0_avg_va");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<float>("CurrentL1AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_avg_a");

                    b.Property<float>("CurrentL2AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_avg_a");

                    b.Property<float>("CurrentL3AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_avg_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_min_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_min_varh");

                    b.Property<float>("ReactivePowerTotalNetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_total_net_t0_avg_var");

                    b.Property<float>("VoltageL1AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_avg_v");

                    b.Property<float>("VoltageL2AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_avg_v");

                    b.Property<float>("VoltageL3AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_avg_v");

                    b.HasKey("Timestamp", "Interval", "MeterId")
                        .HasName("pk_schneider_iem3xxx_aggregates");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_schneider_iem3xxx_aggregates_meter_id");

                    b.ToTable("schneider_iem3xxx_aggregates", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyL1ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l1_import_t0_wh");

                    b.Property<float>("ActiveEnergyL2ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l2_import_t0_wh");

                    b.Property<float>("ActiveEnergyL3ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l3_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_wh");

                    b.Property<float>("ActivePowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_w");

                    b.Property<float>("ActivePowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_w");

                    b.Property<float>("ActivePowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_w");

                    b.Property<float>("ApparentPowerTotalNetT0_VA")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_total_net_t0_va");

                    b.Property<float>("CurrentL1AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_a");

                    b.Property<float>("CurrentL2AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_a");

                    b.Property<float>("CurrentL3AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_varh");

                    b.Property<float>("ReactivePowerTotalNetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_total_net_t0_var");

                    b.Property<float>("VoltageL1AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_v");

                    b.Property<float>("VoltageL2AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_v");

                    b.Property<float>("VoltageL3AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_v");

                    b.HasKey("Timestamp", "MeterId")
                        .HasName("pk_schneider_iem3xxx_measurements");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_schneider_iem3xxx_measurements_meter_id");

                    b.ToTable("schneider_iem3xxx_measurements", (string)null);

                    b.HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.AuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<AuditEntity>("Audit")
                        .HasColumnType("audit_entity")
                        .HasColumnName("audit");

                    b.Property<string>("AuditableEntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_id");

                    b.Property<string>("AuditableEntityTable")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_table");

                    b.Property<string>("AuditableEntityType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_type");

                    b.HasIndex(new[] { "Audit", "AuditableEntityTable", "AuditableEntityId" }, "ix_events_auditable_entity_table_auditable_entity_id")
                        .HasDatabaseName("ix_events_audit_auditable_entity_table_auditable_entity_id");

                    b.HasIndex(new[] { "Audit", "AuditableEntityType", "AuditableEntityId" }, "ix_events_auditable_entity_type_auditable_entity_id")
                        .HasDatabaseName("ix_events_audit_auditable_entity_type_auditable_entity_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("AuditEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messenger_id");

                    b.HasIndex("MessengerId")
                        .HasDatabaseName("ix_events_messenger_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("MessengerEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("RepresentativeEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SystemEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("SystemEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationMeasurementLocationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeasurementLocationEntity");

                    b.Property<long>("_locationId")
                        .HasColumnType("bigint")
                        .HasColumnName("location_id");

                    b.HasIndex("_locationId")
                        .HasDatabaseName("ix_measurement_locations_location_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator().HasValue("LocationMeasurementLocationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeasurementLocationEntity");

                    b.Property<long>("_networkUserCatalogueId")
                        .HasColumnType("bigint")
                        .HasColumnName("network_user_catalogue_id");

                    b.Property<long>("_networkUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("network_user_id");

                    b.HasIndex("_networkUserCatalogueId")
                        .HasDatabaseName("ix_measurement_locations_network_user_catalogue_id");

                    b.HasIndex("_networkUserId")
                        .HasDatabaseName("ix_measurement_locations_network_user_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator().HasValue("NetworkUserMeasurementLocationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.PidgeonMessengerEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MessengerEntity");

                    b.ToTable("messengers", (string)null);

                    b.HasDiscriminator().HasValue("PidgeonMessengerEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeterEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeterEntity");

                    b.Property<long>("_measurementValidatorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("measurement_validator_id");

                    b.HasIndex("_measurementValidatorId")
                        .HasDatabaseName("ix_meters__measurement_validator_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator().HasValue("AbbB2xMeterEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeterEntity");

                    b.Property<long>("_measurementValidatorId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("measurement_validator_id");

                    b.HasIndex("_measurementValidatorId")
                        .HasDatabaseName("ix_meters__measurement_validator_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator().HasValue("SchneideriEM3xxxMeterEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowNetworkUserCalculationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCalculationEntity");

                    b.Property<long>("_usageNetworkUserCatalogueId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("usage_network_user_catalogue_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedUsageNetworkUserCatalogue", "Ozds.Data.Entities.BlueLowNetworkUserCalculationEntity.ArchivedUsageNetworkUserCatalogue#BlueLowNetworkUserCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT0Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t0_price__eur");

                            b1.Property<string>("CreatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_created_on");

                            b1.Property<string>("DeletedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("boolean")
                                .HasColumnName("aunuc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_last_updated_on");

                            b1.Property<decimal>("MeterFeePrice_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_meter_fee_price__eur");

                            b1.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_reactive_energy_total_ramped_t0_price__eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT0", "Ozds.Data.Entities.BlueLowNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT0#UsageActiveEnergyTotalImportT0CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("mjt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("mjt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .HasColumnType("numeric")
                                .HasColumnName("mjt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("mjt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .HasColumnType("numeric")
                                .HasColumnName("mjt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageReactiveEnergyTotalRampedT0", "Ozds.Data.Entities.BlueLowNetworkUserCalculationEntity.UsageReactiveEnergyTotalRampedT0#UsageReactiveEnergyTotalRampedT0CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveImportAmount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_amount_kwh");

                            b1.Property<decimal>("ActiveImportMax_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_max_kwh");

                            b1.Property<decimal>("ActiveImportMin_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_min_kwh");

                            b1.Property<decimal>("Amount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_amount_kvarh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_price_eur");

                            b1.Property<decimal>("ReactiveExportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_amount_kvarh");

                            b1.Property<decimal>("ReactiveExportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_max_kvarh");

                            b1.Property<decimal>("ReactiveExportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_min_kvarh");

                            b1.Property<decimal>("ReactiveImportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_amount_kvarh");

                            b1.Property<decimal>("ReactiveImportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_max_kvarh");

                            b1.Property<decimal>("ReactiveImportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_min_kvarh");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_total_eur");
                        });

                    b.HasIndex("_usageNetworkUserCatalogueId")
                        .HasDatabaseName("ix_network_user_calculations__usage_network_user_catalogue_id");

                    b.ToTable("network_user_calculations", (string)null);

                    b.HasDiscriminator().HasValue("BlueLowNetworkUserCalculationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowNetworkUserCalculationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCalculationEntity");

                    b.Property<long>("_usageNetworkUserCatalogueId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("usage_network_user_catalogue_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedUsageNetworkUserCatalogue", "Ozds.Data.Entities.RedLowNetworkUserCalculationEntity.ArchivedUsageNetworkUserCatalogue#RedLowNetworkUserCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t1_price__eur");

                            b1.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t2_price__eur");

                            b1.Property<decimal>("ActivePowerTotalImportT1Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_power_total_import_t1_price__eur");

                            b1.Property<string>("CreatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_created_on");

                            b1.Property<string>("DeletedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("boolean")
                                .HasColumnName("aunuc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_last_updated_on");

                            b1.Property<decimal>("MeterFeePrice_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_meter_fee_price__eur");

                            b1.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_reactive_energy_total_ramped_t0_price__eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT1", "Ozds.Data.Entities.RedLowNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT1#UsageActiveEnergyTotalImportT1CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT2", "Ozds.Data.Entities.RedLowNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT2#UsageActiveEnergyTotalImportT2CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActivePowerTotalImportT1Peak", "Ozds.Data.Entities.RedLowNetworkUserCalculationEntity.UsageActivePowerTotalImportT1Peak#UsageActivePowerTotalImportT1PeakCalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kW")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_amount_kw");

                            b1.Property<decimal>("Peak_kW")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_peak_kw");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageReactiveEnergyTotalRampedT0", "Ozds.Data.Entities.RedLowNetworkUserCalculationEntity.UsageReactiveEnergyTotalRampedT0#UsageReactiveEnergyTotalRampedT0CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveImportAmount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_amount_kwh");

                            b1.Property<decimal>("ActiveImportMax_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_max_kwh");

                            b1.Property<decimal>("ActiveImportMin_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_min_kwh");

                            b1.Property<decimal>("Amount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_amount_kvarh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_price_eur");

                            b1.Property<decimal>("ReactiveExportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_amount_kvarh");

                            b1.Property<decimal>("ReactiveExportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_max_kvarh");

                            b1.Property<decimal>("ReactiveExportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_min_kvarh");

                            b1.Property<decimal>("ReactiveImportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_amount_kvarh");

                            b1.Property<decimal>("ReactiveImportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_max_kvarh");

                            b1.Property<decimal>("ReactiveImportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_min_kvarh");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_total_eur");
                        });

                    b.HasIndex("_usageNetworkUserCatalogueId")
                        .HasDatabaseName("ix_network_user_calculations__usage_network_user_catalogue_id");

                    b.ToTable("network_user_calculations", (string)null);

                    b.HasDiscriminator().HasValue("RedLowNetworkUserCalculationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCalculationEntity");

                    b.Property<long>("_usageNetworkUserCatalogueId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("usage_network_user_catalogue_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedUsageNetworkUserCatalogue", "Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity.ArchivedUsageNetworkUserCatalogue#WhiteLowNetworkUserCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t1_price__eur");

                            b1.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t2_price__eur");

                            b1.Property<string>("CreatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_created_on");

                            b1.Property<string>("DeletedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("boolean")
                                .HasColumnName("aunuc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_last_updated_on");

                            b1.Property<decimal>("MeterFeePrice_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_meter_fee_price__eur");

                            b1.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_reactive_energy_total_ramped_t0_price__eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT1", "Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT1#UsageActiveEnergyTotalImportT1CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT2", "Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT2#UsageActiveEnergyTotalImportT2CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageReactiveEnergyTotalRampedT0", "Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity.UsageReactiveEnergyTotalRampedT0#UsageReactiveEnergyTotalRampedT0CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveImportAmount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_amount_kwh");

                            b1.Property<decimal>("ActiveImportMax_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_max_kwh");

                            b1.Property<decimal>("ActiveImportMin_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_min_kwh");

                            b1.Property<decimal>("Amount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_amount_kvarh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_price_eur");

                            b1.Property<decimal>("ReactiveExportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_amount_kvarh");

                            b1.Property<decimal>("ReactiveExportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_max_kvarh");

                            b1.Property<decimal>("ReactiveExportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_min_kvarh");

                            b1.Property<decimal>("ReactiveImportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_amount_kvarh");

                            b1.Property<decimal>("ReactiveImportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_max_kvarh");

                            b1.Property<decimal>("ReactiveImportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_min_kvarh");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_total_eur");
                        });

                    b.HasIndex("_usageNetworkUserCatalogueId")
                        .HasDatabaseName("ix_network_user_calculations__usage_network_user_catalogue_id");

                    b.ToTable("network_user_calculations", (string)null);

                    b.HasDiscriminator().HasValue("WhiteLowNetworkUserCalculationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCalculationEntity");

                    b.Property<long>("_usageNetworkUserCatalogueId")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bigint")
                        .HasColumnName("usage_network_user_catalogue_id");

                    b.ComplexProperty<Dictionary<string, object>>("ArchivedUsageNetworkUserCatalogue", "Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity.ArchivedUsageNetworkUserCatalogue#WhiteMediumNetworkUserCatalogueEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t1_price__eur");

                            b1.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_energy_total_import_t2_price__eur");

                            b1.Property<decimal>("ActivePowerTotalImportT1Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_active_power_total_import_t1_price__eur");

                            b1.Property<string>("CreatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_created_by_id");

                            b1.Property<DateTimeOffset>("CreatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_created_on");

                            b1.Property<string>("DeletedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_deleted_by_id");

                            b1.Property<DateTimeOffset?>("DeletedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_deleted_on");

                            b1.Property<bool>("IsDeleted")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("boolean")
                                .HasColumnName("aunuc_is_deleted");

                            b1.Property<string>("LastUpdatedById")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("text")
                                .HasColumnName("aunuc_last_updated_by_id");

                            b1.Property<DateTimeOffset?>("LastUpdatedOn")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("aunuc_last_updated_on");

                            b1.Property<decimal>("MeterFeePrice_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_meter_fee_price__eur");

                            b1.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("aunuc_reactive_energy_total_ramped_t0_price__eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT1", "Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT1#UsageActiveEnergyTotalImportT1CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mvt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActiveEnergyTotalImportT2", "Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity.UsageActiveEnergyTotalImportT2#UsageActiveEnergyTotalImportT2CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_amount_kwh");

                            b1.Property<decimal>("Max_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_max_kwh");

                            b1.Property<decimal>("Min_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_min_kwh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("mnt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageActivePowerTotalImportT1Peak", "Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity.UsageActivePowerTotalImportT1Peak#UsageActivePowerTotalImportT1PeakCalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount_kW")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_amount_kw");

                            b1.Property<decimal>("Peak_kW")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_peak_kw");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_price_eur");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("svt_total_eur");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UsageReactiveEnergyTotalRampedT0", "Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity.UsageReactiveEnergyTotalRampedT0#UsageReactiveEnergyTotalRampedT0CalculationItemEntity", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("ActiveImportAmount_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_amount_kwh");

                            b1.Property<decimal>("ActiveImportMax_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_max_kwh");

                            b1.Property<decimal>("ActiveImportMin_kWh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_active_import_min_kwh");

                            b1.Property<decimal>("Amount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_amount_kvarh");

                            b1.Property<decimal>("Price_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_price_eur");

                            b1.Property<decimal>("ReactiveExportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_amount_kvarh");

                            b1.Property<decimal>("ReactiveExportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_max_kvarh");

                            b1.Property<decimal>("ReactiveExportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_export_min_kvarh");

                            b1.Property<decimal>("ReactiveImportAmount_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_amount_kvarh");

                            b1.Property<decimal>("ReactiveImportMax_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_max_kvarh");

                            b1.Property<decimal>("ReactiveImportMin_kVARh")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_reactive_import_min_kvarh");

                            b1.Property<decimal>("Total_EUR")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("numeric")
                                .HasColumnName("jen_ramped_total_eur");
                        });

                    b.HasIndex("_usageNetworkUserCatalogueId")
                        .HasDatabaseName("ix_network_user_calculations__usage_network_user_catalogue_id");

                    b.ToTable("network_user_calculations", (string)null);

                    b.HasDiscriminator().HasValue("WhiteMediumNetworkUserCalculationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowNetworkUserCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity");

                    b.Property<decimal>("ActiveEnergyTotalImportT0Price_EUR")
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t0_price_eur");

                    b.Property<decimal>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("reactive_energy_total_ramped_t0_price_eur");

                    b.ToTable("network_user_catalogues", (string)null);

                    b.HasDiscriminator().HasValue("BlueLowNetworkUserCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowNetworkUserCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity");

                    b.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<decimal>("ActivePowerTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_power_total_import_t1_price_eur");

                    b.Property<decimal>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("reactive_energy_total_ramped_t0_price_eur");

                    b.ToTable("network_user_catalogues", (string)null);

                    b.HasDiscriminator().HasValue("RedLowNetworkUserCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowNetworkUserCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity");

                    b.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<decimal>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("reactive_energy_total_ramped_t0_price_eur");

                    b.ToTable("network_user_catalogues", (string)null);

                    b.HasDiscriminator().HasValue("WhiteLowNetworkUserCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumNetworkUserCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity");

                    b.Property<decimal>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<decimal>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<decimal>("ActivePowerTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("active_power_total_import_t1_price_eur");

                    b.Property<decimal>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<decimal>("ReactiveEnergyTotalRampedT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("numeric")
                        .HasColumnName("reactive_energy_total_ramped_t0_price_eur");

                    b.ToTable("network_user_catalogues", (string)null);

                    b.HasDiscriminator().HasValue("WhiteMediumNetworkUserCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.ResolvableNotificationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NotificationEntity");

                    b.Property<string>("ResolvedById")
                        .HasColumnType("text")
                        .HasColumnName("resolved_by_id");

                    b.Property<DateTimeOffset?>("ResolvedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_on");

                    b.HasIndex("ResolvedById")
                        .HasDatabaseName("ix_notifications_resolved_by_id");

                    b.ToTable("notifications", (string)null);

                    b.HasDiscriminator().HasValue("ResolvableNotificationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SystemNotificationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.NotificationEntity");

                    b.ToTable("notifications", (string)null);

                    b.HasDiscriminator().HasValue("SystemNotificationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementValidatorEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.MeasurementValidatorEntity");

                    b.Property<float>("MaxActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_w");

                    b.Property<float>("MaxCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_current_a");

                    b.Property<float>("MaxReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_reactive_power_var");

                    b.Property<float>("MaxVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_voltage_v");

                    b.Property<float>("MinActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_active_power_w");

                    b.Property<float>("MinCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_current_a");

                    b.Property<float>("MinReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_reactive_power_var");

                    b.Property<float>("MinVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_voltage_v");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator().HasValue("AbbB2xMeasurementValidatorEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementValidatorEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.MeasurementValidatorEntity");

                    b.Property<float>("MaxActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_w");

                    b.Property<float>("MaxApparentPower_VA")
                        .HasColumnType("real")
                        .HasColumnName("max_apparent_power_va");

                    b.Property<float>("MaxCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_current_a");

                    b.Property<float>("MaxReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_reactive_power_var");

                    b.Property<float>("MaxVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_voltage_v");

                    b.Property<float>("MinActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_active_power_w");

                    b.Property<float>("MinApparentPower_VA")
                        .HasColumnType("real")
                        .HasColumnName("min_apparent_power_va");

                    b.Property<float>("MinCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_current_a");

                    b.Property<float>("MinReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_reactive_power_var");

                    b.Property<float>("MinVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_voltage_v");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator().HasValue("SchneideriEM3xxxMeasurementValidatorEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.AuditEventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("RepresentativeAuditEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SystemAuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.AuditEventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("SystemAuditEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerNotificationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.ResolvableNotificationEntity");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messenger_id");

                    b.HasIndex("MessengerId")
                        .HasDatabaseName("ix_notifications_messenger_id");

                    b.ToTable("notifications", (string)null);

                    b.HasDiscriminator().HasValue("MessengerNotificationEntity");
                });

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("Locations_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_locations_locations_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("Representatives_stringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_representatives_repre");
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", null)
                        .WithMany()
                        .HasForeignKey("NetworkUsers_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_network_users_net");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("Representatives_stringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_representatives_r");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xAggregateEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.AbbB2xMeterEntity", "Meter")
                        .WithMany("Aggregates")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abb_b2x_aggregates_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.AbbB2xMeterEntity", "Meter")
                        .WithMany("Measurements")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abb_b2x_measurements_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_measurement_locations_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_measurement_locations_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_measurement_locations_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", "Meter")
                        .WithOne("MeasurementLocation")
                        .HasForeignKey("Ozds.Data.Entities.Base.MeasurementLocationEntity", "MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_meters_meter_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MessengerEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_messengers_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_messengers_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_messengers_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("Messengers")
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messengers_locations__location_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_meters_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_meters_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_meters_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.Base.MessengerEntity", "Messenger")
                        .WithMany("Meters")
                        .HasForeignKey("MessengerId")
                        .HasConstraintName("fk_meters_messengers_messenger_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Messenger");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NetworkUserCalculationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .HasConstraintName("fk_network_user_calculations_representatives_issued_by_id");

                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", "Meter")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_meters_meter_id");

                    b.HasOne("Ozds.Data.Entities.NetworkUserInvoiceEntity", "NetworkUserInvoice")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_networkUserInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_network_user_invoices__network_us");

                    b.HasOne("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", "NetworkUserMeasurementLocation")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_networkUserMeasurementLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_measurement_locations__network_us");

                    b.HasOne("Ozds.Data.Entities.RegulatoryCatalogueEntity", "SupplyRegulatoryCatalogue")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_supplyRegulatoryCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_regulatory_catalogues__supply_reg");

                    b.Navigation("IssuedBy");

                    b.Navigation("Meter");

                    b.Navigation("NetworkUserInvoice");

                    b.Navigation("NetworkUserMeasurementLocation");

                    b.Navigation("SupplyRegulatoryCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_network_user_catalogues_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_network_user_catalogues_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_network_user_catalogues_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NotificationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.EventEntity", "Event")
                        .WithMany("Notifications")
                        .HasForeignKey("_eventId")
                        .HasConstraintName("fk_notifications_events__event_id");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Joins.NotificationRecipientEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("NotificationRepresentatives")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_recipient_entity_representatives_representativ");

                    b.HasOne("Ozds.Data.Entities.Base.NotificationEntity", "Notification")
                        .WithMany("NotificationRepresentatives")
                        .HasForeignKey("_notificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_recipient_entity_notifications_notification_id");

                    b.Navigation("Notification");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_locations_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_locations_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_locations_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.BlueLowNetworkUserCatalogueEntity", "BlueLowNetworkUserCatalogue")
                        .WithMany("Locations")
                        .HasForeignKey("_blueLowNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_network_user_catalogues_blue_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.RedLowNetworkUserCatalogueEntity", "RedLowNetworkUserCatalogue")
                        .WithMany("Locations")
                        .HasForeignKey("_redLowNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_network_user_catalogues_red_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.RegulatoryCatalogueEntity", "RegulatoryCatalogue")
                        .WithMany("Locations")
                        .HasForeignKey("_regulatoryNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_regulatory_catalogues_regulatory_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.WhiteLowNetworkUserCatalogueEntity", "WhiteLowNetworkUserCatalogue")
                        .WithMany("Locations")
                        .HasForeignKey("_whiteLowNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_network_user_catalogues_white_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.WhiteMediumNetworkUserCatalogueEntity", "WhiteMediumNetworkUserCatalogue")
                        .WithMany("Locations")
                        .HasForeignKey("_whiteMediumNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_network_user_catalogues_white_medium_catalogue_id");

                    b.Navigation("BlueLowNetworkUserCatalogue");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("RedLowNetworkUserCatalogue");

                    b.Navigation("RegulatoryCatalogue");

                    b.Navigation("WhiteLowNetworkUserCatalogue");

                    b.Navigation("WhiteMediumNetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationInvoiceEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .HasConstraintName("fk_location_invoices_representatives_issued_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("Invoices")
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_invoices_locations_location_id");

                    b.Navigation("IssuedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_measurement_validators_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_network_users_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_network_users_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_network_users_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_users_locations_location_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserInvoiceEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .HasConstraintName("fk_network_user_invoices_representatives_issued_by_id");

                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", "NetworkUser")
                        .WithMany("Invoices")
                        .HasForeignKey("_networkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_invoices_network_users_network_user_id");

                    b.Navigation("IssuedBy");

                    b.Navigation("NetworkUser");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RegulatoryCatalogueEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_regulatory_catalogues_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_regulatory_catalogues_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_regulatory_catalogues_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_representatives_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_representatives_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_representatives_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxAggregateEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", "Meter")
                        .WithMany("Aggregates")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schneider_iem3xxx_aggregates_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", "Meter")
                        .WithMany("Measurements")
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schneider_iem3xxx_measurements_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MessengerEntity", "Messenger")
                        .WithMany("Events")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_messengers_messenger_id");

                    b.Navigation("Messenger");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("Events")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationMeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("MeasurementLocations")
                        .HasForeignKey("_locationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_locations_location_id");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity", "NetworkUserCatalogue")
                        .WithMany("NetworkUserMeasurementLocations")
                        .HasForeignKey("_networkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_network_user_catalogues_network_user_");

                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", "NetworkUser")
                        .WithMany("NetworkUserMeasurementLocations")
                        .HasForeignKey("_networkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_network_users_network_user_id");

                    b.Navigation("NetworkUser");

                    b.Navigation("NetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.AbbB2xMeasurementValidatorEntity", "MeasurementValidator")
                        .WithMany("Meters")
                        .HasForeignKey("_measurementValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_validators__measurement_validator_id");

                    b.Navigation("MeasurementValidator");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeasurementValidatorEntity", "MeasurementValidator")
                        .WithMany("Meters")
                        .HasForeignKey("_measurementValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_validators__measurement_validator_id");

                    b.Navigation("MeasurementValidator");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowNetworkUserCalculationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.BlueLowNetworkUserCatalogueEntity", "UsageNetworkUserCatalogue")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_usageNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_network_user_catalogues__usage_ne");

                    b.Navigation("UsageNetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowNetworkUserCalculationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RedLowNetworkUserCatalogueEntity", "UsageNetworkUserCatalogue")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_usageNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_network_user_catalogues__usage_ne");

                    b.Navigation("UsageNetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowNetworkUserCalculationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.WhiteLowNetworkUserCatalogueEntity", "UsageNetworkUserCatalogue")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_usageNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_network_user_catalogues__usage_ne");

                    b.Navigation("UsageNetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumNetworkUserCalculationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.WhiteMediumNetworkUserCatalogueEntity", "UsageNetworkUserCatalogue")
                        .WithMany("NetworkUserCalculations")
                        .HasForeignKey("_usageNetworkUserCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_calculations_network_user_catalogues__usage_ne");

                    b.Navigation("UsageNetworkUserCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.ResolvableNotificationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "ResolvedBy")
                        .WithMany("ResolvedNotifications")
                        .HasForeignKey("ResolvedById")
                        .HasConstraintName("fk_notifications_representatives_resolved_by_id");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("AuditEvents")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerNotificationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MessengerEntity", "Messenger")
                        .WithMany("InactivityNotifications")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_messengers_messenger_id");

                    b.Navigation("Messenger");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.EventEntity", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MessengerEntity", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("InactivityNotifications");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.Navigation("MeasurementLocation");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NetworkUserCatalogueEntity", b =>
                {
                    b.Navigation("NetworkUserMeasurementLocations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.NotificationEntity", b =>
                {
                    b.Navigation("NotificationRepresentatives");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MeasurementLocations");

                    b.Navigation("Messengers");

                    b.Navigation("NetworkUsers");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("NetworkUserMeasurementLocations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserInvoiceEntity", b =>
                {
                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RegulatoryCatalogueEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Navigation("AuditEvents");

                    b.Navigation("Events");

                    b.Navigation("NotificationRepresentatives");

                    b.Navigation("ResolvedNotifications");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", b =>
                {
                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeterEntity", b =>
                {
                    b.Navigation("Aggregates");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", b =>
                {
                    b.Navigation("Aggregates");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowNetworkUserCatalogueEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowNetworkUserCatalogueEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowNetworkUserCatalogueEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumNetworkUserCatalogueEntity", b =>
                {
                    b.Navigation("Locations");

                    b.Navigation("NetworkUserCalculations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementValidatorEntity", b =>
                {
                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementValidatorEntity", b =>
                {
                    b.Navigation("Meters");
                });
#pragma warning restore 612, 618
        }
    }
}
