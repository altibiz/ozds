// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ozds.Data;

#nullable disable

namespace Ozds.Data.Migrations
{
    [DbContext(typeof(OzdsDbContext))]
    [Migration("20240327173606_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "audit_entity", new[] { "query", "creation", "modification", "deletion" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "interval_entity", new[] { "quarter_hour", "day", "month" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "level_entity", new[] { "trace", "debug", "info", "warning", "error", "critical" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "phase_entity", new[] { "l1", "l2", "l3" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "role_entity", new[] { "operator_representative", "location_representative", "network_user_representative" });
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.Property<string>("LocationsId")
                        .HasColumnType("text")
                        .HasColumnName("locations_id");

                    b.Property<string>("RepresentativesId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_id");

                    b.HasKey("LocationsId", "RepresentativesId")
                        .HasName("pk_location_entity_representative_entity");

                    b.HasIndex("RepresentativesId")
                        .HasDatabaseName("ix_location_entity_representative_entity_representatives_id");

                    b.ToTable("location_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.Property<string>("NetworkUsersId")
                        .HasColumnType("text")
                        .HasColumnName("network_users_id");

                    b.Property<string>("RepresentativesId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_id");

                    b.HasKey("NetworkUsersId", "RepresentativesId")
                        .HasName("pk_network_user_entity_representative_entity");

                    b.HasIndex("RepresentativesId")
                        .HasDatabaseName("ix_network_user_entity_representative_entity_representatives_id");

                    b.ToTable("network_user_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xAggregateEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyTotalExportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_min_wh");

                    b.Property<float>("ActivePowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_avg_w");

                    b.Property<float>("ActivePowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_avg_w");

                    b.Property<float>("ActivePowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_avg_w");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<float>("CurrentL1AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_avg_a");

                    b.Property<float>("CurrentL2AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_avg_a");

                    b.Property<float>("CurrentL3AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_avg_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_min_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_min_varh");

                    b.Property<float>("ReactivePowerL1NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l1_net_t0_avg_var");

                    b.Property<float>("ReactivePowerL2NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l2_net_t0_avg_var");

                    b.Property<float>("ReactivePowerL3NetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l3_net_t0_avg_var");

                    b.Property<float>("VoltageL1AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_avg_v");

                    b.Property<float>("VoltageL2AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_avg_v");

                    b.Property<float>("VoltageL3AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_avg_v");

                    b.HasKey("Timestamp", "Interval", "MeterId")
                        .HasName("pk_abb_b2x_aggregates");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_abb_b2x_aggregates_meter_id");

                    b.ToTable("abb_b2x_aggregates", (string)null);

                    b
                        .UseTpcMappingStrategy()
                        .HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyL1ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l1_export_t0_wh");

                    b.Property<float>("ActiveEnergyL1ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l1_import_t0_wh");

                    b.Property<float>("ActiveEnergyL2ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l2_export_t0_wh");

                    b.Property<float>("ActiveEnergyL2ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l2_import_t0_wh");

                    b.Property<float>("ActiveEnergyL3ExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l3_export_t0_wh");

                    b.Property<float>("ActiveEnergyL3ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_l3_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_wh");

                    b.Property<float>("ActivePowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_any_t0_w");

                    b.Property<float>("ActivePowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_any_t0_w");

                    b.Property<float>("ActivePowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_any_t0_w");

                    b.Property<float>("CurrentL1AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_a");

                    b.Property<float>("CurrentL2AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_a");

                    b.Property<float>("CurrentL3AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_a");

                    b.Property<float>("ReactiveEnergyL1ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l1_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL1ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l1_import_t0_varh");

                    b.Property<float>("ReactiveEnergyL2ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l2_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL2ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l2_import_t0_varh");

                    b.Property<float>("ReactiveEnergyL3ExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l3_export_t0_varh");

                    b.Property<float>("ReactiveEnergyL3ImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_l3_import_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_varh");

                    b.Property<float>("ReactivePowerL1NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l1_any_t0_var");

                    b.Property<float>("ReactivePowerL2NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l2_any_t0_var");

                    b.Property<float>("ReactivePowerL3NetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l3_any_t0_var");

                    b.Property<float>("VoltageL1AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_v");

                    b.Property<float>("VoltageL2AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_v");

                    b.Property<float>("VoltageL3AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_v");

                    b.HasKey("Timestamp", "MeterId")
                        .HasName("pk_abb_b2x_measurements");

                    b.HasIndex("MeterId");

                    b.ToTable("abb_b2x_measurements", (string)null);

                    b
                        .UseTpcMappingStrategy()
                        .HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.CatalogueEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("Id")
                        .HasName("pk_catalogues");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_catalogues_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_catalogues_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_catalogues_last_updated_by_id");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("CatalogueEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.EventEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("EventEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeasurementLocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.HasKey("Id")
                        .HasName("pk_measurement_locations");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_measurement_locations_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_measurement_locations_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_measurement_locations_last_updated_by_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeasurementLocationEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("catalogue_id");

                    b.Property<float>("ConnectionPower_W")
                        .HasColumnType("real")
                        .HasColumnName("connection_power_w");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MeasurementLocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_location_id");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messenger_id");

                    b.Property<int[]>("Phases")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("phases");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)")
                        .HasColumnName("kind");

                    b.HasKey("Id")
                        .HasName("pk_meters");

                    b.HasIndex("CatalogueId")
                        .HasDatabaseName("ix_meters_catalogue_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_meters_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_meters_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_meters_last_updated_by_id");

                    b.HasIndex("MessengerId")
                        .HasDatabaseName("ix_meters_messenger_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeterEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("BlueLowCatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("blue_low_catalogue_id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MeasurementLocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_location_id");

                    b.Property<string>("RedLowCatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("red_low_catalogue_id");

                    b.Property<string>("RegulatoryCatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("regulatory_catalogue_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("WhiteLowCatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("white_low_catalogue_id");

                    b.Property<string>("WhiteMediumCatalogueId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("white_medium_catalogue_id");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("BlueLowCatalogueId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_blue_low_catalogue_id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_locations_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_locations_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_locations_last_updated_by_id");

                    b.HasIndex("MeasurementLocationId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_measurement_location_id");

                    b.HasIndex("RedLowCatalogueId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_red_low_catalogue_id");

                    b.HasIndex("RegulatoryCatalogueId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_regulatory_catalogue_id");

                    b.HasIndex("WhiteLowCatalogueId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_white_low_catalogue_id");

                    b.HasIndex("WhiteMediumCatalogueId")
                        .IsUnique()
                        .HasDatabaseName("ix_locations_white_medium_catalogue_id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationInvoiceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<string>("IssuedById")
                        .HasColumnType("text")
                        .HasColumnName("issued_by_id");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.HasKey("Id")
                        .HasName("pk_location_invoices");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_location_invoices_issued_by_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_location_invoices_location_id");

                    b.ToTable("location_invoices", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("MeterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("kind")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("character varying(55)")
                        .HasColumnName("kind");

                    b.HasKey("Id")
                        .HasName("pk_measurement_validators");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_measurement_validators_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_measurement_validators_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_measurement_validators_last_updated_by_id");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_measurement_validators_meter_id");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MeasurementValidatorEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_messengers");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_messengers_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_messengers_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_messengers_last_updated_by_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_messengers_location_id");

                    b.ToTable("messengers", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("LocationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_network_users");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_network_users_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_network_users_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_network_users_last_updated_by_id");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_network_users_location_id");

                    b.ToTable("network_users", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserInvoiceEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from_date");

                    b.Property<string>("IssuedById")
                        .HasColumnType("text")
                        .HasColumnName("issued_by_id");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("issued_on");

                    b.Property<string>("NetworkUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("network_user_id");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("to_date");

                    b.HasKey("Id")
                        .HasName("pk_network_user_invoices");

                    b.HasIndex("IssuedById")
                        .HasDatabaseName("ix_network_user_invoices_issued_by_id");

                    b.HasIndex("NetworkUserId")
                        .HasDatabaseName("ix_network_user_invoices_network_user_id");

                    b.ToTable("network_user_invoices", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("DeletedById")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by_id");

                    b.Property<DateTimeOffset?>("DeletedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("social_security_number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_representatives");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_representatives_created_by_id");

                    b.HasIndex("DeletedById")
                        .HasDatabaseName("ix_representatives_deleted_by_id");

                    b.HasIndex("LastUpdatedById")
                        .HasDatabaseName("ix_representatives_last_updated_by_id");

                    b.ToTable("representatives", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxAggregateEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int>("Interval")
                        .HasColumnType("integer")
                        .HasColumnName("interval");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyTotalExportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_export_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_min_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Max_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_max_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2Min_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_min_wh");

                    b.Property<float>("ActivePowerL1NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_avg_w");

                    b.Property<float>("ActivePowerL2NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_avg_w");

                    b.Property<float>("ActivePowerL3NetT0Avg_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_avg_w");

                    b.Property<float>("ApparentPowerTotalNetT0Avg_VA")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_total_net_t0_avg_va");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.Property<float>("CurrentL1AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_avg_a");

                    b.Property<float>("CurrentL2AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_avg_a");

                    b.Property<float>("CurrentL3AnyT0Avg_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_avg_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalExportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_export_t0_min_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Max_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_max_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0Min_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_min_varh");

                    b.Property<float>("ReactivePowerTotalNetT0Avg_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_total_net_t0_avg_var");

                    b.Property<float>("VoltageL1AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_avg_v");

                    b.Property<float>("VoltageL2AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_avg_v");

                    b.Property<float>("VoltageL3AnyT0Avg_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_avg_v");

                    b.HasKey("Timestamp", "Interval", "MeterId")
                        .HasName("pk_schneider_iem3xxx_aggregates");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_schneider_iem3xxx_aggregates_meter_id");

                    b.ToTable("schneider_iem3xxx_aggregates");

                    b
                        .UseTpcMappingStrategy()
                        .HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("MeterId")
                        .HasColumnType("text")
                        .HasColumnName("meter_id");

                    b.Property<float>("ActiveEnergyL1ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l1_t0_wh");

                    b.Property<float>("ActiveEnergyL2ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l2_t0_wh");

                    b.Property<float>("ActiveEnergyL3ImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l3_t0_wh");

                    b.Property<float>("ActiveEnergyTotalExportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_total_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT0_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_total_t0_wh");

                    b.Property<float>("ActiveEnergyTotalImportT1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_total_t1_wh");

                    b.Property<float>("ActiveEnergyTotalImportT2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_total_t2_wh");

                    b.Property<float>("ActivePowerL1NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_net_t0_w");

                    b.Property<float>("ActivePowerL2NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_net_t0_w");

                    b.Property<float>("ActivePowerL3NetT0_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_net_t0_w");

                    b.Property<float>("ApparentPowerTotalNetT0_VA")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_total_net_t0_va");

                    b.Property<float>("CurrentL1AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_any_t0_a");

                    b.Property<float>("CurrentL2AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_any_t0_a");

                    b.Property<float>("CurrentL3AnyT0_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_any_t0_a");

                    b.Property<float>("ReactiveEnergyTotalExportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_total_t0_varh");

                    b.Property<float>("ReactiveEnergyTotalImportT0_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_total_t0_varh");

                    b.Property<float>("ReactivePowerTotalNetT0_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_total_net_t0_var");

                    b.Property<float>("VoltageL1AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_any_t0_v");

                    b.Property<float>("VoltageL2AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_any_t0_v");

                    b.Property<float>("VoltageL3AnyT0_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_any_t0_v");

                    b.HasKey("Timestamp", "MeterId")
                        .HasName("pk_schneider_iem3xxx_measurements");

                    b.HasIndex("MeterId");

                    b.ToTable("schneider_iem3xxx_measurements");

                    b
                        .UseTpcMappingStrategy()
                        .HasAnnotation("TimescaleHypertable", "Timestamp,MeterId:number_partitions => 2");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.CatalogueEntity");

                    b.Property<float>("ActiveEnergyTotalImportT0Price_EUR")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t0_price_eur");

                    b.Property<float>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<float>("ReactiveEnergyTotalImportT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator().HasValue("BlueLowCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.CatalogueEntity");

                    b.Property<float>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<float>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<float>("MaxActivePowerTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_total_import_t1_price_eur");

                    b.Property<float>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<float>("ReactiveEnergyTotalImportT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator().HasValue("RedLowCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RegulatoryCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.CatalogueEntity");

                    b.Property<float>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<float>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<float>("BusinessUsageFeePrice_EUR")
                        .HasColumnType("real")
                        .HasColumnName("business_usage_fee_price_eur");

                    b.Property<float>("RenewableEnergyFeePrice_EUR")
                        .HasColumnType("real")
                        .HasColumnName("renewable_energy_fee_price_eur");

                    b.Property<float>("TaxRate_Percent")
                        .HasColumnType("real")
                        .HasColumnName("tax_rate_percent");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator().HasValue("RegulatoryCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.CatalogueEntity");

                    b.Property<float>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<float>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<float>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<float>("ReactiveEnergyTotalImportT0Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator().HasValue("WhiteLowCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumCatalogueEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.CatalogueEntity");

                    b.Property<float>("ActiveEnergyTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t1_price_eur");

                    b.Property<float>("ActiveEnergyTotalImportT2Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("active_energy_total_import_t2_price_eur");

                    b.Property<float>("MaxActivePowerTotalImportT1Price_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_total_import_t1_price_eur");

                    b.Property<float>("MeterFeePrice_EUR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("meter_fee_price_eur");

                    b.Property<float>("ReactiveEnergyTotalImportT0Price_EUR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_total_import_t0_price_eur");

                    b.ToTable("catalogues", (string)null);

                    b.HasDiscriminator().HasValue("WhiteMediumCatalogueEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.AuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<int>("Audit")
                        .HasColumnType("integer")
                        .HasColumnName("audit");

                    b.Property<string>("AuditableEntityId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("auditable_entity_id");

                    b.Property<string>("CatalogueEntityId")
                        .HasColumnType("text")
                        .HasColumnName("catalogue_entity_id");

                    b.Property<string>("LocationEntityId")
                        .HasColumnType("text")
                        .HasColumnName("location_entity_id");

                    b.Property<string>("MeasurementLocationEntityId")
                        .HasColumnType("text")
                        .HasColumnName("measurement_location_entity_id");

                    b.Property<string>("MeasurementValidatorEntityId")
                        .HasColumnType("text")
                        .HasColumnName("measurement_validator_entity_id");

                    b.Property<string>("MessengerEntityId")
                        .HasColumnType("text")
                        .HasColumnName("messenger_entity_id");

                    b.Property<string>("MeterEntityId")
                        .HasColumnType("text")
                        .HasColumnName("meter_entity_id");

                    b.Property<string>("NetworkUserEntityId")
                        .HasColumnType("text")
                        .HasColumnName("network_user_entity_id");

                    b.Property<string>("RepresentativeEntityId")
                        .HasColumnType("text")
                        .HasColumnName("representative_entity_id");

                    b.HasIndex("CatalogueEntityId")
                        .HasDatabaseName("ix_events_catalogue_entity_id");

                    b.HasIndex("LocationEntityId")
                        .HasDatabaseName("ix_events_location_entity_id");

                    b.HasIndex("MeasurementLocationEntityId")
                        .HasDatabaseName("ix_events_measurement_location_entity_id");

                    b.HasIndex("MeasurementValidatorEntityId")
                        .HasDatabaseName("ix_events_measurement_validator_entity_id");

                    b.HasIndex("MessengerEntityId")
                        .HasDatabaseName("ix_events_messenger_entity_id");

                    b.HasIndex("MeterEntityId")
                        .HasDatabaseName("ix_events_meter_entity_id");

                    b.HasIndex("NetworkUserEntityId")
                        .HasDatabaseName("ix_events_network_user_entity_id");

                    b.HasIndex("RepresentativeEntityId")
                        .HasDatabaseName("ix_events_representative_entity_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator().HasValue("AuditEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<string>("MessengerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("messenger_id");

                    b.HasIndex("MessengerId")
                        .HasDatabaseName("ix_events_messenger_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("MessengerEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id1");

                    b.ToTable("events", null, t =>
                        {
                            t.Property("RepresentativeId")
                                .HasColumnName("representative_event_entity_representative_id");
                        });

                    b.HasDiscriminator<string>("kind").HasValue("RepresentativeEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SystemEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.EventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("SystemEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationMeasurementLocationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeasurementLocationEntity");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_measurement_locations_meter_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator().HasValue("LocationMeasurementLocationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeasurementLocationEntity");

                    b.Property<string>("NetworkUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("network_user_id");

                    b.HasIndex("MeterId")
                        .HasDatabaseName("ix_measurement_locations_meter_id");

                    b.HasIndex("NetworkUserId")
                        .HasDatabaseName("ix_measurement_locations_network_user_id");

                    b.ToTable("measurement_locations", (string)null);

                    b.HasDiscriminator().HasValue("NetworkUserMeasurementLocationEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeterEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeterEntity");

                    b.Property<string>("MeasurementValidatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_validator_id");

                    b.HasIndex("MeasurementLocationId")
                        .HasDatabaseName("ix_meters_measurement_location_id");

                    b.HasIndex("MeasurementValidatorId")
                        .HasDatabaseName("ix_meters_measurement_validator_id");

                    b.ToTable("meters", (string)null);

                    b.HasDiscriminator().HasValue("AbbB2xMeterEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.MeterEntity");

                    b.Property<string>("MeasurementValidatorId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_validator_id");

                    b.HasIndex("MeasurementLocationId")
                        .HasDatabaseName("ix_meters_measurement_location_id");

                    b.HasIndex("MeasurementValidatorId")
                        .HasDatabaseName("ix_meters_measurement_validator_id1");

                    b.ToTable("meters", null, t =>
                        {
                            t.Property("MeasurementValidatorId")
                                .HasColumnName("schneideri_em3xxx_meter_entity_measurement_validator_id");
                        });

                    b.HasDiscriminator().HasValue("SchneideriEM3xxxMeterEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementValidatorEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.MeasurementValidatorEntity");

                    b.Property<float>("MaxActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_w");

                    b.Property<float>("MaxCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_current_a");

                    b.Property<float>("MaxReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_reactive_power_var");

                    b.Property<float>("MaxVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_voltage_v");

                    b.Property<float>("MinActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_active_power_w");

                    b.Property<float>("MinCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_current_a");

                    b.Property<float>("MinReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_reactive_power_var");

                    b.Property<float>("MinVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_voltage_v");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("AbbB2xMeasurementValidatorEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementValidatorEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.MeasurementValidatorEntity");

                    b.Property<float>("MaxActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_active_power_w");

                    b.Property<float>("MaxApparentPower_VA")
                        .HasColumnType("real")
                        .HasColumnName("max_apparent_power_va");

                    b.Property<float>("MaxCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_current_a");

                    b.Property<float>("MaxReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_reactive_power_var");

                    b.Property<float>("MaxVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("max_voltage_v");

                    b.Property<float>("MinActivePower_W")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_active_power_w");

                    b.Property<float>("MinApparentPower_VA")
                        .HasColumnType("real")
                        .HasColumnName("min_apparent_power_va");

                    b.Property<float>("MinCurrent_A")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_current_a");

                    b.Property<float>("MinReactivePower_VAR")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_reactive_power_var");

                    b.Property<float>("MinVoltage_V")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("real")
                        .HasColumnName("min_voltage_v");

                    b.ToTable("measurement_validators", (string)null);

                    b.HasDiscriminator().HasValue("SchneideriEM3xxxMeasurementValidatorEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.AuditEventEntity");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("representative_id");

                    b.HasIndex("RepresentativeId")
                        .HasDatabaseName("ix_events_representative_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("RepresentativeAuditEventEntity");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SystemAuditEventEntity", b =>
                {
                    b.HasBaseType("Ozds.Data.Entities.Base.AuditEventEntity");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<string>("kind").HasValue("SystemAuditEventEntity");
                });

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_locations_locations_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("RepresentativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_representatives_repre");
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", null)
                        .WithMany()
                        .HasForeignKey("NetworkUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_network_users_net");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("RepresentativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_representatives_r");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xAggregateEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.AbbB2xMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_abb_b2x_aggregates_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.AbbB2xMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.CatalogueEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_catalogues_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_catalogues_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_catalogues_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_measurement_locations_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_measurement_locations_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_measurement_locations_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.CatalogueEntity", "Catalogue")
                        .WithMany()
                        .HasForeignKey("CatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_catalogues_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_meters_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_meters_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_meters_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.MessengerEntity", "Messenger")
                        .WithMany("Meters")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_messengers_messenger_id");

                    b.Navigation("Catalogue");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Messenger");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.BlueLowCatalogueEntity", "BlueLowCatalogue")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "BlueLowCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_catalogues_blue_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_locations_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_locations_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_locations_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationMeasurementLocationEntity", "MeasurementLocation")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "MeasurementLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_measurement_locations_measurement_location_id");

                    b.HasOne("Ozds.Data.Entities.RedLowCatalogueEntity", "RedLowCatalogue")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "RedLowCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_catalogues_red_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.RegulatoryCatalogueEntity", "RegulatoryCatalogue")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "RegulatoryCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_catalogues_regulatory_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.WhiteLowCatalogueEntity", "WhiteLowCatalogue")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "WhiteLowCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_catalogues_white_low_catalogue_id");

                    b.HasOne("Ozds.Data.Entities.WhiteMediumCatalogueEntity", "WhiteMediumCatalogue")
                        .WithOne("Location")
                        .HasForeignKey("Ozds.Data.Entities.LocationEntity", "WhiteMediumCatalogueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_locations_catalogues_white_medium_catalogue_id");

                    b.Navigation("BlueLowCatalogue");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("MeasurementLocation");

                    b.Navigation("RedLowCatalogue");

                    b.Navigation("RegulatoryCatalogue");

                    b.Navigation("WhiteLowCatalogue");

                    b.Navigation("WhiteMediumCatalogue");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationInvoiceEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .HasConstraintName("fk_location_invoices_representatives_issued_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("Invoices")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_invoices_locations_location_id");

                    b.Navigation("IssuedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_measurement_validators_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_measurement_validators_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_validators_meters_meter_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_messengers_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_messengers_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_messengers_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("Messengers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messengers_locations_location_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_network_users_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_network_users_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_network_users_representatives_last_updated_by_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", "Location")
                        .WithMany("NetworkUsers")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_users_locations_location_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserInvoiceEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "IssuedBy")
                        .WithMany()
                        .HasForeignKey("IssuedById")
                        .HasConstraintName("fk_network_user_invoices_representatives_issued_by_id");

                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", "NetworkUser")
                        .WithMany("Invoices")
                        .HasForeignKey("NetworkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_invoices_network_users_network_user_id");

                    b.Navigation("IssuedBy");

                    b.Navigation("NetworkUser");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_representatives_representatives_created_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById")
                        .HasConstraintName("fk_representatives_representatives_deleted_by_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .HasConstraintName("fk_representatives_representatives_last_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxAggregateEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_schneider_iem3xxx_aggregates_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.AuditEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.CatalogueEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("CatalogueEntityId")
                        .HasConstraintName("fk_events_catalogues_catalogue_entity_id");

                    b.HasOne("Ozds.Data.Entities.LocationEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("LocationEntityId")
                        .HasConstraintName("fk_events_locations_location_entity_id");

                    b.HasOne("Ozds.Data.Entities.Base.MeasurementLocationEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("MeasurementLocationEntityId")
                        .HasConstraintName("fk_events_measurement_locations_measurement_location_entity_id");

                    b.HasOne("Ozds.Data.Entities.MeasurementValidatorEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("MeasurementValidatorEntityId")
                        .HasConstraintName("fk_events_measurement_validators_measurement_validator_entity_");

                    b.HasOne("Ozds.Data.Entities.MessengerEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("MessengerEntityId")
                        .HasConstraintName("fk_events_messengers_messenger_entity_id");

                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("MeterEntityId")
                        .HasConstraintName("fk_events_meters_meter_entity_id");

                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("NetworkUserEntityId")
                        .HasConstraintName("fk_events_network_users_network_user_entity_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("RepresentativeEntityId")
                        .HasConstraintName("fk_events_representatives_representative_entity_id");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.MessengerEntity", "Messenger")
                        .WithMany("Events")
                        .HasForeignKey("MessengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_messengers_messenger_id");

                    b.Navigation("Messenger");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("Events")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id1");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationMeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_meters_meter_id");

                    b.Navigation("Meter");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserMeasurementLocationEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MeterEntity", "Meter")
                        .WithMany()
                        .HasForeignKey("MeterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_meters_meter_id");

                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", "NetworkUser")
                        .WithMany("MeasurementLocations")
                        .HasForeignKey("NetworkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_measurement_locations_network_users_network_user_id");

                    b.Navigation("Meter");

                    b.Navigation("NetworkUser");
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MeasurementLocationEntity", "MeasurementLocation")
                        .WithMany()
                        .HasForeignKey("MeasurementLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_locations_measurement_location_id");

                    b.HasOne("Ozds.Data.Entities.AbbB2xMeasurementValidatorEntity", "MeasurementValidator")
                        .WithMany()
                        .HasForeignKey("MeasurementValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_validators_measurement_validator_id");

                    b.Navigation("MeasurementLocation");

                    b.Navigation("MeasurementValidator");
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeterEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.Base.MeasurementLocationEntity", "MeasurementLocation")
                        .WithMany()
                        .HasForeignKey("MeasurementLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_locations_measurement_location_id");

                    b.HasOne("Ozds.Data.Entities.SchneideriEM3xxxMeasurementValidatorEntity", "MeasurementValidator")
                        .WithMany()
                        .HasForeignKey("MeasurementValidatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meters_measurement_validators_measurement_validator_id1");

                    b.Navigation("MeasurementLocation");

                    b.Navigation("MeasurementValidator");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeAuditEventEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", "Representative")
                        .WithMany("AuditEvents")
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_representatives_representative_id");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.CatalogueEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeasurementLocationEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Ozds.Data.Entities.Base.MeterEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Invoices");

                    b.Navigation("Messengers");

                    b.Navigation("NetworkUsers");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MeasurementValidatorEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Ozds.Data.Entities.MessengerEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Events");

                    b.Navigation("Meters");
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Invoices");

                    b.Navigation("MeasurementLocations");
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Navigation("AuditEvents");

                    b.Navigation("Audits");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Ozds.Data.Entities.BlueLowCatalogueEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Ozds.Data.Entities.RedLowCatalogueEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Ozds.Data.Entities.RegulatoryCatalogueEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteLowCatalogueEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Ozds.Data.Entities.WhiteMediumCatalogueEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationMeasurementLocationEntity", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
