// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ozds.Data;

#nullable disable

namespace Ozds.Data.Migrations
{
    [DbContext(typeof(OzdsDbContext))]
    partial class OzdsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.Property<string>("LocationsId")
                        .HasColumnType("text")
                        .HasColumnName("locations_id");

                    b.Property<string>("RepresentativesId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_id");

                    b.HasKey("LocationsId", "RepresentativesId")
                        .HasName("pk_location_entity_representative_entity");

                    b.HasIndex("RepresentativesId")
                        .HasDatabaseName("ix_location_entity_representative_entity_representatives_id");

                    b.ToTable("location_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.Property<string>("NetworkUsersId")
                        .HasColumnType("text")
                        .HasColumnName("network_users_id");

                    b.Property<string>("RepresentativesId")
                        .HasColumnType("text")
                        .HasColumnName("representatives_id");

                    b.HasKey("NetworkUsersId", "RepresentativesId")
                        .HasName("pk_network_user_entity_representative_entity");

                    b.HasIndex("RepresentativesId")
                        .HasDatabaseName("ix_network_user_entity_representative_entity_representatives_id");

                    b.ToTable("network_user_entity_representative_entity", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.AbbB2xMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<float>("ActiveEnergyExportL1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_l1_wh");

                    b.Property<float>("ActiveEnergyExportL2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_l2_wh");

                    b.Property<float>("ActiveEnergyExportL3_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_l3_wh");

                    b.Property<float>("ActiveEnergyExportTotal_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_total_wh");

                    b.Property<float>("ActiveEnergyImportL1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l1_wh");

                    b.Property<float>("ActiveEnergyImportL2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l2_wh");

                    b.Property<float>("ActiveEnergyImportL3_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l3_wh");

                    b.Property<float>("ActiveEnergyImportTotal_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_total_wh");

                    b.Property<float>("ActivePowerL1_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_w");

                    b.Property<float>("ActivePowerL2_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_w");

                    b.Property<float>("ActivePowerL3_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_w");

                    b.Property<float>("CurrentL1_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_a");

                    b.Property<float>("CurrentL2_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_a");

                    b.Property<float>("CurrentL3_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_a");

                    b.Property<float>("ReactiveEnergyExportL1_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_l1_va_rh");

                    b.Property<float>("ReactiveEnergyExportL2_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_l2_va_rh");

                    b.Property<float>("ReactiveEnergyExportL3_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_l3_va_rh");

                    b.Property<float>("ReactiveEnergyExportTotal_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_total_va_rh");

                    b.Property<float>("ReactiveEnergyImportL1_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_l1_va_rh");

                    b.Property<float>("ReactiveEnergyImportL2_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_l2_va_rh");

                    b.Property<float>("ReactiveEnergyImportL3_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_l3_va_rh");

                    b.Property<float>("ReactiveEnergyImportTotal_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_total_va_rh");

                    b.Property<float>("ReactivePowerL1_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l1_var");

                    b.Property<float>("ReactivePowerL2_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l2_var");

                    b.Property<float>("ReactivePowerL3_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_l3_var");

                    b.Property<float>("VoltageL1_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_v");

                    b.Property<float>("VoltageL2_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_v");

                    b.Property<float>("VoltageL3_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_v");

                    b.HasKey("Timestamp", "Source")
                        .HasName("pk_abb_b2x_measurements");

                    b.ToTable("abb_b2x_measurements", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.LocationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.NetworkUserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_network_users");

                    b.ToTable("network_users", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.RepresentativeEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsOperatorRepresentative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_operator_representative");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("postal_code");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("social_security_number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_representatives");

                    b.ToTable("representatives", (string)null);
                });

            modelBuilder.Entity("Ozds.Data.Entities.SchneideriEM3xxxMeasurementEntity", b =>
                {
                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<float>("ActiveEnergyExportTotal_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_export_total_wh");

                    b.Property<float>("ActiveEnergyImportL1_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l1_wh");

                    b.Property<float>("ActiveEnergyImportL2_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l2_wh");

                    b.Property<float>("ActiveEnergyImportL3_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_l3_wh");

                    b.Property<float>("ActiveEnergyImportTotal_Wh")
                        .HasColumnType("real")
                        .HasColumnName("active_energy_import_total_wh");

                    b.Property<float>("ActivePowerL1_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l1_w");

                    b.Property<float>("ActivePowerL2_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l2_w");

                    b.Property<float>("ActivePowerL3_W")
                        .HasColumnType("real")
                        .HasColumnName("active_power_l3_w");

                    b.Property<float>("ApparentPowerTotal_VA")
                        .HasColumnType("real")
                        .HasColumnName("apparent_power_total_va");

                    b.Property<float>("CurrentL1_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l1_a");

                    b.Property<float>("CurrentL2_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l2_a");

                    b.Property<float>("CurrentL3_A")
                        .HasColumnType("real")
                        .HasColumnName("current_l3_a");

                    b.Property<float>("ReactiveEnergyExportTotal_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_export_total_va_rh");

                    b.Property<float>("ReactiveEnergyImportTotal_VARh")
                        .HasColumnType("real")
                        .HasColumnName("reactive_energy_import_total_va_rh");

                    b.Property<float>("ReactivePowerTotal_VAR")
                        .HasColumnType("real")
                        .HasColumnName("reactive_power_total_var");

                    b.Property<float>("VoltageL1_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l1_v");

                    b.Property<float>("VoltageL2_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l2_v");

                    b.Property<float>("VoltageL3_V")
                        .HasColumnType("real")
                        .HasColumnName("voltage_l3_v");

                    b.HasKey("Timestamp", "Source")
                        .HasName("pk_schneideri_em3xxx_measurements");

                    b.ToTable("schneideri_em3xxx_measurements", (string)null);
                });

            modelBuilder.Entity("LocationEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.LocationEntity", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_locations_locations_id");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("RepresentativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_location_entity_representative_entity_representatives_repre");
                });

            modelBuilder.Entity("NetworkUserEntityRepresentativeEntity", b =>
                {
                    b.HasOne("Ozds.Data.Entities.NetworkUserEntity", null)
                        .WithMany()
                        .HasForeignKey("NetworkUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_network_users_net");

                    b.HasOne("Ozds.Data.Entities.RepresentativeEntity", null)
                        .WithMany()
                        .HasForeignKey("RepresentativesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_network_user_entity_representative_entity_representatives_r");
                });
#pragma warning restore 612, 618
        }
    }
}
